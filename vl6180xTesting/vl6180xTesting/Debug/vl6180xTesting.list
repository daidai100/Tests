
vl6180xTesting.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006bdc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001dc  08006d6c  08006d6c  00016d6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006f48  08006f48  00020140  2**0
                  CONTENTS
  4 .ARM          00000000  08006f48  08006f48  00020140  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006f48  08006f48  00020140  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006f48  08006f48  00016f48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006f4c  08006f4c  00016f4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000140  20000000  08006f50  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020140  2**0
                  CONTENTS
 10 .bss          00000110  20000140  20000140  00020140  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000250  20000250  00020140  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020140  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010159  00000000  00000000  00020170  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001fac  00000000  00000000  000302c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000cf8  00000000  00000000  00032278  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000c20  00000000  00000000  00032f70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001cc23  00000000  00000000  00033b90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000fefa  00000000  00000000  000507b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a38dc  00000000  00000000  000606ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00103f89  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003e04  00000000  00000000  00103fdc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000140 	.word	0x20000140
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006d54 	.word	0x08006d54

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000144 	.word	0x20000144
 80001cc:	08006d54 	.word	0x08006d54

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <VL6180x_I2CWrite>:
										  uint16_t DevAddress,
										  uint8_t *pData,
										  uint16_t Size,
										  uint32_t Timeout);
//////////////////////やんないといけないとこ↓
int  VL6180x_I2CWrite(VL6180xDev_t dev, uint8_t  *buff, uint8_t len){
 8000270:	b580      	push	{r7, lr}
 8000272:	b084      	sub	sp, #16
 8000274:	af02      	add	r7, sp, #8
 8000276:	4603      	mov	r3, r0
 8000278:	6039      	str	r1, [r7, #0]
 800027a:	71fb      	strb	r3, [r7, #7]
 800027c:	4613      	mov	r3, r2
 800027e:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Master_Transmit(&hi2c1, dev, buff, len , 1000);
 8000280:	79fb      	ldrb	r3, [r7, #7]
 8000282:	b299      	uxth	r1, r3
 8000284:	79bb      	ldrb	r3, [r7, #6]
 8000286:	b29b      	uxth	r3, r3
 8000288:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800028c:	9200      	str	r2, [sp, #0]
 800028e:	683a      	ldr	r2, [r7, #0]
 8000290:	4803      	ldr	r0, [pc, #12]	; (80002a0 <VL6180x_I2CWrite+0x30>)
 8000292:	f002 ff81 	bl	8003198 <HAL_I2C_Master_Transmit>
	return 0;
 8000296:	2300      	movs	r3, #0
}
 8000298:	4618      	mov	r0, r3
 800029a:	3708      	adds	r7, #8
 800029c:	46bd      	mov	sp, r7
 800029e:	bd80      	pop	{r7, pc}
 80002a0:	2000015c 	.word	0x2000015c

080002a4 <VL6180x_I2CRead>:

int VL6180x_I2CRead(VL6180xDev_t dev, uint8_t *buff, uint8_t len){
 80002a4:	b580      	push	{r7, lr}
 80002a6:	b084      	sub	sp, #16
 80002a8:	af02      	add	r7, sp, #8
 80002aa:	4603      	mov	r3, r0
 80002ac:	6039      	str	r1, [r7, #0]
 80002ae:	71fb      	strb	r3, [r7, #7]
 80002b0:	4613      	mov	r3, r2
 80002b2:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Master_Receive(&hi2c1, dev, buff, len, 1000);
 80002b4:	79fb      	ldrb	r3, [r7, #7]
 80002b6:	b299      	uxth	r1, r3
 80002b8:	79bb      	ldrb	r3, [r7, #6]
 80002ba:	b29b      	uxth	r3, r3
 80002bc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80002c0:	9200      	str	r2, [sp, #0]
 80002c2:	683a      	ldr	r2, [r7, #0]
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <VL6180x_I2CRead+0x30>)
 80002c6:	f003 f85b 	bl	8003380 <HAL_I2C_Master_Receive>
	return 0;
 80002ca:	2300      	movs	r3, #0
}
 80002cc:	4618      	mov	r0, r3
 80002ce:	3708      	adds	r7, #8
 80002d0:	46bd      	mov	sp, r7
 80002d2:	bd80      	pop	{r7, pc}
 80002d4:	2000015c 	.word	0x2000015c

080002d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	b08e      	sub	sp, #56	; 0x38
 80002dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	setbuf(stdout, NULL);
 80002de:	4b3c      	ldr	r3, [pc, #240]	; (80003d0 <main+0xf8>)
 80002e0:	681b      	ldr	r3, [r3, #0]
 80002e2:	689b      	ldr	r3, [r3, #8]
 80002e4:	2100      	movs	r1, #0
 80002e6:	4618      	mov	r0, r3
 80002e8:	f005 fce8 	bl	8005cbc <setbuf>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002ec:	f002 fbb0 	bl	8002a50 <HAL_Init>

  /* USER CODE BEGIN Init */
   MX_GPIO_Init();
 80002f0:	f000 f944 	bl	800057c <MX_GPIO_Init>
   MX_USART2_UART_Init();
 80002f4:	f000 f912 	bl	800051c <MX_USART2_UART_Init>
   MX_I2C1_Init();
 80002f8:	f000 f8d0 	bl	800049c <MX_I2C1_Init>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002fc:	f000 f87c 	bl	80003f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000300:	f000 f93c 	bl	800057c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000304:	f000 f90a 	bl	800051c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000308:	f000 f8c8 	bl	800049c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  int i;
  for (i = 1; i <= 5; i++){//シリアルモニタ接続待機5秒
 800030c:	2301      	movs	r3, #1
 800030e:	637b      	str	r3, [r7, #52]	; 0x34
 8000310:	e00d      	b.n	800032e <main+0x56>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
 8000312:	2108      	movs	r1, #8
 8000314:	482f      	ldr	r0, [pc, #188]	; (80003d4 <main+0xfc>)
 8000316:	f002 fe95 	bl	8003044 <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);
 800031a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800031e:	f002 fbfd 	bl	8002b1c <HAL_Delay>
	  printf("Waiting ...\r\n");
 8000322:	482d      	ldr	r0, [pc, #180]	; (80003d8 <main+0x100>)
 8000324:	f005 fcc2 	bl	8005cac <puts>
  for (i = 1; i <= 5; i++){//シリアルモニタ接続待機5秒
 8000328:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800032a:	3301      	adds	r3, #1
 800032c:	637b      	str	r3, [r7, #52]	; 0x34
 800032e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000330:	2b05      	cmp	r3, #5
 8000332:	ddee      	ble.n	8000312 <main+0x3a>
  }
  printf("Setting up ...\r\n");
 8000334:	4829      	ldr	r0, [pc, #164]	; (80003dc <main+0x104>)
 8000336:	f005 fcb9 	bl	8005cac <puts>

  VL6180xDev_t myDev = 0x52;
 800033a:	2352      	movs	r3, #82	; 0x52
 800033c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  VL6180x_RangeData_t Range;

  VL6180x_InitData(myDev);
 8000340:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000344:	4618      	mov	r0, r3
 8000346:	f000 faed 	bl	8000924 <VL6180x_InitData>
  int j = VL6180x_InitData(myDev);
 800034a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800034e:	4618      	mov	r0, r3
 8000350:	f000 fae8 	bl	8000924 <VL6180x_InitData>
 8000354:	62f8      	str	r0, [r7, #44]	; 0x2c
  printf("VL6180x_InitData status : %d.\r\n", j);
 8000356:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8000358:	4821      	ldr	r0, [pc, #132]	; (80003e0 <main+0x108>)
 800035a:	f005 fc21 	bl	8005ba0 <iprintf>
  VL6180x_Prepare(myDev);
 800035e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000362:	4618      	mov	r0, r3
 8000364:	f000 fbb4 	bl	8000ad0 <VL6180x_Prepare>
  int k = VL6180x_Prepare(myDev);
 8000368:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800036c:	4618      	mov	r0, r3
 800036e:	f000 fbaf 	bl	8000ad0 <VL6180x_Prepare>
 8000372:	62b8      	str	r0, [r7, #40]	; 0x28
  printf("VL6180x_Prepare status : %d.\r\n", k);
 8000374:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000376:	481b      	ldr	r0, [pc, #108]	; (80003e4 <main+0x10c>)
 8000378:	f005 fc12 	bl	8005ba0 <iprintf>
  printf("Finished.\r\n");
 800037c:	481a      	ldr	r0, [pc, #104]	; (80003e8 <main+0x110>)
 800037e:	f005 fc95 	bl	8005cac <puts>
  /* USER CODE BEGIN WHILE */
  while (1){
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
 8000382:	2108      	movs	r1, #8
 8000384:	4813      	ldr	r0, [pc, #76]	; (80003d4 <main+0xfc>)
 8000386:	f002 fe5d 	bl	8003044 <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 800038a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800038e:	f002 fbc5 	bl	8002b1c <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
 8000392:	2108      	movs	r1, #8
 8000394:	480f      	ldr	r0, [pc, #60]	; (80003d4 <main+0xfc>)
 8000396:	f002 fe55 	bl	8003044 <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 800039a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800039e:	f002 fbbd 	bl	8002b1c <HAL_Delay>
	  printf("Polling -> ");
 80003a2:	4812      	ldr	r0, [pc, #72]	; (80003ec <main+0x114>)
 80003a4:	f005 fbfc 	bl	8005ba0 <iprintf>
	  VL6180x_RangePollMeasurement(myDev, &Range);
 80003a8:	463a      	mov	r2, r7
 80003aa:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80003ae:	4611      	mov	r1, r2
 80003b0:	4618      	mov	r0, r3
 80003b2:	f000 fcb9 	bl	8000d28 <VL6180x_RangePollMeasurement>
	  if (Range.errorStatus == 0 ){
 80003b6:	68bb      	ldr	r3, [r7, #8]
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	d105      	bne.n	80003c8 <main+0xf0>
		  printf("%d mm\r\n", Range.range_mm); // your code display range in mm
 80003bc:	683b      	ldr	r3, [r7, #0]
 80003be:	4619      	mov	r1, r3
 80003c0:	480b      	ldr	r0, [pc, #44]	; (80003f0 <main+0x118>)
 80003c2:	f005 fbed 	bl	8005ba0 <iprintf>
 80003c6:	e7dc      	b.n	8000382 <main+0xaa>
	  }else{
		  printf("Failed to get distance\r\n"); // your code display error code
 80003c8:	480a      	ldr	r0, [pc, #40]	; (80003f4 <main+0x11c>)
 80003ca:	f005 fc6f 	bl	8005cac <puts>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
 80003ce:	e7d8      	b.n	8000382 <main+0xaa>
 80003d0:	200000dc 	.word	0x200000dc
 80003d4:	48000400 	.word	0x48000400
 80003d8:	08006d6c 	.word	0x08006d6c
 80003dc:	08006d7c 	.word	0x08006d7c
 80003e0:	08006d8c 	.word	0x08006d8c
 80003e4:	08006dac 	.word	0x08006dac
 80003e8:	08006dcc 	.word	0x08006dcc
 80003ec:	08006dd8 	.word	0x08006dd8
 80003f0:	08006de4 	.word	0x08006de4
 80003f4:	08006dec 	.word	0x08006dec

080003f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003f8:	b580      	push	{r7, lr}
 80003fa:	b096      	sub	sp, #88	; 0x58
 80003fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003fe:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000402:	2228      	movs	r2, #40	; 0x28
 8000404:	2100      	movs	r1, #0
 8000406:	4618      	mov	r0, r3
 8000408:	f005 fbc2 	bl	8005b90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800040c:	f107 031c 	add.w	r3, r7, #28
 8000410:	2200      	movs	r2, #0
 8000412:	601a      	str	r2, [r3, #0]
 8000414:	605a      	str	r2, [r3, #4]
 8000416:	609a      	str	r2, [r3, #8]
 8000418:	60da      	str	r2, [r3, #12]
 800041a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800041c:	1d3b      	adds	r3, r7, #4
 800041e:	2200      	movs	r2, #0
 8000420:	601a      	str	r2, [r3, #0]
 8000422:	605a      	str	r2, [r3, #4]
 8000424:	609a      	str	r2, [r3, #8]
 8000426:	60da      	str	r2, [r3, #12]
 8000428:	611a      	str	r2, [r3, #16]
 800042a:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800042c:	2302      	movs	r3, #2
 800042e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000430:	2301      	movs	r3, #1
 8000432:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000434:	2310      	movs	r3, #16
 8000436:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000438:	2300      	movs	r3, #0
 800043a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800043c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000440:	4618      	mov	r0, r3
 8000442:	f003 fbbd 	bl	8003bc0 <HAL_RCC_OscConfig>
 8000446:	4603      	mov	r3, r0
 8000448:	2b00      	cmp	r3, #0
 800044a:	d001      	beq.n	8000450 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800044c:	f000 f8f4 	bl	8000638 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000450:	230f      	movs	r3, #15
 8000452:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000454:	2300      	movs	r3, #0
 8000456:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000458:	2300      	movs	r3, #0
 800045a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800045c:	2300      	movs	r3, #0
 800045e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000460:	2300      	movs	r3, #0
 8000462:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000464:	f107 031c 	add.w	r3, r7, #28
 8000468:	2100      	movs	r1, #0
 800046a:	4618      	mov	r0, r3
 800046c:	f004 fbe6 	bl	8004c3c <HAL_RCC_ClockConfig>
 8000470:	4603      	mov	r3, r0
 8000472:	2b00      	cmp	r3, #0
 8000474:	d001      	beq.n	800047a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000476:	f000 f8df 	bl	8000638 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800047a:	2320      	movs	r3, #32
 800047c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 800047e:	2300      	movs	r3, #0
 8000480:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000482:	1d3b      	adds	r3, r7, #4
 8000484:	4618      	mov	r0, r3
 8000486:	f004 fe0f 	bl	80050a8 <HAL_RCCEx_PeriphCLKConfig>
 800048a:	4603      	mov	r3, r0
 800048c:	2b00      	cmp	r3, #0
 800048e:	d001      	beq.n	8000494 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000490:	f000 f8d2 	bl	8000638 <Error_Handler>
  }
}
 8000494:	bf00      	nop
 8000496:	3758      	adds	r7, #88	; 0x58
 8000498:	46bd      	mov	sp, r7
 800049a:	bd80      	pop	{r7, pc}

0800049c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800049c:	b580      	push	{r7, lr}
 800049e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80004a0:	4b1b      	ldr	r3, [pc, #108]	; (8000510 <MX_I2C1_Init+0x74>)
 80004a2:	4a1c      	ldr	r2, [pc, #112]	; (8000514 <MX_I2C1_Init+0x78>)
 80004a4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 80004a6:	4b1a      	ldr	r3, [pc, #104]	; (8000510 <MX_I2C1_Init+0x74>)
 80004a8:	4a1b      	ldr	r2, [pc, #108]	; (8000518 <MX_I2C1_Init+0x7c>)
 80004aa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80004ac:	4b18      	ldr	r3, [pc, #96]	; (8000510 <MX_I2C1_Init+0x74>)
 80004ae:	2200      	movs	r2, #0
 80004b0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80004b2:	4b17      	ldr	r3, [pc, #92]	; (8000510 <MX_I2C1_Init+0x74>)
 80004b4:	2201      	movs	r2, #1
 80004b6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80004b8:	4b15      	ldr	r3, [pc, #84]	; (8000510 <MX_I2C1_Init+0x74>)
 80004ba:	2200      	movs	r2, #0
 80004bc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80004be:	4b14      	ldr	r3, [pc, #80]	; (8000510 <MX_I2C1_Init+0x74>)
 80004c0:	2200      	movs	r2, #0
 80004c2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80004c4:	4b12      	ldr	r3, [pc, #72]	; (8000510 <MX_I2C1_Init+0x74>)
 80004c6:	2200      	movs	r2, #0
 80004c8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80004ca:	4b11      	ldr	r3, [pc, #68]	; (8000510 <MX_I2C1_Init+0x74>)
 80004cc:	2200      	movs	r2, #0
 80004ce:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80004d0:	4b0f      	ldr	r3, [pc, #60]	; (8000510 <MX_I2C1_Init+0x74>)
 80004d2:	2200      	movs	r2, #0
 80004d4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80004d6:	480e      	ldr	r0, [pc, #56]	; (8000510 <MX_I2C1_Init+0x74>)
 80004d8:	f002 fdce 	bl	8003078 <HAL_I2C_Init>
 80004dc:	4603      	mov	r3, r0
 80004de:	2b00      	cmp	r3, #0
 80004e0:	d001      	beq.n	80004e6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80004e2:	f000 f8a9 	bl	8000638 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80004e6:	2100      	movs	r1, #0
 80004e8:	4809      	ldr	r0, [pc, #36]	; (8000510 <MX_I2C1_Init+0x74>)
 80004ea:	f003 fad1 	bl	8003a90 <HAL_I2CEx_ConfigAnalogFilter>
 80004ee:	4603      	mov	r3, r0
 80004f0:	2b00      	cmp	r3, #0
 80004f2:	d001      	beq.n	80004f8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80004f4:	f000 f8a0 	bl	8000638 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80004f8:	2100      	movs	r1, #0
 80004fa:	4805      	ldr	r0, [pc, #20]	; (8000510 <MX_I2C1_Init+0x74>)
 80004fc:	f003 fb13 	bl	8003b26 <HAL_I2CEx_ConfigDigitalFilter>
 8000500:	4603      	mov	r3, r0
 8000502:	2b00      	cmp	r3, #0
 8000504:	d001      	beq.n	800050a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000506:	f000 f897 	bl	8000638 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800050a:	bf00      	nop
 800050c:	bd80      	pop	{r7, pc}
 800050e:	bf00      	nop
 8000510:	2000015c 	.word	0x2000015c
 8000514:	40005400 	.word	0x40005400
 8000518:	2000090e 	.word	0x2000090e

0800051c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000520:	4b14      	ldr	r3, [pc, #80]	; (8000574 <MX_USART2_UART_Init+0x58>)
 8000522:	4a15      	ldr	r2, [pc, #84]	; (8000578 <MX_USART2_UART_Init+0x5c>)
 8000524:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000526:	4b13      	ldr	r3, [pc, #76]	; (8000574 <MX_USART2_UART_Init+0x58>)
 8000528:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800052c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800052e:	4b11      	ldr	r3, [pc, #68]	; (8000574 <MX_USART2_UART_Init+0x58>)
 8000530:	2200      	movs	r2, #0
 8000532:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000534:	4b0f      	ldr	r3, [pc, #60]	; (8000574 <MX_USART2_UART_Init+0x58>)
 8000536:	2200      	movs	r2, #0
 8000538:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800053a:	4b0e      	ldr	r3, [pc, #56]	; (8000574 <MX_USART2_UART_Init+0x58>)
 800053c:	2200      	movs	r2, #0
 800053e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000540:	4b0c      	ldr	r3, [pc, #48]	; (8000574 <MX_USART2_UART_Init+0x58>)
 8000542:	220c      	movs	r2, #12
 8000544:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000546:	4b0b      	ldr	r3, [pc, #44]	; (8000574 <MX_USART2_UART_Init+0x58>)
 8000548:	2200      	movs	r2, #0
 800054a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800054c:	4b09      	ldr	r3, [pc, #36]	; (8000574 <MX_USART2_UART_Init+0x58>)
 800054e:	2200      	movs	r2, #0
 8000550:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000552:	4b08      	ldr	r3, [pc, #32]	; (8000574 <MX_USART2_UART_Init+0x58>)
 8000554:	2200      	movs	r2, #0
 8000556:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000558:	4b06      	ldr	r3, [pc, #24]	; (8000574 <MX_USART2_UART_Init+0x58>)
 800055a:	2200      	movs	r2, #0
 800055c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800055e:	4805      	ldr	r0, [pc, #20]	; (8000574 <MX_USART2_UART_Init+0x58>)
 8000560:	f004 fec8 	bl	80052f4 <HAL_UART_Init>
 8000564:	4603      	mov	r3, r0
 8000566:	2b00      	cmp	r3, #0
 8000568:	d001      	beq.n	800056e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800056a:	f000 f865 	bl	8000638 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800056e:	bf00      	nop
 8000570:	bd80      	pop	{r7, pc}
 8000572:	bf00      	nop
 8000574:	200001b0 	.word	0x200001b0
 8000578:	40004400 	.word	0x40004400

0800057c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b088      	sub	sp, #32
 8000580:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000582:	f107 030c 	add.w	r3, r7, #12
 8000586:	2200      	movs	r2, #0
 8000588:	601a      	str	r2, [r3, #0]
 800058a:	605a      	str	r2, [r3, #4]
 800058c:	609a      	str	r2, [r3, #8]
 800058e:	60da      	str	r2, [r3, #12]
 8000590:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000592:	4b1d      	ldr	r3, [pc, #116]	; (8000608 <MX_GPIO_Init+0x8c>)
 8000594:	695b      	ldr	r3, [r3, #20]
 8000596:	4a1c      	ldr	r2, [pc, #112]	; (8000608 <MX_GPIO_Init+0x8c>)
 8000598:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800059c:	6153      	str	r3, [r2, #20]
 800059e:	4b1a      	ldr	r3, [pc, #104]	; (8000608 <MX_GPIO_Init+0x8c>)
 80005a0:	695b      	ldr	r3, [r3, #20]
 80005a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80005a6:	60bb      	str	r3, [r7, #8]
 80005a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005aa:	4b17      	ldr	r3, [pc, #92]	; (8000608 <MX_GPIO_Init+0x8c>)
 80005ac:	695b      	ldr	r3, [r3, #20]
 80005ae:	4a16      	ldr	r2, [pc, #88]	; (8000608 <MX_GPIO_Init+0x8c>)
 80005b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005b4:	6153      	str	r3, [r2, #20]
 80005b6:	4b14      	ldr	r3, [pc, #80]	; (8000608 <MX_GPIO_Init+0x8c>)
 80005b8:	695b      	ldr	r3, [r3, #20]
 80005ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80005be:	607b      	str	r3, [r7, #4]
 80005c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005c2:	4b11      	ldr	r3, [pc, #68]	; (8000608 <MX_GPIO_Init+0x8c>)
 80005c4:	695b      	ldr	r3, [r3, #20]
 80005c6:	4a10      	ldr	r2, [pc, #64]	; (8000608 <MX_GPIO_Init+0x8c>)
 80005c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80005cc:	6153      	str	r3, [r2, #20]
 80005ce:	4b0e      	ldr	r3, [pc, #56]	; (8000608 <MX_GPIO_Init+0x8c>)
 80005d0:	695b      	ldr	r3, [r3, #20]
 80005d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80005d6:	603b      	str	r3, [r7, #0]
 80005d8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 80005da:	2200      	movs	r2, #0
 80005dc:	2108      	movs	r1, #8
 80005de:	480b      	ldr	r0, [pc, #44]	; (800060c <MX_GPIO_Init+0x90>)
 80005e0:	f002 fd18 	bl	8003014 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80005e4:	2308      	movs	r3, #8
 80005e6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005e8:	2301      	movs	r3, #1
 80005ea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ec:	2300      	movs	r3, #0
 80005ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005f0:	2300      	movs	r3, #0
 80005f2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005f4:	f107 030c 	add.w	r3, r7, #12
 80005f8:	4619      	mov	r1, r3
 80005fa:	4804      	ldr	r0, [pc, #16]	; (800060c <MX_GPIO_Init+0x90>)
 80005fc:	f002 fb98 	bl	8002d30 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000600:	bf00      	nop
 8000602:	3720      	adds	r7, #32
 8000604:	46bd      	mov	sp, r7
 8000606:	bd80      	pop	{r7, pc}
 8000608:	40021000 	.word	0x40021000
 800060c:	48000400 	.word	0x48000400

08000610 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b084      	sub	sp, #16
 8000614:	af00      	add	r7, sp, #0
 8000616:	60f8      	str	r0, [r7, #12]
 8000618:	60b9      	str	r1, [r7, #8]
 800061a:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart2,(uint8_t *)ptr,len,10);
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	b29a      	uxth	r2, r3
 8000620:	230a      	movs	r3, #10
 8000622:	68b9      	ldr	r1, [r7, #8]
 8000624:	4803      	ldr	r0, [pc, #12]	; (8000634 <_write+0x24>)
 8000626:	f004 feb3 	bl	8005390 <HAL_UART_Transmit>
  return len;
 800062a:	687b      	ldr	r3, [r7, #4]
}
 800062c:	4618      	mov	r0, r3
 800062e:	3710      	adds	r7, #16
 8000630:	46bd      	mov	sp, r7
 8000632:	bd80      	pop	{r7, pc}
 8000634:	200001b0 	.word	0x200001b0

08000638 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000638:	b480      	push	{r7}
 800063a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800063c:	b672      	cpsid	i
}
 800063e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000640:	e7fe      	b.n	8000640 <Error_Handler+0x8>
	...

08000644 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000644:	b480      	push	{r7}
 8000646:	b083      	sub	sp, #12
 8000648:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800064a:	4b0f      	ldr	r3, [pc, #60]	; (8000688 <HAL_MspInit+0x44>)
 800064c:	699b      	ldr	r3, [r3, #24]
 800064e:	4a0e      	ldr	r2, [pc, #56]	; (8000688 <HAL_MspInit+0x44>)
 8000650:	f043 0301 	orr.w	r3, r3, #1
 8000654:	6193      	str	r3, [r2, #24]
 8000656:	4b0c      	ldr	r3, [pc, #48]	; (8000688 <HAL_MspInit+0x44>)
 8000658:	699b      	ldr	r3, [r3, #24]
 800065a:	f003 0301 	and.w	r3, r3, #1
 800065e:	607b      	str	r3, [r7, #4]
 8000660:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000662:	4b09      	ldr	r3, [pc, #36]	; (8000688 <HAL_MspInit+0x44>)
 8000664:	69db      	ldr	r3, [r3, #28]
 8000666:	4a08      	ldr	r2, [pc, #32]	; (8000688 <HAL_MspInit+0x44>)
 8000668:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800066c:	61d3      	str	r3, [r2, #28]
 800066e:	4b06      	ldr	r3, [pc, #24]	; (8000688 <HAL_MspInit+0x44>)
 8000670:	69db      	ldr	r3, [r3, #28]
 8000672:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000676:	603b      	str	r3, [r7, #0]
 8000678:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800067a:	bf00      	nop
 800067c:	370c      	adds	r7, #12
 800067e:	46bd      	mov	sp, r7
 8000680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000684:	4770      	bx	lr
 8000686:	bf00      	nop
 8000688:	40021000 	.word	0x40021000

0800068c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b08a      	sub	sp, #40	; 0x28
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000694:	f107 0314 	add.w	r3, r7, #20
 8000698:	2200      	movs	r2, #0
 800069a:	601a      	str	r2, [r3, #0]
 800069c:	605a      	str	r2, [r3, #4]
 800069e:	609a      	str	r2, [r3, #8]
 80006a0:	60da      	str	r2, [r3, #12]
 80006a2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	4a17      	ldr	r2, [pc, #92]	; (8000708 <HAL_I2C_MspInit+0x7c>)
 80006aa:	4293      	cmp	r3, r2
 80006ac:	d127      	bne.n	80006fe <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006ae:	4b17      	ldr	r3, [pc, #92]	; (800070c <HAL_I2C_MspInit+0x80>)
 80006b0:	695b      	ldr	r3, [r3, #20]
 80006b2:	4a16      	ldr	r2, [pc, #88]	; (800070c <HAL_I2C_MspInit+0x80>)
 80006b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80006b8:	6153      	str	r3, [r2, #20]
 80006ba:	4b14      	ldr	r3, [pc, #80]	; (800070c <HAL_I2C_MspInit+0x80>)
 80006bc:	695b      	ldr	r3, [r3, #20]
 80006be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80006c2:	613b      	str	r3, [r7, #16]
 80006c4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80006c6:	23c0      	movs	r3, #192	; 0xc0
 80006c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80006ca:	2312      	movs	r3, #18
 80006cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ce:	2300      	movs	r3, #0
 80006d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006d2:	2303      	movs	r3, #3
 80006d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80006d6:	2304      	movs	r3, #4
 80006d8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006da:	f107 0314 	add.w	r3, r7, #20
 80006de:	4619      	mov	r1, r3
 80006e0:	480b      	ldr	r0, [pc, #44]	; (8000710 <HAL_I2C_MspInit+0x84>)
 80006e2:	f002 fb25 	bl	8002d30 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80006e6:	4b09      	ldr	r3, [pc, #36]	; (800070c <HAL_I2C_MspInit+0x80>)
 80006e8:	69db      	ldr	r3, [r3, #28]
 80006ea:	4a08      	ldr	r2, [pc, #32]	; (800070c <HAL_I2C_MspInit+0x80>)
 80006ec:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80006f0:	61d3      	str	r3, [r2, #28]
 80006f2:	4b06      	ldr	r3, [pc, #24]	; (800070c <HAL_I2C_MspInit+0x80>)
 80006f4:	69db      	ldr	r3, [r3, #28]
 80006f6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80006fa:	60fb      	str	r3, [r7, #12]
 80006fc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80006fe:	bf00      	nop
 8000700:	3728      	adds	r7, #40	; 0x28
 8000702:	46bd      	mov	sp, r7
 8000704:	bd80      	pop	{r7, pc}
 8000706:	bf00      	nop
 8000708:	40005400 	.word	0x40005400
 800070c:	40021000 	.word	0x40021000
 8000710:	48000400 	.word	0x48000400

08000714 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b08a      	sub	sp, #40	; 0x28
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800071c:	f107 0314 	add.w	r3, r7, #20
 8000720:	2200      	movs	r2, #0
 8000722:	601a      	str	r2, [r3, #0]
 8000724:	605a      	str	r2, [r3, #4]
 8000726:	609a      	str	r2, [r3, #8]
 8000728:	60da      	str	r2, [r3, #12]
 800072a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	4a18      	ldr	r2, [pc, #96]	; (8000794 <HAL_UART_MspInit+0x80>)
 8000732:	4293      	cmp	r3, r2
 8000734:	d129      	bne.n	800078a <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000736:	4b18      	ldr	r3, [pc, #96]	; (8000798 <HAL_UART_MspInit+0x84>)
 8000738:	69db      	ldr	r3, [r3, #28]
 800073a:	4a17      	ldr	r2, [pc, #92]	; (8000798 <HAL_UART_MspInit+0x84>)
 800073c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000740:	61d3      	str	r3, [r2, #28]
 8000742:	4b15      	ldr	r3, [pc, #84]	; (8000798 <HAL_UART_MspInit+0x84>)
 8000744:	69db      	ldr	r3, [r3, #28]
 8000746:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800074a:	613b      	str	r3, [r7, #16]
 800074c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800074e:	4b12      	ldr	r3, [pc, #72]	; (8000798 <HAL_UART_MspInit+0x84>)
 8000750:	695b      	ldr	r3, [r3, #20]
 8000752:	4a11      	ldr	r2, [pc, #68]	; (8000798 <HAL_UART_MspInit+0x84>)
 8000754:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000758:	6153      	str	r3, [r2, #20]
 800075a:	4b0f      	ldr	r3, [pc, #60]	; (8000798 <HAL_UART_MspInit+0x84>)
 800075c:	695b      	ldr	r3, [r3, #20]
 800075e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000762:	60fb      	str	r3, [r7, #12]
 8000764:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8000766:	f248 0304 	movw	r3, #32772	; 0x8004
 800076a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800076c:	2302      	movs	r3, #2
 800076e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000770:	2300      	movs	r3, #0
 8000772:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000774:	2303      	movs	r3, #3
 8000776:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000778:	2307      	movs	r3, #7
 800077a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800077c:	f107 0314 	add.w	r3, r7, #20
 8000780:	4619      	mov	r1, r3
 8000782:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000786:	f002 fad3 	bl	8002d30 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800078a:	bf00      	nop
 800078c:	3728      	adds	r7, #40	; 0x28
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	40004400 	.word	0x40004400
 8000798:	40021000 	.word	0x40021000

0800079c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800079c:	b480      	push	{r7}
 800079e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007a0:	e7fe      	b.n	80007a0 <NMI_Handler+0x4>

080007a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007a2:	b480      	push	{r7}
 80007a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007a6:	e7fe      	b.n	80007a6 <HardFault_Handler+0x4>

080007a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007a8:	b480      	push	{r7}
 80007aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007ac:	e7fe      	b.n	80007ac <MemManage_Handler+0x4>

080007ae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007ae:	b480      	push	{r7}
 80007b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007b2:	e7fe      	b.n	80007b2 <BusFault_Handler+0x4>

080007b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007b4:	b480      	push	{r7}
 80007b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007b8:	e7fe      	b.n	80007b8 <UsageFault_Handler+0x4>

080007ba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007ba:	b480      	push	{r7}
 80007bc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007be:	bf00      	nop
 80007c0:	46bd      	mov	sp, r7
 80007c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c6:	4770      	bx	lr

080007c8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007c8:	b480      	push	{r7}
 80007ca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007cc:	bf00      	nop
 80007ce:	46bd      	mov	sp, r7
 80007d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d4:	4770      	bx	lr

080007d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007d6:	b480      	push	{r7}
 80007d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007da:	bf00      	nop
 80007dc:	46bd      	mov	sp, r7
 80007de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e2:	4770      	bx	lr

080007e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007e8:	f002 f978 	bl	8002adc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007ec:	bf00      	nop
 80007ee:	bd80      	pop	{r7, pc}

080007f0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b086      	sub	sp, #24
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	60f8      	str	r0, [r7, #12]
 80007f8:	60b9      	str	r1, [r7, #8]
 80007fa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007fc:	2300      	movs	r3, #0
 80007fe:	617b      	str	r3, [r7, #20]
 8000800:	e00a      	b.n	8000818 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000802:	f3af 8000 	nop.w
 8000806:	4601      	mov	r1, r0
 8000808:	68bb      	ldr	r3, [r7, #8]
 800080a:	1c5a      	adds	r2, r3, #1
 800080c:	60ba      	str	r2, [r7, #8]
 800080e:	b2ca      	uxtb	r2, r1
 8000810:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000812:	697b      	ldr	r3, [r7, #20]
 8000814:	3301      	adds	r3, #1
 8000816:	617b      	str	r3, [r7, #20]
 8000818:	697a      	ldr	r2, [r7, #20]
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	429a      	cmp	r2, r3
 800081e:	dbf0      	blt.n	8000802 <_read+0x12>
  }

  return len;
 8000820:	687b      	ldr	r3, [r7, #4]
}
 8000822:	4618      	mov	r0, r3
 8000824:	3718      	adds	r7, #24
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}

0800082a <_close>:
  }
  return len;
}

int _close(int file)
{
 800082a:	b480      	push	{r7}
 800082c:	b083      	sub	sp, #12
 800082e:	af00      	add	r7, sp, #0
 8000830:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000832:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000836:	4618      	mov	r0, r3
 8000838:	370c      	adds	r7, #12
 800083a:	46bd      	mov	sp, r7
 800083c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000840:	4770      	bx	lr

08000842 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000842:	b480      	push	{r7}
 8000844:	b083      	sub	sp, #12
 8000846:	af00      	add	r7, sp, #0
 8000848:	6078      	str	r0, [r7, #4]
 800084a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800084c:	683b      	ldr	r3, [r7, #0]
 800084e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000852:	605a      	str	r2, [r3, #4]
  return 0;
 8000854:	2300      	movs	r3, #0
}
 8000856:	4618      	mov	r0, r3
 8000858:	370c      	adds	r7, #12
 800085a:	46bd      	mov	sp, r7
 800085c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000860:	4770      	bx	lr

08000862 <_isatty>:

int _isatty(int file)
{
 8000862:	b480      	push	{r7}
 8000864:	b083      	sub	sp, #12
 8000866:	af00      	add	r7, sp, #0
 8000868:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800086a:	2301      	movs	r3, #1
}
 800086c:	4618      	mov	r0, r3
 800086e:	370c      	adds	r7, #12
 8000870:	46bd      	mov	sp, r7
 8000872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000876:	4770      	bx	lr

08000878 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000878:	b480      	push	{r7}
 800087a:	b085      	sub	sp, #20
 800087c:	af00      	add	r7, sp, #0
 800087e:	60f8      	str	r0, [r7, #12]
 8000880:	60b9      	str	r1, [r7, #8]
 8000882:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000884:	2300      	movs	r3, #0
}
 8000886:	4618      	mov	r0, r3
 8000888:	3714      	adds	r7, #20
 800088a:	46bd      	mov	sp, r7
 800088c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000890:	4770      	bx	lr
	...

08000894 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b086      	sub	sp, #24
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800089c:	4a14      	ldr	r2, [pc, #80]	; (80008f0 <_sbrk+0x5c>)
 800089e:	4b15      	ldr	r3, [pc, #84]	; (80008f4 <_sbrk+0x60>)
 80008a0:	1ad3      	subs	r3, r2, r3
 80008a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80008a4:	697b      	ldr	r3, [r7, #20]
 80008a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80008a8:	4b13      	ldr	r3, [pc, #76]	; (80008f8 <_sbrk+0x64>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d102      	bne.n	80008b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80008b0:	4b11      	ldr	r3, [pc, #68]	; (80008f8 <_sbrk+0x64>)
 80008b2:	4a12      	ldr	r2, [pc, #72]	; (80008fc <_sbrk+0x68>)
 80008b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80008b6:	4b10      	ldr	r3, [pc, #64]	; (80008f8 <_sbrk+0x64>)
 80008b8:	681a      	ldr	r2, [r3, #0]
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	4413      	add	r3, r2
 80008be:	693a      	ldr	r2, [r7, #16]
 80008c0:	429a      	cmp	r2, r3
 80008c2:	d207      	bcs.n	80008d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80008c4:	f005 f93a 	bl	8005b3c <__errno>
 80008c8:	4603      	mov	r3, r0
 80008ca:	220c      	movs	r2, #12
 80008cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80008ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80008d2:	e009      	b.n	80008e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80008d4:	4b08      	ldr	r3, [pc, #32]	; (80008f8 <_sbrk+0x64>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80008da:	4b07      	ldr	r3, [pc, #28]	; (80008f8 <_sbrk+0x64>)
 80008dc:	681a      	ldr	r2, [r3, #0]
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	4413      	add	r3, r2
 80008e2:	4a05      	ldr	r2, [pc, #20]	; (80008f8 <_sbrk+0x64>)
 80008e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80008e6:	68fb      	ldr	r3, [r7, #12]
}
 80008e8:	4618      	mov	r0, r3
 80008ea:	3718      	adds	r7, #24
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd80      	pop	{r7, pc}
 80008f0:	20003000 	.word	0x20003000
 80008f4:	00000400 	.word	0x00000400
 80008f8:	20000238 	.word	0x20000238
 80008fc:	20000250 	.word	0x20000250

08000900 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000900:	b480      	push	{r7}
 8000902:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000904:	4b06      	ldr	r3, [pc, #24]	; (8000920 <SystemInit+0x20>)
 8000906:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800090a:	4a05      	ldr	r2, [pc, #20]	; (8000920 <SystemInit+0x20>)
 800090c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000910:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000914:	bf00      	nop
 8000916:	46bd      	mov	sp, r7
 8000918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091c:	4770      	bx	lr
 800091e:	bf00      	nop
 8000920:	e000ed00 	.word	0xe000ed00

08000924 <VL6180x_InitData>:
	LOG_FUNCTION_END(status);
	return status;
}

int VL6180x_InitData(VL6180xDev_t dev)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b088      	sub	sp, #32
 8000928:	af00      	add	r7, sp, #0
 800092a:	4603      	mov	r3, r0
 800092c:	71fb      	strb	r3, [r7, #7]
	uint16_t u16;
	uint32_t XTalkCompRate_KCps;

	LOG_FUNCTION_START("");

	VL6180xDevDataSet(dev, EceFactorM, DEF_ECE_FACTOR_M);
 800092e:	4b42      	ldr	r3, [pc, #264]	; (8000a38 <VL6180x_InitData+0x114>)
 8000930:	2255      	movs	r2, #85	; 0x55
 8000932:	811a      	strh	r2, [r3, #8]
	VL6180xDevDataSet(dev, EceFactorD, DEF_ECE_FACTOR_D);
 8000934:	4b40      	ldr	r3, [pc, #256]	; (8000a38 <VL6180x_InitData+0x114>)
 8000936:	2264      	movs	r2, #100	; 0x64
 8000938:	815a      	strh	r2, [r3, #10]

	VL6180xDevDataSet(dev, RangeIgnore.Enabled, 0);
 800093a:	4b3f      	ldr	r3, [pc, #252]	; (8000a38 <VL6180x_InitData+0x114>)
 800093c:	2200      	movs	r2, #0
 800093e:	741a      	strb	r2, [r3, #16]

#ifdef VL6180x_HAVE_UPSCALE_DATA
	VL6180xDevDataSet(dev, UpscaleFactor,  DEF_UPSCALE);
 8000940:	4b3d      	ldr	r3, [pc, #244]	; (8000a38 <VL6180x_InitData+0x114>)
 8000942:	2201      	movs	r2, #1
 8000944:	761a      	strb	r2, [r3, #24]
#endif

#ifdef VL6180x_HAVE_ALS_DATA
	VL6180xDevDataSet(dev, IntegrationPeriod, DEF_INT_PEFRIOD);
 8000946:	4b3c      	ldr	r3, [pc, #240]	; (8000a38 <VL6180x_InitData+0x114>)
 8000948:	2264      	movs	r2, #100	; 0x64
 800094a:	825a      	strh	r2, [r3, #18]
	VL6180xDevDataSet(dev, AlsGainCode, DEF_ALS_GAIN);
 800094c:	4b3a      	ldr	r3, [pc, #232]	; (8000a38 <VL6180x_InitData+0x114>)
 800094e:	2201      	movs	r2, #1
 8000950:	829a      	strh	r2, [r3, #20]
	VL6180xDevDataSet(dev, AlsScaler, DEF_ALS_SCALER);
 8000952:	4b39      	ldr	r3, [pc, #228]	; (8000a38 <VL6180x_InitData+0x114>)
 8000954:	2201      	movs	r2, #1
 8000956:	82da      	strh	r2, [r3, #22]
#endif

#ifdef VL6180x_HAVE_WRAP_AROUND_DATA
	VL6180xDevDataSet(dev, WrapAroundFilterActive, (VL6180x_WRAP_AROUND_FILTER_SUPPORT > 0));
 8000958:	4b37      	ldr	r3, [pc, #220]	; (8000a38 <VL6180x_InitData+0x114>)
 800095a:	2201      	movs	r2, #1
 800095c:	765a      	strb	r2, [r3, #25]
	VL6180xDevDataSet(dev, DMaxEnable, DEF_DMAX_ENABLE);
 800095e:	4b36      	ldr	r3, [pc, #216]	; (8000a38 <VL6180x_InitData+0x114>)
 8000960:	2201      	movs	r2, #1
 8000962:	f883 20cc 	strb.w	r2, [r3, #204]	; 0xcc
#endif

	_DMax_OneTimeInit(dev);
 8000966:	79fb      	ldrb	r3, [r7, #7]
 8000968:	4618      	mov	r0, r3
 800096a:	f001 fd29 	bl	80023c0 <_DMax_OneTimeInit>
	do {

		/* backup offset initial value from nvm these must be done prior any over call that use offset */
		status = VL6180x_RdByte(dev, SYSRANGE_PART_TO_PART_RANGE_OFFSET, (uint8_t *)&offset);
 800096e:	f107 0213 	add.w	r2, r7, #19
 8000972:	79fb      	ldrb	r3, [r7, #7]
 8000974:	2124      	movs	r1, #36	; 0x24
 8000976:	4618      	mov	r0, r3
 8000978:	f001 ff61 	bl	800283e <VL6180x_RdByte>
 800097c:	61f8      	str	r0, [r7, #28]
		if (status) {
 800097e:	69fb      	ldr	r3, [r7, #28]
 8000980:	2b00      	cmp	r3, #0
 8000982:	d14b      	bne.n	8000a1c <VL6180x_InitData+0xf8>
			VL6180x_ErrLog("SYSRANGE_PART_TO_PART_RANGE_OFFSET rd fail");
			break;
		}
		VL6180xDevDataSet(dev, Part2PartOffsetNVM, offset);
 8000984:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8000988:	4b2b      	ldr	r3, [pc, #172]	; (8000a38 <VL6180x_InitData+0x114>)
 800098a:	f883 20cd 	strb.w	r2, [r3, #205]	; 0xcd

		status = VL6180x_RdDWord(dev, SYSRANGE_RANGE_IGNORE_THRESHOLD, &CalValue);
 800098e:	f107 020c 	add.w	r2, r7, #12
 8000992:	79fb      	ldrb	r3, [r7, #7]
 8000994:	2126      	movs	r1, #38	; 0x26
 8000996:	4618      	mov	r0, r3
 8000998:	f001 ffc0 	bl	800291c <VL6180x_RdDWord>
 800099c:	61f8      	str	r0, [r7, #28]
		if (status) {
 800099e:	69fb      	ldr	r3, [r7, #28]
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d13d      	bne.n	8000a20 <VL6180x_InitData+0xfc>
			VL6180x_ErrLog("Part2PartAmbNVM rd fail");
			break;
		}
		if ((CalValue&0xFFFF0000) == 0) {
 80009a4:	68fb      	ldr	r3, [r7, #12]
 80009a6:	0c1b      	lsrs	r3, r3, #16
 80009a8:	041b      	lsls	r3, r3, #16
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d101      	bne.n	80009b2 <VL6180x_InitData+0x8e>
			CalValue = 0x00CE03F8;
 80009ae:	4b23      	ldr	r3, [pc, #140]	; (8000a3c <VL6180x_InitData+0x118>)
 80009b0:	60fb      	str	r3, [r7, #12]
		}
		VL6180xDevDataSet(dev, Part2PartAmbNVM, CalValue);
 80009b2:	68fb      	ldr	r3, [r7, #12]
 80009b4:	4a20      	ldr	r2, [pc, #128]	; (8000a38 <VL6180x_InitData+0x114>)
 80009b6:	6013      	str	r3, [r2, #0]

		status = VL6180x_RdWord(dev, SYSRANGE_CROSSTALK_COMPENSATION_RATE , &u16);
 80009b8:	f107 020a 	add.w	r2, r7, #10
 80009bc:	79fb      	ldrb	r3, [r7, #7]
 80009be:	211e      	movs	r1, #30
 80009c0:	4618      	mov	r0, r3
 80009c2:	f001 ff6f 	bl	80028a4 <VL6180x_RdWord>
 80009c6:	61f8      	str	r0, [r7, #28]
		if (status) {
 80009c8:	69fb      	ldr	r3, [r7, #28]
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d12a      	bne.n	8000a24 <VL6180x_InitData+0x100>
			VL6180x_ErrLog("SYSRANGE_CROSSTALK_COMPENSATION_RATE rd fail ");
			break;
		}
		XTalkCompRate_KCps = Fix7_2_KCPs(u16);
 80009ce:	897b      	ldrh	r3, [r7, #10]
 80009d0:	461a      	mov	r2, r3
 80009d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009d6:	fb02 f303 	mul.w	r3, r2, r3
 80009da:	09db      	lsrs	r3, r3, #7
 80009dc:	61bb      	str	r3, [r7, #24]
		VL6180xDevDataSet(dev, XTalkCompRate_KCps, XTalkCompRate_KCps);
 80009de:	4a16      	ldr	r2, [pc, #88]	; (8000a38 <VL6180x_InitData+0x114>)
 80009e0:	69bb      	ldr	r3, [r7, #24]
 80009e2:	6053      	str	r3, [r2, #4]

		dmax_status = _DMax_InitData(dev);
 80009e4:	79fb      	ldrb	r3, [r7, #7]
 80009e6:	4618      	mov	r0, r3
 80009e8:	f001 fd4a 	bl	8002480 <_DMax_InitData>
 80009ec:	6178      	str	r0, [r7, #20]
		if (dmax_status < 0) {
 80009ee:	697b      	ldr	r3, [r7, #20]
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	db19      	blt.n	8000a28 <VL6180x_InitData+0x104>
			VL6180x_ErrLog("DMax init failure");
			break;
		}

		/* Read or wait for fresh out of reset  */
		status = VL6180x_RdByte(dev, SYSTEM_FRESH_OUT_OF_RESET, &FreshOutReset);
 80009f4:	f107 0212 	add.w	r2, r7, #18
 80009f8:	79fb      	ldrb	r3, [r7, #7]
 80009fa:	2116      	movs	r1, #22
 80009fc:	4618      	mov	r0, r3
 80009fe:	f001 ff1e 	bl	800283e <VL6180x_RdByte>
 8000a02:	61f8      	str	r0, [r7, #28]
		if (status) {
 8000a04:	69fb      	ldr	r3, [r7, #28]
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d110      	bne.n	8000a2c <VL6180x_InitData+0x108>
			VL6180x_ErrLog("SYSTEM_FRESH_OUT_OF_RESET rd fail");
			break;
		}
		if (FreshOutReset != 1 || dmax_status)
 8000a0a:	7cbb      	ldrb	r3, [r7, #18]
 8000a0c:	2b01      	cmp	r3, #1
 8000a0e:	d102      	bne.n	8000a16 <VL6180x_InitData+0xf2>
 8000a10:	697b      	ldr	r3, [r7, #20]
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d00b      	beq.n	8000a2e <VL6180x_InitData+0x10a>
			status = CALIBRATION_WARNING;
 8000a16:	2301      	movs	r3, #1
 8000a18:	61fb      	str	r3, [r7, #28]
 8000a1a:	e008      	b.n	8000a2e <VL6180x_InitData+0x10a>
			break;
 8000a1c:	bf00      	nop
 8000a1e:	e006      	b.n	8000a2e <VL6180x_InitData+0x10a>
			break;
 8000a20:	bf00      	nop
 8000a22:	e004      	b.n	8000a2e <VL6180x_InitData+0x10a>
			break;
 8000a24:	bf00      	nop
 8000a26:	e002      	b.n	8000a2e <VL6180x_InitData+0x10a>
			break;
 8000a28:	bf00      	nop
 8000a2a:	e000      	b.n	8000a2e <VL6180x_InitData+0x10a>
			break;
 8000a2c:	bf00      	nop

	} while (0);

	LOG_FUNCTION_END(status);
	return status;
 8000a2e:	69fb      	ldr	r3, [r7, #28]
}
 8000a30:	4618      	mov	r0, r3
 8000a32:	3720      	adds	r7, #32
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bd80      	pop	{r7, pc}
 8000a38:	20000004 	.word	0x20000004
 8000a3c:	00ce03f8 	.word	0x00ce03f8

08000a40 <VL6180x_StaticInit>:
}



int VL6180x_StaticInit(VL6180xDev_t dev)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b086      	sub	sp, #24
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	4603      	mov	r3, r0
 8000a48:	71fb      	strb	r3, [r7, #7]
	int status = 0, init_status;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	617b      	str	r3, [r7, #20]
	/* TODO doc When using configurable scaling but using 1x as start condition
	 * load tunning upscale  or not ??? */
	if (_GetUpscale(dev) == 1 && !(VL6180x_UPSCALE_SUPPORT < 0))
		init_status = VL6180x_RangeStaticInit(dev);
	else
		init_status = VL6180x_UpscaleStaticInit(dev);
 8000a4e:	79fb      	ldrb	r3, [r7, #7]
 8000a50:	4618      	mov	r0, r3
 8000a52:	f000 fd0d 	bl	8001470 <VL6180x_UpscaleStaticInit>
 8000a56:	6138      	str	r0, [r7, #16]

	if (init_status < 0) {
 8000a58:	693b      	ldr	r3, [r7, #16]
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	db2d      	blt.n	8000aba <VL6180x_StaticInit+0x7a>
	#if REFRESH_CACHED_DATA_AFTER_INIT
	#ifdef VL6180x_HAVE_ALS_DATA
	/* update cached value after tuning applied */
	do {
		uint8_t data;
		status =  VL6180x_RdByte(dev, FW_ALS_RESULT_SCALER, &data);
 8000a5e:	f107 020f 	add.w	r2, r7, #15
 8000a62:	79fb      	ldrb	r3, [r7, #7]
 8000a64:	f44f 7190 	mov.w	r1, #288	; 0x120
 8000a68:	4618      	mov	r0, r3
 8000a6a:	f001 fee8 	bl	800283e <VL6180x_RdByte>
 8000a6e:	6178      	str	r0, [r7, #20]
		if (status)
 8000a70:	697b      	ldr	r3, [r7, #20]
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d115      	bne.n	8000aa2 <VL6180x_StaticInit+0x62>
			break;
		VL6180xDevDataSet(dev, AlsScaler, data);
 8000a76:	7bfb      	ldrb	r3, [r7, #15]
 8000a78:	b29a      	uxth	r2, r3
 8000a7a:	4b14      	ldr	r3, [pc, #80]	; (8000acc <VL6180x_StaticInit+0x8c>)
 8000a7c:	82da      	strh	r2, [r3, #22]

		status =  VL6180x_RdByte(dev, SYSALS_ANALOGUE_GAIN, &data);
 8000a7e:	f107 020f 	add.w	r2, r7, #15
 8000a82:	79fb      	ldrb	r3, [r7, #7]
 8000a84:	213f      	movs	r1, #63	; 0x3f
 8000a86:	4618      	mov	r0, r3
 8000a88:	f001 fed9 	bl	800283e <VL6180x_RdByte>
 8000a8c:	6178      	str	r0, [r7, #20]
		if (status)
 8000a8e:	697b      	ldr	r3, [r7, #20]
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d108      	bne.n	8000aa6 <VL6180x_StaticInit+0x66>
			break;
		VL6180x_AlsSetAnalogueGain(dev, data);
 8000a94:	7bfa      	ldrb	r2, [r7, #15]
 8000a96:	79fb      	ldrb	r3, [r7, #7]
 8000a98:	4611      	mov	r1, r2
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	f000 f8c2 	bl	8000c24 <VL6180x_AlsSetAnalogueGain>
 8000aa0:	e002      	b.n	8000aa8 <VL6180x_StaticInit+0x68>
			break;
 8000aa2:	bf00      	nop
 8000aa4:	e000      	b.n	8000aa8 <VL6180x_StaticInit+0x68>
			break;
 8000aa6:	bf00      	nop
	#endif
	#endif /* REFRESH_CACHED_DATA_AFTER_INIT */
	if (status < 0) {
		VL6180x_ErrLog("StaticInit fail");
	}
	if (!status && init_status) {
 8000aa8:	697b      	ldr	r3, [r7, #20]
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d107      	bne.n	8000abe <VL6180x_StaticInit+0x7e>
 8000aae:	693b      	ldr	r3, [r7, #16]
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d004      	beq.n	8000abe <VL6180x_StaticInit+0x7e>
		status = init_status;
 8000ab4:	693b      	ldr	r3, [r7, #16]
 8000ab6:	617b      	str	r3, [r7, #20]
 8000ab8:	e002      	b.n	8000ac0 <VL6180x_StaticInit+0x80>
		goto error;
 8000aba:	bf00      	nop
 8000abc:	e000      	b.n	8000ac0 <VL6180x_StaticInit+0x80>
	}
error:
 8000abe:	bf00      	nop
	LOG_FUNCTION_END(status);
	return status;
 8000ac0:	697b      	ldr	r3, [r7, #20]
}
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	3718      	adds	r7, #24
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	20000004 	.word	0x20000004

08000ad0 <VL6180x_Prepare>:
	return status;

}

int VL6180x_Prepare(VL6180xDev_t dev)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b084      	sub	sp, #16
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	71fb      	strb	r3, [r7, #7]
	int status;
	LOG_FUNCTION_START("");

	do {
		status = VL6180x_StaticInit(dev);
 8000ada:	79fb      	ldrb	r3, [r7, #7]
 8000adc:	4618      	mov	r0, r3
 8000ade:	f7ff ffaf 	bl	8000a40 <VL6180x_StaticInit>
 8000ae2:	60f8      	str	r0, [r7, #12]
		if (status < 0)
 8000ae4:	68fb      	ldr	r3, [r7, #12]
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	db4b      	blt.n	8000b82 <VL6180x_Prepare+0xb2>
			break;

		/* set range InterruptMode to new sample */
		status = VL6180x_RangeConfigInterrupt(dev, CONFIG_GPIO_INTERRUPT_NEW_SAMPLE_READY);
 8000aea:	79fb      	ldrb	r3, [r7, #7]
 8000aec:	2104      	movs	r1, #4
 8000aee:	4618      	mov	r0, r3
 8000af0:	f000 fce2 	bl	80014b8 <VL6180x_RangeConfigInterrupt>
 8000af4:	60f8      	str	r0, [r7, #12]
		if (status)
 8000af6:	68fb      	ldr	r3, [r7, #12]
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d144      	bne.n	8000b86 <VL6180x_Prepare+0xb6>
			break;

		/* set default threshold */
		status = VL6180x_RangeSetRawThresholds(dev, 10, 200);
 8000afc:	79fb      	ldrb	r3, [r7, #7]
 8000afe:	22c8      	movs	r2, #200	; 0xc8
 8000b00:	210a      	movs	r1, #10
 8000b02:	4618      	mov	r0, r3
 8000b04:	f000 facc 	bl	80010a0 <VL6180x_RangeSetRawThresholds>
 8000b08:	60f8      	str	r0, [r7, #12]
		if (status) {
 8000b0a:	68fb      	ldr	r3, [r7, #12]
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d13c      	bne.n	8000b8a <VL6180x_Prepare+0xba>
			VL6180x_ErrLog("VL6180x_RangeSetRawThresholds fail");
			break;
		}
	#if VL6180x_ALS_SUPPORT
		status = VL6180x_AlsSetIntegrationPeriod(dev, 100);
 8000b10:	79fb      	ldrb	r3, [r7, #7]
 8000b12:	2164      	movs	r1, #100	; 0x64
 8000b14:	4618      	mov	r0, r3
 8000b16:	f000 f8d3 	bl	8000cc0 <VL6180x_AlsSetIntegrationPeriod>
 8000b1a:	60f8      	str	r0, [r7, #12]
		if (status)
 8000b1c:	68fb      	ldr	r3, [r7, #12]
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d135      	bne.n	8000b8e <VL6180x_Prepare+0xbe>
			break;
		status = VL6180x_AlsSetInterMeasurementPeriod(dev,  200);
 8000b22:	79fb      	ldrb	r3, [r7, #7]
 8000b24:	21c8      	movs	r1, #200	; 0xc8
 8000b26:	4618      	mov	r0, r3
 8000b28:	f000 f8a6 	bl	8000c78 <VL6180x_AlsSetInterMeasurementPeriod>
 8000b2c:	60f8      	str	r0, [r7, #12]
		if (status)
 8000b2e:	68fb      	ldr	r3, [r7, #12]
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d12e      	bne.n	8000b92 <VL6180x_Prepare+0xc2>
			break;
		status = VL6180x_AlsSetAnalogueGain(dev,  0);
 8000b34:	79fb      	ldrb	r3, [r7, #7]
 8000b36:	2100      	movs	r1, #0
 8000b38:	4618      	mov	r0, r3
 8000b3a:	f000 f873 	bl	8000c24 <VL6180x_AlsSetAnalogueGain>
 8000b3e:	60f8      	str	r0, [r7, #12]
		if (status)
 8000b40:	68fb      	ldr	r3, [r7, #12]
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d127      	bne.n	8000b96 <VL6180x_Prepare+0xc6>
			break;
		status = VL6180x_AlsSetThresholds(dev, 0, 0xFF);
 8000b46:	79fb      	ldrb	r3, [r7, #7]
 8000b48:	22ff      	movs	r2, #255	; 0xff
 8000b4a:	2100      	movs	r1, #0
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	f000 f849 	bl	8000be4 <VL6180x_AlsSetThresholds>
 8000b52:	60f8      	str	r0, [r7, #12]
		if (status)
 8000b54:	68fb      	ldr	r3, [r7, #12]
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d11f      	bne.n	8000b9a <VL6180x_Prepare+0xca>
			break;
		/* set Als InterruptMode to new sample */
		status = VL6180x_AlsConfigInterrupt(dev, CONFIG_GPIO_INTERRUPT_NEW_SAMPLE_READY);
 8000b5a:	79fb      	ldrb	r3, [r7, #7]
 8000b5c:	2104      	movs	r1, #4
 8000b5e:	4618      	mov	r0, r3
 8000b60:	f000 f823 	bl	8000baa <VL6180x_AlsConfigInterrupt>
 8000b64:	60f8      	str	r0, [r7, #12]
		if (status) {
 8000b66:	68fb      	ldr	r3, [r7, #12]
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d118      	bne.n	8000b9e <VL6180x_Prepare+0xce>
			VL6180x_ErrLog("VL6180x_AlsConfigInterrupt fail");
			break;
		}
	#endif
	#if VL6180x_WRAP_AROUND_FILTER_SUPPORT
		_filter_Init(dev);
 8000b6c:	79fb      	ldrb	r3, [r7, #7]
 8000b6e:	4618      	mov	r0, r3
 8000b70:	f000 fdc8 	bl	8001704 <_filter_Init>
	#endif
		/* make sure to reset any left previous condition that can hangs first poll */
		status = VL6180x_ClearAllInterrupt(dev);
 8000b74:	79fb      	ldrb	r3, [r7, #7]
 8000b76:	2107      	movs	r1, #7
 8000b78:	4618      	mov	r0, r3
 8000b7a:	f000 fac9 	bl	8001110 <VL6180x_ClearInterrupt>
 8000b7e:	60f8      	str	r0, [r7, #12]
 8000b80:	e00e      	b.n	8000ba0 <VL6180x_Prepare+0xd0>
			break;
 8000b82:	bf00      	nop
 8000b84:	e00c      	b.n	8000ba0 <VL6180x_Prepare+0xd0>
			break;
 8000b86:	bf00      	nop
 8000b88:	e00a      	b.n	8000ba0 <VL6180x_Prepare+0xd0>
			break;
 8000b8a:	bf00      	nop
 8000b8c:	e008      	b.n	8000ba0 <VL6180x_Prepare+0xd0>
			break;
 8000b8e:	bf00      	nop
 8000b90:	e006      	b.n	8000ba0 <VL6180x_Prepare+0xd0>
			break;
 8000b92:	bf00      	nop
 8000b94:	e004      	b.n	8000ba0 <VL6180x_Prepare+0xd0>
			break;
 8000b96:	bf00      	nop
 8000b98:	e002      	b.n	8000ba0 <VL6180x_Prepare+0xd0>
			break;
 8000b9a:	bf00      	nop
 8000b9c:	e000      	b.n	8000ba0 <VL6180x_Prepare+0xd0>
			break;
 8000b9e:	bf00      	nop
	} while (0);
	LOG_FUNCTION_END(status);

	return status;
 8000ba0:	68fb      	ldr	r3, [r7, #12]
}
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	3710      	adds	r7, #16
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}

08000baa <VL6180x_AlsConfigInterrupt>:
	LOG_FUNCTION_END(status);
	return status;
}

int VL6180x_AlsConfigInterrupt(VL6180xDev_t dev, uint8_t ConfigGpioInt)
{
 8000baa:	b580      	push	{r7, lr}
 8000bac:	b084      	sub	sp, #16
 8000bae:	af00      	add	r7, sp, #0
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	460a      	mov	r2, r1
 8000bb4:	71fb      	strb	r3, [r7, #7]
 8000bb6:	4613      	mov	r3, r2
 8000bb8:	71bb      	strb	r3, [r7, #6]
	int status;

	if (ConfigGpioInt <= CONFIG_GPIO_INTERRUPT_NEW_SAMPLE_READY) {
 8000bba:	79bb      	ldrb	r3, [r7, #6]
 8000bbc:	2b04      	cmp	r3, #4
 8000bbe:	d809      	bhi.n	8000bd4 <VL6180x_AlsConfigInterrupt+0x2a>
		status = VL6180x_UpdateByte(dev, SYSTEM_INTERRUPT_CONFIG_GPIO, (uint8_t)(~CONFIG_GPIO_ALS_MASK), (ConfigGpioInt << 3));
 8000bc0:	79bb      	ldrb	r3, [r7, #6]
 8000bc2:	00db      	lsls	r3, r3, #3
 8000bc4:	b2db      	uxtb	r3, r3
 8000bc6:	79f8      	ldrb	r0, [r7, #7]
 8000bc8:	22c7      	movs	r2, #199	; 0xc7
 8000bca:	2114      	movs	r1, #20
 8000bcc:	f001 fded 	bl	80027aa <VL6180x_UpdateByte>
 8000bd0:	60f8      	str	r0, [r7, #12]
 8000bd2:	e002      	b.n	8000bda <VL6180x_AlsConfigInterrupt+0x30>
	} else {
		VL6180x_ErrLog("Invalid config mode param %d", (int)ConfigGpioInt);
		status = INVALID_PARAMS;
 8000bd4:	f06f 0301 	mvn.w	r3, #1
 8000bd8:	60fb      	str	r3, [r7, #12]
	}
	LOG_FUNCTION_END(status);
	return status;
 8000bda:	68fb      	ldr	r3, [r7, #12]
}
 8000bdc:	4618      	mov	r0, r3
 8000bde:	3710      	adds	r7, #16
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}

08000be4 <VL6180x_AlsSetThresholds>:



int VL6180x_AlsSetThresholds(VL6180xDev_t dev, uint8_t low, uint8_t high)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b084      	sub	sp, #16
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	4603      	mov	r3, r0
 8000bec:	71fb      	strb	r3, [r7, #7]
 8000bee:	460b      	mov	r3, r1
 8000bf0:	71bb      	strb	r3, [r7, #6]
 8000bf2:	4613      	mov	r3, r2
 8000bf4:	717b      	strb	r3, [r7, #5]
	int status;

	LOG_FUNCTION_START("%d %d", (int)low, (int)high);

	status = VL6180x_WrByte(dev, SYSALS_THRESH_LOW, low);
 8000bf6:	79ba      	ldrb	r2, [r7, #6]
 8000bf8:	79fb      	ldrb	r3, [r7, #7]
 8000bfa:	213c      	movs	r1, #60	; 0x3c
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	f001 fd45 	bl	800268c <VL6180x_WrByte>
 8000c02:	60f8      	str	r0, [r7, #12]
	if (!status) {
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d106      	bne.n	8000c18 <VL6180x_AlsSetThresholds+0x34>
		status = VL6180x_WrByte(dev, SYSALS_THRESH_HIGH, high);
 8000c0a:	797a      	ldrb	r2, [r7, #5]
 8000c0c:	79fb      	ldrb	r3, [r7, #7]
 8000c0e:	213a      	movs	r1, #58	; 0x3a
 8000c10:	4618      	mov	r0, r3
 8000c12:	f001 fd3b 	bl	800268c <VL6180x_WrByte>
 8000c16:	60f8      	str	r0, [r7, #12]
	}

	LOG_FUNCTION_END(status) ;
	return status;
 8000c18:	68fb      	ldr	r3, [r7, #12]
}
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	3710      	adds	r7, #16
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}
	...

08000c24 <VL6180x_AlsSetAnalogueGain>:


int VL6180x_AlsSetAnalogueGain(VL6180xDev_t dev, uint8_t gain)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b084      	sub	sp, #16
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	460a      	mov	r2, r1
 8000c2e:	71fb      	strb	r3, [r7, #7]
 8000c30:	4613      	mov	r3, r2
 8000c32:	71bb      	strb	r3, [r7, #6]
	int status;
	uint8_t GainTotal;

	LOG_FUNCTION_START("%d", (int)gain);
	gain &= ~0x40;
 8000c34:	79bb      	ldrb	r3, [r7, #6]
 8000c36:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000c3a:	71bb      	strb	r3, [r7, #6]
	if (gain > 7) {
 8000c3c:	79bb      	ldrb	r3, [r7, #6]
 8000c3e:	2b07      	cmp	r3, #7
 8000c40:	d901      	bls.n	8000c46 <VL6180x_AlsSetAnalogueGain+0x22>
		gain = 7;
 8000c42:	2307      	movs	r3, #7
 8000c44:	71bb      	strb	r3, [r7, #6]
	}
	GainTotal = gain | 0x40;
 8000c46:	79bb      	ldrb	r3, [r7, #6]
 8000c48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c4c:	73fb      	strb	r3, [r7, #15]

	status = VL6180x_WrByte(dev, SYSALS_ANALOGUE_GAIN, GainTotal);
 8000c4e:	7bfa      	ldrb	r2, [r7, #15]
 8000c50:	79fb      	ldrb	r3, [r7, #7]
 8000c52:	213f      	movs	r1, #63	; 0x3f
 8000c54:	4618      	mov	r0, r3
 8000c56:	f001 fd19 	bl	800268c <VL6180x_WrByte>
 8000c5a:	60b8      	str	r0, [r7, #8]
	if (!status) {
 8000c5c:	68bb      	ldr	r3, [r7, #8]
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d103      	bne.n	8000c6a <VL6180x_AlsSetAnalogueGain+0x46>
		VL6180xDevDataSet(dev, AlsGainCode, gain);
 8000c62:	79bb      	ldrb	r3, [r7, #6]
 8000c64:	b29a      	uxth	r2, r3
 8000c66:	4b03      	ldr	r3, [pc, #12]	; (8000c74 <VL6180x_AlsSetAnalogueGain+0x50>)
 8000c68:	829a      	strh	r2, [r3, #20]
	}

	LOG_FUNCTION_END_FMT(status, "%d %d", (int)gain, (int)GainTotal);
	return status;
 8000c6a:	68bb      	ldr	r3, [r7, #8]
}
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	3710      	adds	r7, #16
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	20000004 	.word	0x20000004

08000c78 <VL6180x_AlsSetInterMeasurementPeriod>:

int VL6180x_AlsSetInterMeasurementPeriod(VL6180xDev_t dev,  uint16_t intermeasurement_period_ms)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b084      	sub	sp, #16
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	4603      	mov	r3, r0
 8000c80:	460a      	mov	r2, r1
 8000c82:	71fb      	strb	r3, [r7, #7]
 8000c84:	4613      	mov	r3, r2
 8000c86:	80bb      	strh	r3, [r7, #4]
	int status;

	LOG_FUNCTION_START("%d", (int)intermeasurement_period_ms);
	/* clipping: range is 0-2550ms */
	if (intermeasurement_period_ms >= 255 * 10)
 8000c88:	88bb      	ldrh	r3, [r7, #4]
 8000c8a:	f640 12f5 	movw	r2, #2549	; 0x9f5
 8000c8e:	4293      	cmp	r3, r2
 8000c90:	d902      	bls.n	8000c98 <VL6180x_AlsSetInterMeasurementPeriod+0x20>
		intermeasurement_period_ms = 255 * 10;
 8000c92:	f640 13f6 	movw	r3, #2550	; 0x9f6
 8000c96:	80bb      	strh	r3, [r7, #4]
	status = VL6180x_WrByte(dev, SYSALS_INTERMEASUREMENT_PERIOD, (uint8_t)(intermeasurement_period_ms / 10));
 8000c98:	88bb      	ldrh	r3, [r7, #4]
 8000c9a:	4a08      	ldr	r2, [pc, #32]	; (8000cbc <VL6180x_AlsSetInterMeasurementPeriod+0x44>)
 8000c9c:	fba2 2303 	umull	r2, r3, r2, r3
 8000ca0:	08db      	lsrs	r3, r3, #3
 8000ca2:	b29b      	uxth	r3, r3
 8000ca4:	b2da      	uxtb	r2, r3
 8000ca6:	79fb      	ldrb	r3, [r7, #7]
 8000ca8:	213e      	movs	r1, #62	; 0x3e
 8000caa:	4618      	mov	r0, r3
 8000cac:	f001 fcee 	bl	800268c <VL6180x_WrByte>
 8000cb0:	60f8      	str	r0, [r7, #12]

	LOG_FUNCTION_END_FMT(status, "%d", (int)intermeasurement_period_ms);
	return status;
 8000cb2:	68fb      	ldr	r3, [r7, #12]
}
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	3710      	adds	r7, #16
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}
 8000cbc:	cccccccd 	.word	0xcccccccd

08000cc0 <VL6180x_AlsSetIntegrationPeriod>:


int VL6180x_AlsSetIntegrationPeriod(VL6180xDev_t dev, uint16_t period_ms)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b084      	sub	sp, #16
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	460a      	mov	r2, r1
 8000cca:	71fb      	strb	r3, [r7, #7]
 8000ccc:	4613      	mov	r3, r2
 8000cce:	80bb      	strh	r3, [r7, #4]
	int status;
	uint16_t SetIntegrationPeriod;

	LOG_FUNCTION_START("%d", (int)period_ms);

	if (period_ms >= 1)
 8000cd0:	88bb      	ldrh	r3, [r7, #4]
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d003      	beq.n	8000cde <VL6180x_AlsSetIntegrationPeriod+0x1e>
		SetIntegrationPeriod = period_ms - 1;
 8000cd6:	88bb      	ldrh	r3, [r7, #4]
 8000cd8:	3b01      	subs	r3, #1
 8000cda:	81fb      	strh	r3, [r7, #14]
 8000cdc:	e001      	b.n	8000ce2 <VL6180x_AlsSetIntegrationPeriod+0x22>
	else
		SetIntegrationPeriod = period_ms;
 8000cde:	88bb      	ldrh	r3, [r7, #4]
 8000ce0:	81fb      	strh	r3, [r7, #14]

	if (SetIntegrationPeriod > 464) {
 8000ce2:	89fb      	ldrh	r3, [r7, #14]
 8000ce4:	f5b3 7fe8 	cmp.w	r3, #464	; 0x1d0
 8000ce8:	d903      	bls.n	8000cf2 <VL6180x_AlsSetIntegrationPeriod+0x32>
		SetIntegrationPeriod = 464;
 8000cea:	f44f 73e8 	mov.w	r3, #464	; 0x1d0
 8000cee:	81fb      	strh	r3, [r7, #14]
 8000cf0:	e005      	b.n	8000cfe <VL6180x_AlsSetIntegrationPeriod+0x3e>
	} else if (SetIntegrationPeriod == 255)   {
 8000cf2:	89fb      	ldrh	r3, [r7, #14]
 8000cf4:	2bff      	cmp	r3, #255	; 0xff
 8000cf6:	d102      	bne.n	8000cfe <VL6180x_AlsSetIntegrationPeriod+0x3e>
		SetIntegrationPeriod++; /* can't write 255 since this causes the device to lock out.*/
 8000cf8:	89fb      	ldrh	r3, [r7, #14]
 8000cfa:	3301      	adds	r3, #1
 8000cfc:	81fb      	strh	r3, [r7, #14]
	}

	status = VL6180x_WrWord(dev, SYSALS_INTEGRATION_PERIOD, SetIntegrationPeriod);
 8000cfe:	89fa      	ldrh	r2, [r7, #14]
 8000d00:	79fb      	ldrb	r3, [r7, #7]
 8000d02:	2140      	movs	r1, #64	; 0x40
 8000d04:	4618      	mov	r0, r3
 8000d06:	f001 fce8 	bl	80026da <VL6180x_WrWord>
 8000d0a:	60b8      	str	r0, [r7, #8]
	if (!status) {
 8000d0c:	68bb      	ldr	r3, [r7, #8]
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d102      	bne.n	8000d18 <VL6180x_AlsSetIntegrationPeriod+0x58>
		VL6180xDevDataSet(dev, IntegrationPeriod, SetIntegrationPeriod) ;
 8000d12:	4a04      	ldr	r2, [pc, #16]	; (8000d24 <VL6180x_AlsSetIntegrationPeriod+0x64>)
 8000d14:	89fb      	ldrh	r3, [r7, #14]
 8000d16:	8253      	strh	r3, [r2, #18]
	}
	LOG_FUNCTION_END_FMT(status, "%d", (int)SetIntegrationPeriod);
	return status;
 8000d18:	68bb      	ldr	r3, [r7, #8]
}
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	3710      	adds	r7, #16
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	20000004 	.word	0x20000004

08000d28 <VL6180x_RangePollMeasurement>:

#endif /* HAVE_ALS_SUPPORT */


int VL6180x_RangePollMeasurement(VL6180xDev_t dev, VL6180x_RangeData_t *pRangeData)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b086      	sub	sp, #24
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	4603      	mov	r3, r0
 8000d30:	6039      	str	r1, [r7, #0]
 8000d32:	71fb      	strb	r3, [r7, #7]
		VL6180x_ErrLog("VL6180x_RangeClearInterrupt fail");
		goto done;
	}
	#endif
	/* //![single_shot_snipet] */
	status = VL6180x_RangeSetSystemMode(dev, MODE_START_STOP | MODE_SINGLESHOT);
 8000d34:	79fb      	ldrb	r3, [r7, #7]
 8000d36:	2101      	movs	r1, #1
 8000d38:	4618      	mov	r0, r3
 8000d3a:	f000 fc1c 	bl	8001576 <VL6180x_RangeSetSystemMode>
 8000d3e:	6178      	str	r0, [r7, #20]
	if (status) {
 8000d40:	697b      	ldr	r3, [r7, #20]
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d130      	bne.n	8000da8 <VL6180x_RangePollMeasurement+0x80>
	}


	/* poll for new sample ready */
	while (1) {
		status = VL6180x_RangeGetInterruptStatus(dev, &IntStatus.val);
 8000d46:	f107 020c 	add.w	r2, r7, #12
 8000d4a:	79fb      	ldrb	r3, [r7, #7]
 8000d4c:	4611      	mov	r1, r2
 8000d4e:	4618      	mov	r0, r3
 8000d50:	f000 f9c5 	bl	80010de <VL6180x_RangeGetInterruptStatus>
 8000d54:	6178      	str	r0, [r7, #20]
		if (status) {
 8000d56:	697b      	ldr	r3, [r7, #20]
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d10c      	bne.n	8000d76 <VL6180x_RangePollMeasurement+0x4e>
			break;
		}
		if (IntStatus.status.Range == RES_INT_STAT_GPIO_NEW_SAMPLE_READY || IntStatus.status.Error != 0) {
 8000d5c:	7b3b      	ldrb	r3, [r7, #12]
 8000d5e:	f003 0307 	and.w	r3, r3, #7
 8000d62:	b2db      	uxtb	r3, r3
 8000d64:	2b04      	cmp	r3, #4
 8000d66:	d007      	beq.n	8000d78 <VL6180x_RangePollMeasurement+0x50>
 8000d68:	7b3b      	ldrb	r3, [r7, #12]
 8000d6a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000d6e:	b2db      	uxtb	r3, r3
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d101      	bne.n	8000d78 <VL6180x_RangePollMeasurement+0x50>
		status = VL6180x_RangeGetInterruptStatus(dev, &IntStatus.val);
 8000d74:	e7e7      	b.n	8000d46 <VL6180x_RangePollMeasurement+0x1e>
			break;
 8000d76:	bf00      	nop

		VL6180x_PollDelay(dev);
	}
	/* //![single_shot_snipet] */

	if (!status) {
 8000d78:	697b      	ldr	r3, [r7, #20]
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d105      	bne.n	8000d8a <VL6180x_RangePollMeasurement+0x62>
		status = VL6180x_RangeGetMeasurement(dev, pRangeData);
 8000d7e:	79fb      	ldrb	r3, [r7, #7]
 8000d80:	6839      	ldr	r1, [r7, #0]
 8000d82:	4618      	mov	r0, r3
 8000d84:	f000 f8f4 	bl	8000f70 <VL6180x_RangeGetMeasurement>
 8000d88:	6178      	str	r0, [r7, #20]
	}

	/*  clear range interrupt source */
	ClrStatus = VL6180x_RangeClearInterrupt(dev);
 8000d8a:	79fb      	ldrb	r3, [r7, #7]
 8000d8c:	2101      	movs	r1, #1
 8000d8e:	4618      	mov	r0, r3
 8000d90:	f000 f9be 	bl	8001110 <VL6180x_ClearInterrupt>
 8000d94:	6138      	str	r0, [r7, #16]
	if (ClrStatus) {
 8000d96:	693b      	ldr	r3, [r7, #16]
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d007      	beq.n	8000dac <VL6180x_RangePollMeasurement+0x84>
		VL6180x_ErrLog("VL6180x_RangeClearInterrupt fail");
		/*  leave initial status if already in error  */
		if (!status) {
 8000d9c:	697b      	ldr	r3, [r7, #20]
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d104      	bne.n	8000dac <VL6180x_RangePollMeasurement+0x84>
			status = ClrStatus;
 8000da2:	693b      	ldr	r3, [r7, #16]
 8000da4:	617b      	str	r3, [r7, #20]
 8000da6:	e002      	b.n	8000dae <VL6180x_RangePollMeasurement+0x86>
		goto done;
 8000da8:	bf00      	nop
 8000daa:	e000      	b.n	8000dae <VL6180x_RangePollMeasurement+0x86>
		}
	}
done:
 8000dac:	bf00      	nop
	LOG_FUNCTION_END(status);
	return status;
 8000dae:	697b      	ldr	r3, [r7, #20]
}
 8000db0:	4618      	mov	r0, r3
 8000db2:	3718      	adds	r7, #24
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bd80      	pop	{r7, pc}

08000db8 <VL6180x_GetCachedDWord>:


#if VL6180x_CACHED_REG

int VL6180x_GetCachedDWord(VL6180xDev_t dev, uint16_t  index, uint32_t *pValue)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b086      	sub	sp, #24
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	603a      	str	r2, [r7, #0]
 8000dc2:	71fb      	strb	r3, [r7, #7]
 8000dc4:	460b      	mov	r3, r1
 8000dc6:	80bb      	strh	r3, [r7, #4]
	int status;
	uint32_t Value;
	if (VL6180xDevDataGet(dev, CacheFilled) != 0 &&
 8000dc8:	4b1a      	ldr	r3, [pc, #104]	; (8000e34 <VL6180x_GetCachedDWord+0x7c>)
 8000dca:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d024      	beq.n	8000e1c <VL6180x_GetCachedDWord+0x64>
 8000dd2:	88bb      	ldrh	r3, [r7, #4]
 8000dd4:	2b4c      	cmp	r3, #76	; 0x4c
 8000dd6:	d921      	bls.n	8000e1c <VL6180x_GetCachedDWord+0x64>
		index >= VL6180x_FIRST_CACHED_INDEX  &&
 8000dd8:	88bb      	ldrh	r3, [r7, #4]
 8000dda:	2b81      	cmp	r3, #129	; 0x81
 8000ddc:	d81e      	bhi.n	8000e1c <VL6180x_GetCachedDWord+0x64>
		index <= (VL6180x_LAST_CACHED_INDEX - 3)) {
		uint8_t *pBytes = &VL6180xDevDataGet(dev, CachedRegs[index - VL6180x_FIRST_CACHED_INDEX]);
 8000dde:	88bb      	ldrh	r3, [r7, #4]
 8000de0:	3b4d      	subs	r3, #77	; 0x4d
 8000de2:	3380      	adds	r3, #128	; 0x80
 8000de4:	4a13      	ldr	r2, [pc, #76]	; (8000e34 <VL6180x_GetCachedDWord+0x7c>)
 8000de6:	4413      	add	r3, r2
 8000de8:	3301      	adds	r3, #1
 8000dea:	613b      	str	r3, [r7, #16]
		Value = ((uint32_t)pBytes[0] << 24) |
 8000dec:	693b      	ldr	r3, [r7, #16]
 8000dee:	781b      	ldrb	r3, [r3, #0]
 8000df0:	061a      	lsls	r2, r3, #24
				((uint32_t)pBytes[1] << 16) |
 8000df2:	693b      	ldr	r3, [r7, #16]
 8000df4:	3301      	adds	r3, #1
 8000df6:	781b      	ldrb	r3, [r3, #0]
 8000df8:	041b      	lsls	r3, r3, #16
		Value = ((uint32_t)pBytes[0] << 24) |
 8000dfa:	431a      	orrs	r2, r3
				((uint32_t)pBytes[2] << 8) |
 8000dfc:	693b      	ldr	r3, [r7, #16]
 8000dfe:	3302      	adds	r3, #2
 8000e00:	781b      	ldrb	r3, [r3, #0]
 8000e02:	021b      	lsls	r3, r3, #8
				((uint32_t)pBytes[1] << 16) |
 8000e04:	4313      	orrs	r3, r2
				(uint32_t)pBytes[3];
 8000e06:	693a      	ldr	r2, [r7, #16]
 8000e08:	3203      	adds	r2, #3
 8000e0a:	7812      	ldrb	r2, [r2, #0]
		Value = ((uint32_t)pBytes[0] << 24) |
 8000e0c:	4313      	orrs	r3, r2
 8000e0e:	60fb      	str	r3, [r7, #12]
		*pValue = Value;
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	68fa      	ldr	r2, [r7, #12]
 8000e14:	601a      	str	r2, [r3, #0]
		status = 0;
 8000e16:	2300      	movs	r3, #0
 8000e18:	617b      	str	r3, [r7, #20]
		index <= (VL6180x_LAST_CACHED_INDEX - 3)) {
 8000e1a:	e006      	b.n	8000e2a <VL6180x_GetCachedDWord+0x72>
	} else {
		status =  VL6180x_RdDWord(dev, index, pValue);
 8000e1c:	88b9      	ldrh	r1, [r7, #4]
 8000e1e:	79fb      	ldrb	r3, [r7, #7]
 8000e20:	683a      	ldr	r2, [r7, #0]
 8000e22:	4618      	mov	r0, r3
 8000e24:	f001 fd7a 	bl	800291c <VL6180x_RdDWord>
 8000e28:	6178      	str	r0, [r7, #20]
	}
	return status;
 8000e2a:	697b      	ldr	r3, [r7, #20]
}
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	3718      	adds	r7, #24
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bd80      	pop	{r7, pc}
 8000e34:	20000004 	.word	0x20000004

08000e38 <VL6180x_GetCachedWord>:

int VL6180x_GetCachedWord(VL6180xDev_t dev, uint16_t  index, uint16_t *pValue)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b086      	sub	sp, #24
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	4603      	mov	r3, r0
 8000e40:	603a      	str	r2, [r7, #0]
 8000e42:	71fb      	strb	r3, [r7, #7]
 8000e44:	460b      	mov	r3, r1
 8000e46:	80bb      	strh	r3, [r7, #4]
	int status;
	uint32_t Value;
	if (VL6180xDevDataGet(dev, CacheFilled) != 0 &&
 8000e48:	4b16      	ldr	r3, [pc, #88]	; (8000ea4 <VL6180x_GetCachedWord+0x6c>)
 8000e4a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d01b      	beq.n	8000e8a <VL6180x_GetCachedWord+0x52>
 8000e52:	88bb      	ldrh	r3, [r7, #4]
 8000e54:	2b4c      	cmp	r3, #76	; 0x4c
 8000e56:	d918      	bls.n	8000e8a <VL6180x_GetCachedWord+0x52>
		index >= VL6180x_FIRST_CACHED_INDEX  &&
 8000e58:	88bb      	ldrh	r3, [r7, #4]
 8000e5a:	2b83      	cmp	r3, #131	; 0x83
 8000e5c:	d815      	bhi.n	8000e8a <VL6180x_GetCachedWord+0x52>
		index <= (VL6180x_LAST_CACHED_INDEX - 1)) {
		uint8_t *pBytes = &VL6180xDevDataGet(dev, CachedRegs[index - VL6180x_FIRST_CACHED_INDEX]);
 8000e5e:	88bb      	ldrh	r3, [r7, #4]
 8000e60:	3b4d      	subs	r3, #77	; 0x4d
 8000e62:	3380      	adds	r3, #128	; 0x80
 8000e64:	4a0f      	ldr	r2, [pc, #60]	; (8000ea4 <VL6180x_GetCachedWord+0x6c>)
 8000e66:	4413      	add	r3, r2
 8000e68:	3301      	adds	r3, #1
 8000e6a:	613b      	str	r3, [r7, #16]
		Value = ((uint32_t)pBytes[0] << 8) | (uint32_t)pBytes[1];
 8000e6c:	693b      	ldr	r3, [r7, #16]
 8000e6e:	781b      	ldrb	r3, [r3, #0]
 8000e70:	021b      	lsls	r3, r3, #8
 8000e72:	693a      	ldr	r2, [r7, #16]
 8000e74:	3201      	adds	r2, #1
 8000e76:	7812      	ldrb	r2, [r2, #0]
 8000e78:	4313      	orrs	r3, r2
 8000e7a:	60fb      	str	r3, [r7, #12]
		*pValue = Value;
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	b29a      	uxth	r2, r3
 8000e80:	683b      	ldr	r3, [r7, #0]
 8000e82:	801a      	strh	r2, [r3, #0]
		status = 0;
 8000e84:	2300      	movs	r3, #0
 8000e86:	617b      	str	r3, [r7, #20]
		index <= (VL6180x_LAST_CACHED_INDEX - 1)) {
 8000e88:	e006      	b.n	8000e98 <VL6180x_GetCachedWord+0x60>
	} else {
		status =  VL6180x_RdWord(dev, index, pValue);
 8000e8a:	88b9      	ldrh	r1, [r7, #4]
 8000e8c:	79fb      	ldrb	r3, [r7, #7]
 8000e8e:	683a      	ldr	r2, [r7, #0]
 8000e90:	4618      	mov	r0, r3
 8000e92:	f001 fd07 	bl	80028a4 <VL6180x_RdWord>
 8000e96:	6178      	str	r0, [r7, #20]
	}
	return status;
 8000e98:	697b      	ldr	r3, [r7, #20]
}
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	3718      	adds	r7, #24
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	20000004 	.word	0x20000004

08000ea8 <VL6180x_GetCachedByte>:

int VL6180x_GetCachedByte(VL6180xDev_t dev, uint16_t  index, uint8_t *pValue)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b084      	sub	sp, #16
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	4603      	mov	r3, r0
 8000eb0:	603a      	str	r2, [r7, #0]
 8000eb2:	71fb      	strb	r3, [r7, #7]
 8000eb4:	460b      	mov	r3, r1
 8000eb6:	80bb      	strh	r3, [r7, #4]
	int status;
	uint8_t Value;
	if (VL6180xDevDataGet(dev, CacheFilled) != 0 &&
 8000eb8:	4b11      	ldr	r3, [pc, #68]	; (8000f00 <VL6180x_GetCachedByte+0x58>)
 8000eba:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d012      	beq.n	8000ee8 <VL6180x_GetCachedByte+0x40>
 8000ec2:	88bb      	ldrh	r3, [r7, #4]
 8000ec4:	2b4c      	cmp	r3, #76	; 0x4c
 8000ec6:	d90f      	bls.n	8000ee8 <VL6180x_GetCachedByte+0x40>
		index >= VL6180x_FIRST_CACHED_INDEX &&
 8000ec8:	88bb      	ldrh	r3, [r7, #4]
 8000eca:	2b84      	cmp	r3, #132	; 0x84
 8000ecc:	d80c      	bhi.n	8000ee8 <VL6180x_GetCachedByte+0x40>
		index <= VL6180x_LAST_CACHED_INDEX) {
		Value = VL6180xDevDataGet(dev, CachedRegs[index - VL6180x_FIRST_CACHED_INDEX]);
 8000ece:	88bb      	ldrh	r3, [r7, #4]
 8000ed0:	3b4d      	subs	r3, #77	; 0x4d
 8000ed2:	4a0b      	ldr	r2, [pc, #44]	; (8000f00 <VL6180x_GetCachedByte+0x58>)
 8000ed4:	4413      	add	r3, r2
 8000ed6:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8000eda:	72fb      	strb	r3, [r7, #11]
		*pValue = Value;
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	7afa      	ldrb	r2, [r7, #11]
 8000ee0:	701a      	strb	r2, [r3, #0]
		status = 0;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	60fb      	str	r3, [r7, #12]
 8000ee6:	e006      	b.n	8000ef6 <VL6180x_GetCachedByte+0x4e>
	} else {
		status =  VL6180x_RdByte(dev, index, pValue);
 8000ee8:	88b9      	ldrh	r1, [r7, #4]
 8000eea:	79fb      	ldrb	r3, [r7, #7]
 8000eec:	683a      	ldr	r2, [r7, #0]
 8000eee:	4618      	mov	r0, r3
 8000ef0:	f001 fca5 	bl	800283e <VL6180x_RdByte>
 8000ef4:	60f8      	str	r0, [r7, #12]
	}
	return status;
 8000ef6:	68fb      	ldr	r3, [r7, #12]
}
 8000ef8:	4618      	mov	r0, r3
 8000efa:	3710      	adds	r7, #16
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}
 8000f00:	20000004 	.word	0x20000004

08000f04 <_CachedRegs_Fetch>:


int _CachedRegs_Fetch(VL6180xDev_t dev)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b084      	sub	sp, #16
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	71fb      	strb	r3, [r7, #7]
	int status;
	uint8_t *Buffer;
	if (VL6180xDevDataGet(dev, CacheFilled) == 0) {
 8000f0e:	4b0d      	ldr	r3, [pc, #52]	; (8000f44 <_CachedRegs_Fetch+0x40>)
 8000f10:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d10d      	bne.n	8000f34 <_CachedRegs_Fetch+0x30>
		VL6180xDevDataSet(dev, CacheFilled, 1);
 8000f18:	4b0a      	ldr	r3, [pc, #40]	; (8000f44 <_CachedRegs_Fetch+0x40>)
 8000f1a:	2201      	movs	r2, #1
 8000f1c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
		Buffer = &VL6180xDevDataGet(dev, CachedRegs[0]);
 8000f20:	4b09      	ldr	r3, [pc, #36]	; (8000f48 <_CachedRegs_Fetch+0x44>)
 8000f22:	60bb      	str	r3, [r7, #8]
		status = VL6180x_RdMulti(dev, VL6180x_FIRST_CACHED_INDEX, Buffer, VL6180x_CACHED_REG_CNT);
 8000f24:	79f8      	ldrb	r0, [r7, #7]
 8000f26:	2338      	movs	r3, #56	; 0x38
 8000f28:	68ba      	ldr	r2, [r7, #8]
 8000f2a:	214d      	movs	r1, #77	; 0x4d
 8000f2c:	f001 fd38 	bl	80029a0 <VL6180x_RdMulti>
 8000f30:	60f8      	str	r0, [r7, #12]
 8000f32:	e001      	b.n	8000f38 <_CachedRegs_Fetch+0x34>
	} else {
		status = 0 ;
 8000f34:	2300      	movs	r3, #0
 8000f36:	60fb      	str	r3, [r7, #12]
	}
	return status;
 8000f38:	68fb      	ldr	r3, [r7, #12]
}
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	3710      	adds	r7, #16
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	20000004 	.word	0x20000004
 8000f48:	20000085 	.word	0x20000085

08000f4c <_CachedRegs_Flush>:

void _CachedRegs_Flush(VL6180xDev_t dev)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	b083      	sub	sp, #12
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	4603      	mov	r3, r0
 8000f54:	71fb      	strb	r3, [r7, #7]
	VL6180xDevDataSet(dev, CacheFilled, 0);
 8000f56:	4b05      	ldr	r3, [pc, #20]	; (8000f6c <_CachedRegs_Flush+0x20>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
}
 8000f5e:	bf00      	nop
 8000f60:	370c      	adds	r7, #12
 8000f62:	46bd      	mov	sp, r7
 8000f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f68:	4770      	bx	lr
 8000f6a:	bf00      	nop
 8000f6c:	20000004 	.word	0x20000004

08000f70 <VL6180x_RangeGetMeasurement>:
#endif /* VL6180x_CACHED_REG */



int VL6180x_RangeGetMeasurement(VL6180xDev_t dev, VL6180x_RangeData_t *pRangeData)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b084      	sub	sp, #16
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	4603      	mov	r3, r0
 8000f78:	6039      	str	r1, [r7, #0]
 8000f7a:	71fb      	strb	r3, [r7, #7]
	uint16_t RawRate;
	uint8_t RawStatus;

	LOG_FUNCTION_START("");

	status = _CachedRegs_Fetch(dev);
 8000f7c:	79fb      	ldrb	r3, [r7, #7]
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f7ff ffc0 	bl	8000f04 <_CachedRegs_Fetch>
 8000f84:	60f8      	str	r0, [r7, #12]
	if (status) {
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d157      	bne.n	800103c <VL6180x_RangeGetMeasurement+0xcc>
		VL6180x_ErrLog("Cache register read fail");
		goto error;
	}
	status = VL6180x_RangeGetResult(dev, &pRangeData->range_mm);
 8000f8c:	683a      	ldr	r2, [r7, #0]
 8000f8e:	79fb      	ldrb	r3, [r7, #7]
 8000f90:	4611      	mov	r1, r2
 8000f92:	4618      	mov	r0, r3
 8000f94:	f000 f862 	bl	800105c <VL6180x_RangeGetResult>
 8000f98:	60f8      	str	r0, [r7, #12]
	if (!status) {
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d14f      	bne.n	8001040 <VL6180x_RangeGetMeasurement+0xd0>
		status = VL6180x_GetCachedWord(dev, RESULT_RANGE_SIGNAL_RATE, &RawRate);
 8000fa0:	f107 020a 	add.w	r2, r7, #10
 8000fa4:	79fb      	ldrb	r3, [r7, #7]
 8000fa6:	2166      	movs	r1, #102	; 0x66
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f7ff ff45 	bl	8000e38 <VL6180x_GetCachedWord>
 8000fae:	60f8      	str	r0, [r7, #12]
		if (!status) {
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d147      	bne.n	8001046 <VL6180x_RangeGetMeasurement+0xd6>
			pRangeData->signalRate_mcps = VL6180x_9to7Conv(RawRate);
 8000fb6:	897b      	ldrh	r3, [r7, #10]
 8000fb8:	461a      	mov	r2, r3
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	605a      	str	r2, [r3, #4]
			status = VL6180x_GetCachedByte(dev, RESULT_RANGE_STATUS, &RawStatus);
 8000fbe:	f107 0209 	add.w	r2, r7, #9
 8000fc2:	79fb      	ldrb	r3, [r7, #7]
 8000fc4:	214d      	movs	r1, #77	; 0x4d
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	f7ff ff6e 	bl	8000ea8 <VL6180x_GetCachedByte>
 8000fcc:	60f8      	str	r0, [r7, #12]
			if (!status) {
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d105      	bne.n	8000fe0 <VL6180x_RangeGetMeasurement+0x70>
				pRangeData->errorStatus = RawStatus >> 4;
 8000fd4:	7a7b      	ldrb	r3, [r7, #9]
 8000fd6:	091b      	lsrs	r3, r3, #4
 8000fd8:	b2db      	uxtb	r3, r3
 8000fda:	461a      	mov	r2, r3
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	609a      	str	r2, [r3, #8]
			} else {
				VL6180x_ErrLog("Rd RESULT_RANGE_STATUS fail");
			}
	#if VL6180x_WRAP_AROUND_FILTER_SUPPORT || VL6180x_HAVE_DMAX_RANGING
			status = _GetRateResult(dev, pRangeData);
 8000fe0:	79fb      	ldrb	r3, [r7, #7]
 8000fe2:	6839      	ldr	r1, [r7, #0]
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f001 f92f 	bl	8002248 <_GetRateResult>
 8000fea:	60f8      	str	r0, [r7, #12]
			if (status)
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d128      	bne.n	8001044 <VL6180x_RangeGetMeasurement+0xd4>
				goto error;
	#endif
	#if VL6180x_WRAP_AROUND_FILTER_SUPPORT
			/* if enabled run filter */
			if (_IsWrapArroundActive(dev)) {
 8000ff2:	4b19      	ldr	r3, [pc, #100]	; (8001058 <VL6180x_RangeGetMeasurement+0xe8>)
 8000ff4:	7e5b      	ldrb	r3, [r3, #25]
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d015      	beq.n	8001026 <VL6180x_RangeGetMeasurement+0xb6>
				status = _filter_GetResult(dev, pRangeData);
 8000ffa:	79fb      	ldrb	r3, [r7, #7]
 8000ffc:	6839      	ldr	r1, [r7, #0]
 8000ffe:	4618      	mov	r0, r3
 8001000:	f001 f8d0 	bl	80021a4 <_filter_GetResult>
 8001004:	60f8      	str	r0, [r7, #12]
				if (!status) {
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	2b00      	cmp	r3, #0
 800100a:	d10c      	bne.n	8001026 <VL6180x_RangeGetMeasurement+0xb6>
					/* patch the range status and measure if it is filtered */
					if(pRangeData->FilteredData.filterError != NoError) {
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001010:	2b00      	cmp	r3, #0
 8001012:	d008      	beq.n	8001026 <VL6180x_RangeGetMeasurement+0xb6>
						pRangeData->errorStatus = pRangeData->FilteredData.filterError;
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	609a      	str	r2, [r3, #8]
						pRangeData->range_mm = pRangeData->FilteredData.range_mm;
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	8c1b      	ldrh	r3, [r3, #32]
 8001020:	461a      	mov	r2, r3
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	601a      	str	r2, [r3, #0]
				}
			}
	#endif

	#if VL6180x_HAVE_DMAX_RANGING
			if (_IsDMaxActive(dev)) {
 8001026:	4b0c      	ldr	r3, [pc, #48]	; (8001058 <VL6180x_RangeGetMeasurement+0xe8>)
 8001028:	f893 30cc 	ldrb.w	r3, [r3, #204]	; 0xcc
 800102c:	2b00      	cmp	r3, #0
 800102e:	d00a      	beq.n	8001046 <VL6180x_RangeGetMeasurement+0xd6>
				_DMax_Compute(dev, pRangeData);
 8001030:	79fb      	ldrb	r3, [r7, #7]
 8001032:	6839      	ldr	r1, [r7, #0]
 8001034:	4618      	mov	r0, r3
 8001036:	f001 fae5 	bl	8002604 <_DMax_Compute>
 800103a:	e004      	b.n	8001046 <VL6180x_RangeGetMeasurement+0xd6>
		goto error;
 800103c:	bf00      	nop
 800103e:	e002      	b.n	8001046 <VL6180x_RangeGetMeasurement+0xd6>
		    VL6180x_ErrLog("Rd RESULT_RANGE_SIGNAL_RATE fail");
		}
	} else {
		VL6180x_ErrLog("VL6180x_GetRangeResult fail");
	}
error:
 8001040:	bf00      	nop
 8001042:	e000      	b.n	8001046 <VL6180x_RangeGetMeasurement+0xd6>
				goto error;
 8001044:	bf00      	nop
	_CachedRegs_Flush(dev);
 8001046:	79fb      	ldrb	r3, [r7, #7]
 8001048:	4618      	mov	r0, r3
 800104a:	f7ff ff7f 	bl	8000f4c <_CachedRegs_Flush>
	LOG_FUNCTION_END_FMT(status, "%d %d %d", (int)pRangeData->range_mm, (int)pRangeData->signalRate_mcps,  (int)pRangeData->errorStatus) ;
	return status;
 800104e:	68fb      	ldr	r3, [r7, #12]
}
 8001050:	4618      	mov	r0, r3
 8001052:	3710      	adds	r7, #16
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}
 8001058:	20000004 	.word	0x20000004

0800105c <VL6180x_RangeGetResult>:
	LOG_FUNCTION_END(status);
	return status;
}

int VL6180x_RangeGetResult(VL6180xDev_t dev, int32_t *pRange_mm)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b086      	sub	sp, #24
 8001060:	af00      	add	r7, sp, #0
 8001062:	4603      	mov	r3, r0
 8001064:	6039      	str	r1, [r7, #0]
 8001066:	71fb      	strb	r3, [r7, #7]
	uint8_t RawRange;
	int32_t Upscale;

	LOG_FUNCTION_START("%p", pRange_mm);

	status = VL6180x_GetCachedByte(dev, RESULT_RANGE_VAL, &RawRange);
 8001068:	f107 020f 	add.w	r2, r7, #15
 800106c:	79fb      	ldrb	r3, [r7, #7]
 800106e:	2162      	movs	r1, #98	; 0x62
 8001070:	4618      	mov	r0, r3
 8001072:	f7ff ff19 	bl	8000ea8 <VL6180x_GetCachedByte>
 8001076:	6178      	str	r0, [r7, #20]
	if (!status) {
 8001078:	697b      	ldr	r3, [r7, #20]
 800107a:	2b00      	cmp	r3, #0
 800107c:	d109      	bne.n	8001092 <VL6180x_RangeGetResult+0x36>
		Upscale = _GetUpscale(dev);
 800107e:	4b07      	ldr	r3, [pc, #28]	; (800109c <VL6180x_RangeGetResult+0x40>)
 8001080:	7e1b      	ldrb	r3, [r3, #24]
 8001082:	613b      	str	r3, [r7, #16]
		*pRange_mm = Upscale * (int32_t)RawRange;
 8001084:	7bfb      	ldrb	r3, [r7, #15]
 8001086:	461a      	mov	r2, r3
 8001088:	693b      	ldr	r3, [r7, #16]
 800108a:	fb03 f202 	mul.w	r2, r3, r2
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	601a      	str	r2, [r3, #0]
	}
	LOG_FUNCTION_END_FMT(status, "%d", (int)*pRange_mm);
	return status;
 8001092:	697b      	ldr	r3, [r7, #20]
}
 8001094:	4618      	mov	r0, r3
 8001096:	3718      	adds	r7, #24
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}
 800109c:	20000004 	.word	0x20000004

080010a0 <VL6180x_RangeSetRawThresholds>:

int VL6180x_RangeSetRawThresholds(VL6180xDev_t dev, uint8_t low, uint8_t high)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b084      	sub	sp, #16
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	4603      	mov	r3, r0
 80010a8:	71fb      	strb	r3, [r7, #7]
 80010aa:	460b      	mov	r3, r1
 80010ac:	71bb      	strb	r3, [r7, #6]
 80010ae:	4613      	mov	r3, r2
 80010b0:	717b      	strb	r3, [r7, #5]
	int status;
	LOG_FUNCTION_START("%d %d", (int) low, (int)high);
	/* TODO we can optimize here grouping high/low in a word but that's cpu endianness dependent */
	status = VL6180x_WrByte(dev, SYSRANGE_THRESH_HIGH, high);
 80010b2:	797a      	ldrb	r2, [r7, #5]
 80010b4:	79fb      	ldrb	r3, [r7, #7]
 80010b6:	2119      	movs	r1, #25
 80010b8:	4618      	mov	r0, r3
 80010ba:	f001 fae7 	bl	800268c <VL6180x_WrByte>
 80010be:	60f8      	str	r0, [r7, #12]
	if (!status) {
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d106      	bne.n	80010d4 <VL6180x_RangeSetRawThresholds+0x34>
		status = VL6180x_WrByte(dev, SYSRANGE_THRESH_LOW, low);
 80010c6:	79ba      	ldrb	r2, [r7, #6]
 80010c8:	79fb      	ldrb	r3, [r7, #7]
 80010ca:	211a      	movs	r1, #26
 80010cc:	4618      	mov	r0, r3
 80010ce:	f001 fadd 	bl	800268c <VL6180x_WrByte>
 80010d2:	60f8      	str	r0, [r7, #12]
	}

	LOG_FUNCTION_END(status);
	return status;
 80010d4:	68fb      	ldr	r3, [r7, #12]
}
 80010d6:	4618      	mov	r0, r3
 80010d8:	3710      	adds	r7, #16
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}

080010de <VL6180x_RangeGetInterruptStatus>:
	return status;
}


int VL6180x_RangeGetInterruptStatus(VL6180xDev_t dev, uint8_t *pIntStatus)
{
 80010de:	b580      	push	{r7, lr}
 80010e0:	b084      	sub	sp, #16
 80010e2:	af00      	add	r7, sp, #0
 80010e4:	4603      	mov	r3, r0
 80010e6:	6039      	str	r1, [r7, #0]
 80010e8:	71fb      	strb	r3, [r7, #7]
	int status;
	uint8_t IntStatus;
	LOG_FUNCTION_START("%p", pIntStatus);
	/* FIXME we are grouping "error" with over status the user must check implicitly for it
	 * not just new sample or over status , that will nevr show up in case of error*/
	status = VL6180x_GetCachedByte(dev, RESULT_INTERRUPT_STATUS_GPIO, &IntStatus);
 80010ea:	f107 020b 	add.w	r2, r7, #11
 80010ee:	79fb      	ldrb	r3, [r7, #7]
 80010f0:	214f      	movs	r1, #79	; 0x4f
 80010f2:	4618      	mov	r0, r3
 80010f4:	f7ff fed8 	bl	8000ea8 <VL6180x_GetCachedByte>
 80010f8:	60f8      	str	r0, [r7, #12]
	*pIntStatus = IntStatus & 0xC7;
 80010fa:	7afb      	ldrb	r3, [r7, #11]
 80010fc:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8001100:	b2da      	uxtb	r2, r3
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END_FMT(status, "%d", (int)*pIntStatus);
	return status;
 8001106:	68fb      	ldr	r3, [r7, #12]
}
 8001108:	4618      	mov	r0, r3
 800110a:	3710      	adds	r7, #16
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}

08001110 <VL6180x_ClearInterrupt>:
	LOG_FUNCTION_END_FMT(status, "%d", (int)*IntStatus);
	return status;
}

int VL6180x_ClearInterrupt(VL6180xDev_t dev, uint8_t IntClear)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b084      	sub	sp, #16
 8001114:	af00      	add	r7, sp, #0
 8001116:	4603      	mov	r3, r0
 8001118:	460a      	mov	r2, r1
 800111a:	71fb      	strb	r3, [r7, #7]
 800111c:	4613      	mov	r3, r2
 800111e:	71bb      	strb	r3, [r7, #6]
	int status;
	LOG_FUNCTION_START("%d", (int)IntClear);
	if (IntClear <= 7) {
 8001120:	79bb      	ldrb	r3, [r7, #6]
 8001122:	2b07      	cmp	r3, #7
 8001124:	d807      	bhi.n	8001136 <VL6180x_ClearInterrupt+0x26>
		status = VL6180x_WrByte(dev, SYSTEM_INTERRUPT_CLEAR, IntClear);
 8001126:	79ba      	ldrb	r2, [r7, #6]
 8001128:	79fb      	ldrb	r3, [r7, #7]
 800112a:	2115      	movs	r1, #21
 800112c:	4618      	mov	r0, r3
 800112e:	f001 faad 	bl	800268c <VL6180x_WrByte>
 8001132:	60f8      	str	r0, [r7, #12]
 8001134:	e002      	b.n	800113c <VL6180x_ClearInterrupt+0x2c>
	} else {
		status = INVALID_PARAMS;
 8001136:	f06f 0301 	mvn.w	r3, #1
 800113a:	60fb      	str	r3, [r7, #12]
	}
	LOG_FUNCTION_END(status);
	return status;
 800113c:	68fb      	ldr	r3, [r7, #12]
}
 800113e:	4618      	mov	r0, r3
 8001140:	3710      	adds	r7, #16
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
	...

08001148 <_UpscaleInitPatch0>:
}

#if VL6180x_UPSCALE_SUPPORT != 1

static int _UpscaleInitPatch0(VL6180xDev_t dev)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b084      	sub	sp, #16
 800114c:	af00      	add	r7, sp, #0
 800114e:	4603      	mov	r3, r0
 8001150:	71fb      	strb	r3, [r7, #7]
	int status;
	uint32_t CalValue = 0;
 8001152:	2300      	movs	r3, #0
 8001154:	60fb      	str	r3, [r7, #12]
	CalValue = VL6180xDevDataGet(dev, Part2PartAmbNVM);
 8001156:	4b07      	ldr	r3, [pc, #28]	; (8001174 <_UpscaleInitPatch0+0x2c>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	60fb      	str	r3, [r7, #12]
	status = VL6180x_WrDWord(dev, 0xDA, CalValue);
 800115c:	79fb      	ldrb	r3, [r7, #7]
 800115e:	68fa      	ldr	r2, [r7, #12]
 8001160:	21da      	movs	r1, #218	; 0xda
 8001162:	4618      	mov	r0, r3
 8001164:	f001 fae8 	bl	8002738 <VL6180x_WrDWord>
 8001168:	60b8      	str	r0, [r7, #8]
	return status;
 800116a:	68bb      	ldr	r3, [r7, #8]
}
 800116c:	4618      	mov	r0, r3
 800116e:	3710      	adds	r7, #16
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}
 8001174:	20000004 	.word	0x20000004

08001178 <VL6180x_UpscaleRegInit>:

/* only include up-scaling register setting when up-scale support is configured in */
int VL6180x_UpscaleRegInit(VL6180xDev_t dev)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b082      	sub	sp, #8
 800117c:	af00      	add	r7, sp, #0
 800117e:	4603      	mov	r3, r0
 8001180:	71fb      	strb	r3, [r7, #7]
	/*  apply REGISTER_TUNING_ER02_100614_CustomerView.txt */
	VL6180x_WrByte(dev, 0x0207, 0x01);
 8001182:	79fb      	ldrb	r3, [r7, #7]
 8001184:	2201      	movs	r2, #1
 8001186:	f240 2107 	movw	r1, #519	; 0x207
 800118a:	4618      	mov	r0, r3
 800118c:	f001 fa7e 	bl	800268c <VL6180x_WrByte>
	VL6180x_WrByte(dev, 0x0208, 0x01);
 8001190:	79fb      	ldrb	r3, [r7, #7]
 8001192:	2201      	movs	r2, #1
 8001194:	f44f 7102 	mov.w	r1, #520	; 0x208
 8001198:	4618      	mov	r0, r3
 800119a:	f001 fa77 	bl	800268c <VL6180x_WrByte>
	VL6180x_WrByte(dev, 0x0096, 0x00);
 800119e:	79fb      	ldrb	r3, [r7, #7]
 80011a0:	2200      	movs	r2, #0
 80011a2:	2196      	movs	r1, #150	; 0x96
 80011a4:	4618      	mov	r0, r3
 80011a6:	f001 fa71 	bl	800268c <VL6180x_WrByte>
	VL6180x_WrByte(dev, 0x0097, 0x54);
 80011aa:	79fb      	ldrb	r3, [r7, #7]
 80011ac:	2254      	movs	r2, #84	; 0x54
 80011ae:	2197      	movs	r1, #151	; 0x97
 80011b0:	4618      	mov	r0, r3
 80011b2:	f001 fa6b 	bl	800268c <VL6180x_WrByte>
	VL6180x_WrByte(dev, 0x00e3, 0x01);
 80011b6:	79fb      	ldrb	r3, [r7, #7]
 80011b8:	2201      	movs	r2, #1
 80011ba:	21e3      	movs	r1, #227	; 0xe3
 80011bc:	4618      	mov	r0, r3
 80011be:	f001 fa65 	bl	800268c <VL6180x_WrByte>
	VL6180x_WrByte(dev, 0x00e4, 0x03);
 80011c2:	79fb      	ldrb	r3, [r7, #7]
 80011c4:	2203      	movs	r2, #3
 80011c6:	21e4      	movs	r1, #228	; 0xe4
 80011c8:	4618      	mov	r0, r3
 80011ca:	f001 fa5f 	bl	800268c <VL6180x_WrByte>
	VL6180x_WrByte(dev, 0x00e5, 0x02);
 80011ce:	79fb      	ldrb	r3, [r7, #7]
 80011d0:	2202      	movs	r2, #2
 80011d2:	21e5      	movs	r1, #229	; 0xe5
 80011d4:	4618      	mov	r0, r3
 80011d6:	f001 fa59 	bl	800268c <VL6180x_WrByte>
	VL6180x_WrByte(dev, 0x00e6, 0x01);
 80011da:	79fb      	ldrb	r3, [r7, #7]
 80011dc:	2201      	movs	r2, #1
 80011de:	21e6      	movs	r1, #230	; 0xe6
 80011e0:	4618      	mov	r0, r3
 80011e2:	f001 fa53 	bl	800268c <VL6180x_WrByte>
	VL6180x_WrByte(dev, 0x00e7, 0x03);
 80011e6:	79fb      	ldrb	r3, [r7, #7]
 80011e8:	2203      	movs	r2, #3
 80011ea:	21e7      	movs	r1, #231	; 0xe7
 80011ec:	4618      	mov	r0, r3
 80011ee:	f001 fa4d 	bl	800268c <VL6180x_WrByte>
	VL6180x_WrByte(dev, 0x00f5, 0x02);
 80011f2:	79fb      	ldrb	r3, [r7, #7]
 80011f4:	2202      	movs	r2, #2
 80011f6:	21f5      	movs	r1, #245	; 0xf5
 80011f8:	4618      	mov	r0, r3
 80011fa:	f001 fa47 	bl	800268c <VL6180x_WrByte>
	VL6180x_WrByte(dev, 0x00d9, 0x05);
 80011fe:	79fb      	ldrb	r3, [r7, #7]
 8001200:	2205      	movs	r2, #5
 8001202:	21d9      	movs	r1, #217	; 0xd9
 8001204:	4618      	mov	r0, r3
 8001206:	f001 fa41 	bl	800268c <VL6180x_WrByte>

	_UpscaleInitPatch0(dev);
 800120a:	79fb      	ldrb	r3, [r7, #7]
 800120c:	4618      	mov	r0, r3
 800120e:	f7ff ff9b 	bl	8001148 <_UpscaleInitPatch0>

	VL6180x_WrByte(dev, 0x009f, 0x00);
 8001212:	79fb      	ldrb	r3, [r7, #7]
 8001214:	2200      	movs	r2, #0
 8001216:	219f      	movs	r1, #159	; 0x9f
 8001218:	4618      	mov	r0, r3
 800121a:	f001 fa37 	bl	800268c <VL6180x_WrByte>
	VL6180x_WrByte(dev, 0x00a3, 0x28);
 800121e:	79fb      	ldrb	r3, [r7, #7]
 8001220:	2228      	movs	r2, #40	; 0x28
 8001222:	21a3      	movs	r1, #163	; 0xa3
 8001224:	4618      	mov	r0, r3
 8001226:	f001 fa31 	bl	800268c <VL6180x_WrByte>
	VL6180x_WrByte(dev, 0x00b7, 0x00);
 800122a:	79fb      	ldrb	r3, [r7, #7]
 800122c:	2200      	movs	r2, #0
 800122e:	21b7      	movs	r1, #183	; 0xb7
 8001230:	4618      	mov	r0, r3
 8001232:	f001 fa2b 	bl	800268c <VL6180x_WrByte>
	VL6180x_WrByte(dev, 0x00bb, 0x28);
 8001236:	79fb      	ldrb	r3, [r7, #7]
 8001238:	2228      	movs	r2, #40	; 0x28
 800123a:	21bb      	movs	r1, #187	; 0xbb
 800123c:	4618      	mov	r0, r3
 800123e:	f001 fa25 	bl	800268c <VL6180x_WrByte>
	VL6180x_WrByte(dev, 0x00b2, 0x09);
 8001242:	79fb      	ldrb	r3, [r7, #7]
 8001244:	2209      	movs	r2, #9
 8001246:	21b2      	movs	r1, #178	; 0xb2
 8001248:	4618      	mov	r0, r3
 800124a:	f001 fa1f 	bl	800268c <VL6180x_WrByte>
	VL6180x_WrByte(dev, 0x00ca, 0x09);
 800124e:	79fb      	ldrb	r3, [r7, #7]
 8001250:	2209      	movs	r2, #9
 8001252:	21ca      	movs	r1, #202	; 0xca
 8001254:	4618      	mov	r0, r3
 8001256:	f001 fa19 	bl	800268c <VL6180x_WrByte>
	VL6180x_WrByte(dev, 0x0198, 0x01);
 800125a:	79fb      	ldrb	r3, [r7, #7]
 800125c:	2201      	movs	r2, #1
 800125e:	f44f 71cc 	mov.w	r1, #408	; 0x198
 8001262:	4618      	mov	r0, r3
 8001264:	f001 fa12 	bl	800268c <VL6180x_WrByte>
	VL6180x_WrByte(dev, 0x01b0, 0x17);
 8001268:	79fb      	ldrb	r3, [r7, #7]
 800126a:	2217      	movs	r2, #23
 800126c:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 8001270:	4618      	mov	r0, r3
 8001272:	f001 fa0b 	bl	800268c <VL6180x_WrByte>
	VL6180x_WrByte(dev, 0x01ad, 0x00);
 8001276:	79fb      	ldrb	r3, [r7, #7]
 8001278:	2200      	movs	r2, #0
 800127a:	f240 11ad 	movw	r1, #429	; 0x1ad
 800127e:	4618      	mov	r0, r3
 8001280:	f001 fa04 	bl	800268c <VL6180x_WrByte>
	VL6180x_WrByte(dev, 0x00ff, 0x05);
 8001284:	79fb      	ldrb	r3, [r7, #7]
 8001286:	2205      	movs	r2, #5
 8001288:	21ff      	movs	r1, #255	; 0xff
 800128a:	4618      	mov	r0, r3
 800128c:	f001 f9fe 	bl	800268c <VL6180x_WrByte>
	VL6180x_WrByte(dev, 0x0100, 0x05);
 8001290:	79fb      	ldrb	r3, [r7, #7]
 8001292:	2205      	movs	r2, #5
 8001294:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001298:	4618      	mov	r0, r3
 800129a:	f001 f9f7 	bl	800268c <VL6180x_WrByte>
	VL6180x_WrByte(dev, 0x0199, 0x05);
 800129e:	79fb      	ldrb	r3, [r7, #7]
 80012a0:	2205      	movs	r2, #5
 80012a2:	f240 1199 	movw	r1, #409	; 0x199
 80012a6:	4618      	mov	r0, r3
 80012a8:	f001 f9f0 	bl	800268c <VL6180x_WrByte>
	VL6180x_WrByte(dev, 0x01a6, 0x1b);
 80012ac:	79fb      	ldrb	r3, [r7, #7]
 80012ae:	221b      	movs	r2, #27
 80012b0:	f44f 71d3 	mov.w	r1, #422	; 0x1a6
 80012b4:	4618      	mov	r0, r3
 80012b6:	f001 f9e9 	bl	800268c <VL6180x_WrByte>
	VL6180x_WrByte(dev, 0x01ac, 0x3e);
 80012ba:	79fb      	ldrb	r3, [r7, #7]
 80012bc:	223e      	movs	r2, #62	; 0x3e
 80012be:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
 80012c2:	4618      	mov	r0, r3
 80012c4:	f001 f9e2 	bl	800268c <VL6180x_WrByte>
	VL6180x_WrByte(dev, 0x01a7, 0x1f);
 80012c8:	79fb      	ldrb	r3, [r7, #7]
 80012ca:	221f      	movs	r2, #31
 80012cc:	f240 11a7 	movw	r1, #423	; 0x1a7
 80012d0:	4618      	mov	r0, r3
 80012d2:	f001 f9db 	bl	800268c <VL6180x_WrByte>
	VL6180x_WrByte(dev, 0x0030, 0x00);
 80012d6:	79fb      	ldrb	r3, [r7, #7]
 80012d8:	2200      	movs	r2, #0
 80012da:	2130      	movs	r1, #48	; 0x30
 80012dc:	4618      	mov	r0, r3
 80012de:	f001 f9d5 	bl	800268c <VL6180x_WrByte>
	VL6180x_WrByte(dev, 0x0011, 0x10);
 80012e2:	79fb      	ldrb	r3, [r7, #7]
 80012e4:	2210      	movs	r2, #16
 80012e6:	2111      	movs	r1, #17
 80012e8:	4618      	mov	r0, r3
 80012ea:	f001 f9cf 	bl	800268c <VL6180x_WrByte>
	VL6180x_WrByte(dev, 0x010a, 0x30);
 80012ee:	79fb      	ldrb	r3, [r7, #7]
 80012f0:	2230      	movs	r2, #48	; 0x30
 80012f2:	f44f 7185 	mov.w	r1, #266	; 0x10a
 80012f6:	4618      	mov	r0, r3
 80012f8:	f001 f9c8 	bl	800268c <VL6180x_WrByte>
	VL6180x_WrByte(dev, 0x003f, 0x46);
 80012fc:	79fb      	ldrb	r3, [r7, #7]
 80012fe:	2246      	movs	r2, #70	; 0x46
 8001300:	213f      	movs	r1, #63	; 0x3f
 8001302:	4618      	mov	r0, r3
 8001304:	f001 f9c2 	bl	800268c <VL6180x_WrByte>
	VL6180x_WrByte(dev, 0x0031, 0xFF);
 8001308:	79fb      	ldrb	r3, [r7, #7]
 800130a:	22ff      	movs	r2, #255	; 0xff
 800130c:	2131      	movs	r1, #49	; 0x31
 800130e:	4618      	mov	r0, r3
 8001310:	f001 f9bc 	bl	800268c <VL6180x_WrByte>
	VL6180x_WrByte(dev, 0x0040, 0x63);
 8001314:	79fb      	ldrb	r3, [r7, #7]
 8001316:	2263      	movs	r2, #99	; 0x63
 8001318:	2140      	movs	r1, #64	; 0x40
 800131a:	4618      	mov	r0, r3
 800131c:	f001 f9b6 	bl	800268c <VL6180x_WrByte>
	VL6180x_WrByte(dev, 0x002e, 0x01);
 8001320:	79fb      	ldrb	r3, [r7, #7]
 8001322:	2201      	movs	r2, #1
 8001324:	212e      	movs	r1, #46	; 0x2e
 8001326:	4618      	mov	r0, r3
 8001328:	f001 f9b0 	bl	800268c <VL6180x_WrByte>
	VL6180x_WrByte(dev, 0x002c, 0xff);
 800132c:	79fb      	ldrb	r3, [r7, #7]
 800132e:	22ff      	movs	r2, #255	; 0xff
 8001330:	212c      	movs	r1, #44	; 0x2c
 8001332:	4618      	mov	r0, r3
 8001334:	f001 f9aa 	bl	800268c <VL6180x_WrByte>
	VL6180x_WrByte(dev, 0x001b, 0x09);
 8001338:	79fb      	ldrb	r3, [r7, #7]
 800133a:	2209      	movs	r2, #9
 800133c:	211b      	movs	r1, #27
 800133e:	4618      	mov	r0, r3
 8001340:	f001 f9a4 	bl	800268c <VL6180x_WrByte>
	VL6180x_WrByte(dev, 0x003e, 0x31);
 8001344:	79fb      	ldrb	r3, [r7, #7]
 8001346:	2231      	movs	r2, #49	; 0x31
 8001348:	213e      	movs	r1, #62	; 0x3e
 800134a:	4618      	mov	r0, r3
 800134c:	f001 f99e 	bl	800268c <VL6180x_WrByte>
	VL6180x_WrByte(dev, 0x0014, 0x24);
 8001350:	79fb      	ldrb	r3, [r7, #7]
 8001352:	2224      	movs	r2, #36	; 0x24
 8001354:	2114      	movs	r1, #20
 8001356:	4618      	mov	r0, r3
 8001358:	f001 f998 	bl	800268c <VL6180x_WrByte>
#if VL6180x_EXTENDED_RANGE
	VL6180x_RangeSetMaxConvergenceTime(dev, 63);
#else
	VL6180x_RangeSetMaxConvergenceTime(dev, 50);
 800135c:	79fb      	ldrb	r3, [r7, #7]
 800135e:	2132      	movs	r1, #50	; 0x32
 8001360:	4618      	mov	r0, r3
 8001362:	f000 f8de 	bl	8001522 <VL6180x_RangeSetMaxConvergenceTime>
#endif
	return 0;
 8001366:	2300      	movs	r3, #0
}
 8001368:	4618      	mov	r0, r3
 800136a:	3708      	adds	r7, #8
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}

08001370 <VL6180x_UpscaleSetScaling>:
#else
#define VL6180x_UpscaleRegInit(...) -1
#endif

int VL6180x_UpscaleSetScaling(VL6180xDev_t dev, uint8_t scaling)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b086      	sub	sp, #24
 8001374:	af00      	add	r7, sp, #0
 8001376:	4603      	mov	r3, r0
 8001378:	460a      	mov	r2, r1
 800137a:	71fb      	strb	r3, [r7, #7]
 800137c:	4613      	mov	r3, r2
 800137e:	71bb      	strb	r3, [r7, #6]
	/* we are in fixed config so only allow configured factor */
	#define min_scaling VL6180x_UPSCALE_SUPPORT
	#define max_scaling VL6180x_UPSCALE_SUPPORT
#endif

	if (scaling >= min_scaling  && scaling <= max_scaling) {
 8001380:	79bb      	ldrb	r3, [r7, #6]
 8001382:	2b00      	cmp	r3, #0
 8001384:	d065      	beq.n	8001452 <VL6180x_UpscaleSetScaling+0xe2>
 8001386:	79bb      	ldrb	r3, [r7, #6]
 8001388:	2b03      	cmp	r3, #3
 800138a:	d862      	bhi.n	8001452 <VL6180x_UpscaleSetScaling+0xe2>

		Scaler = ScalerLookUP[scaling - 1];
 800138c:	79bb      	ldrb	r3, [r7, #6]
 800138e:	3b01      	subs	r3, #1
 8001390:	4a35      	ldr	r2, [pc, #212]	; (8001468 <VL6180x_UpscaleSetScaling+0xf8>)
 8001392:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001396:	823b      	strh	r3, [r7, #16]
		status = VL6180x_WrWord(dev, RANGE_SCALER, Scaler);
 8001398:	8a3a      	ldrh	r2, [r7, #16]
 800139a:	79fb      	ldrb	r3, [r7, #7]
 800139c:	2196      	movs	r1, #150	; 0x96
 800139e:	4618      	mov	r0, r3
 80013a0:	f001 f99b 	bl	80026da <VL6180x_WrWord>
 80013a4:	6178      	str	r0, [r7, #20]
		_SetUpscale(dev, scaling);
 80013a6:	4a31      	ldr	r2, [pc, #196]	; (800146c <VL6180x_UpscaleSetScaling+0xfc>)
 80013a8:	79bb      	ldrb	r3, [r7, #6]
 80013aa:	7613      	strb	r3, [r2, #24]

		/* Apply scaling on  part-2-part offset */
		Offset = VL6180xDevDataGet(dev, Part2PartOffsetNVM) / scaling;
 80013ac:	4b2f      	ldr	r3, [pc, #188]	; (800146c <VL6180x_UpscaleSetScaling+0xfc>)
 80013ae:	f993 30cd 	ldrsb.w	r3, [r3, #205]	; 0xcd
 80013b2:	461a      	mov	r2, r3
 80013b4:	79bb      	ldrb	r3, [r7, #6]
 80013b6:	fb92 f3f3 	sdiv	r3, r2, r3
 80013ba:	73fb      	strb	r3, [r7, #15]
		status = VL6180x_WrByte(dev, SYSRANGE_PART_TO_PART_RANGE_OFFSET, Offset);
 80013bc:	7bfa      	ldrb	r2, [r7, #15]
 80013be:	79fb      	ldrb	r3, [r7, #7]
 80013c0:	2124      	movs	r1, #36	; 0x24
 80013c2:	4618      	mov	r0, r3
 80013c4:	f001 f962 	bl	800268c <VL6180x_WrByte>
 80013c8:	6178      	str	r0, [r7, #20]

		/* Apply scaling on CrossTalkValidHeight */
		if (status == 0) {
 80013ca:	697b      	ldr	r3, [r7, #20]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d10a      	bne.n	80013e6 <VL6180x_UpscaleSetScaling+0x76>
			status = VL6180x_WrByte(dev, SYSRANGE_CROSSTALK_VALID_HEIGHT,
									DEF_CROSS_TALK_VALID_HEIGHT_VALUE /  scaling);
 80013d0:	79bb      	ldrb	r3, [r7, #6]
 80013d2:	2214      	movs	r2, #20
 80013d4:	fb92 f3f3 	sdiv	r3, r2, r3
			status = VL6180x_WrByte(dev, SYSRANGE_CROSSTALK_VALID_HEIGHT,
 80013d8:	b2da      	uxtb	r2, r3
 80013da:	79fb      	ldrb	r3, [r7, #7]
 80013dc:	2121      	movs	r1, #33	; 0x21
 80013de:	4618      	mov	r0, r3
 80013e0:	f001 f954 	bl	800268c <VL6180x_WrByte>
 80013e4:	6178      	str	r0, [r7, #20]
		}
		/* Apply scaling on RangeIgnore ValidHeight if enabled */
		if( status == 0){
 80013e6:	697b      	ldr	r3, [r7, #20]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d119      	bne.n	8001420 <VL6180x_UpscaleSetScaling+0xb0>
			if(  VL6180xDevDataGet(dev, RangeIgnore.Enabled) !=0 ){
 80013ec:	4b1f      	ldr	r3, [pc, #124]	; (800146c <VL6180x_UpscaleSetScaling+0xfc>)
 80013ee:	7c1b      	ldrb	r3, [r3, #16]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d015      	beq.n	8001420 <VL6180x_UpscaleSetScaling+0xb0>
				ValidHeight = VL6180xDevDataGet(dev, RangeIgnore.ValidHeight);
 80013f4:	4b1d      	ldr	r3, [pc, #116]	; (800146c <VL6180x_UpscaleSetScaling+0xfc>)
 80013f6:	899b      	ldrh	r3, [r3, #12]
 80013f8:	827b      	strh	r3, [r7, #18]
				ValidHeight  /= _GetUpscale(dev);
 80013fa:	8a7b      	ldrh	r3, [r7, #18]
 80013fc:	4a1b      	ldr	r2, [pc, #108]	; (800146c <VL6180x_UpscaleSetScaling+0xfc>)
 80013fe:	7e12      	ldrb	r2, [r2, #24]
 8001400:	fb93 f3f2 	sdiv	r3, r3, r2
 8001404:	827b      	strh	r3, [r7, #18]
				if( ValidHeight > 255 )
 8001406:	8a7b      	ldrh	r3, [r7, #18]
 8001408:	2bff      	cmp	r3, #255	; 0xff
 800140a:	d901      	bls.n	8001410 <VL6180x_UpscaleSetScaling+0xa0>
					ValidHeight = 255;
 800140c:	23ff      	movs	r3, #255	; 0xff
 800140e:	827b      	strh	r3, [r7, #18]

				status = VL6180x_WrByte(dev, SYSRANGE_RANGE_IGNORE_VALID_HEIGHT,
 8001410:	8a7b      	ldrh	r3, [r7, #18]
 8001412:	b2da      	uxtb	r2, r3
 8001414:	79fb      	ldrb	r3, [r7, #7]
 8001416:	2125      	movs	r1, #37	; 0x25
 8001418:	4618      	mov	r0, r3
 800141a:	f001 f937 	bl	800268c <VL6180x_WrByte>
 800141e:	6178      	str	r0, [r7, #20]
							ValidHeight );
			}
		}

#if !VL6180x_EXTENDED_RANGE
		if (status == 0) {
 8001420:	697b      	ldr	r3, [r7, #20]
 8001422:	2b00      	cmp	r3, #0
 8001424:	d10c      	bne.n	8001440 <VL6180x_UpscaleSetScaling+0xd0>
			status = VL6180x_RangeSetEceState(dev, scaling == 1); /* enable ece only at 1x scaling */
 8001426:	79bb      	ldrb	r3, [r7, #6]
 8001428:	2b01      	cmp	r3, #1
 800142a:	bf0c      	ite	eq
 800142c:	2301      	moveq	r3, #1
 800142e:	2300      	movne	r3, #0
 8001430:	b2db      	uxtb	r3, r3
 8001432:	461a      	mov	r2, r3
 8001434:	79fb      	ldrb	r3, [r7, #7]
 8001436:	4611      	mov	r1, r2
 8001438:	4618      	mov	r0, r3
 800143a:	f000 f858 	bl	80014ee <VL6180x_RangeSetEceState>
 800143e:	6178      	str	r0, [r7, #20]
		}
		if (status == 0 && !VL6180x_EXTENDED_RANGE && scaling != 1) {
 8001440:	697b      	ldr	r3, [r7, #20]
 8001442:	2b00      	cmp	r3, #0
 8001444:	d109      	bne.n	800145a <VL6180x_UpscaleSetScaling+0xea>
 8001446:	79bb      	ldrb	r3, [r7, #6]
 8001448:	2b01      	cmp	r3, #1
 800144a:	d006      	beq.n	800145a <VL6180x_UpscaleSetScaling+0xea>
			status = NOT_GUARANTEED ;
 800144c:	2303      	movs	r3, #3
 800144e:	617b      	str	r3, [r7, #20]
		if (status == 0 && !VL6180x_EXTENDED_RANGE && scaling != 1) {
 8001450:	e003      	b.n	800145a <VL6180x_UpscaleSetScaling+0xea>
		}
#endif
	} else {
		status = INVALID_PARAMS;
 8001452:	f06f 0301 	mvn.w	r3, #1
 8001456:	617b      	str	r3, [r7, #20]
 8001458:	e000      	b.n	800145c <VL6180x_UpscaleSetScaling+0xec>
		if (status == 0 && !VL6180x_EXTENDED_RANGE && scaling != 1) {
 800145a:	bf00      	nop
	}
#undef min_scaling
#undef max_scaling
	LOG_FUNCTION_END(status);
	return status;
 800145c:	697b      	ldr	r3, [r7, #20]
}
 800145e:	4618      	mov	r0, r3
 8001460:	3718      	adds	r7, #24
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	08006e1c 	.word	0x08006e1c
 800146c:	20000004 	.word	0x20000004

08001470 <VL6180x_UpscaleStaticInit>:
	return status;
}


static int  VL6180x_UpscaleStaticInit(VL6180xDev_t dev)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b084      	sub	sp, #16
 8001474:	af00      	add	r7, sp, #0
 8001476:	4603      	mov	r3, r0
 8001478:	71fb      	strb	r3, [r7, #7]
	/* todo make these a fail macro in case only 1x is suppoted */
	int status;

	LOG_FUNCTION_START("");
	do {
		status = VL6180x_UpscaleRegInit(dev);
 800147a:	79fb      	ldrb	r3, [r7, #7]
 800147c:	4618      	mov	r0, r3
 800147e:	f7ff fe7b 	bl	8001178 <VL6180x_UpscaleRegInit>
 8001482:	60f8      	str	r0, [r7, #12]
		if (status) {
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	2b00      	cmp	r3, #0
			VL6180x_ErrLog("VL6180x_RangeSetEceState fail");
			break;
		}
#endif
	} while (0);
	if (!status) {
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	2b00      	cmp	r3, #0
 800148c:	d10d      	bne.n	80014aa <VL6180x_UpscaleStaticInit+0x3a>
		/*  must write the scaler at least once to the device to ensure the scaler is in a known state. */
		status = VL6180x_UpscaleSetScaling(dev, _GetUpscale(dev));
 800148e:	4b09      	ldr	r3, [pc, #36]	; (80014b4 <VL6180x_UpscaleStaticInit+0x44>)
 8001490:	7e1a      	ldrb	r2, [r3, #24]
 8001492:	79fb      	ldrb	r3, [r7, #7]
 8001494:	4611      	mov	r1, r2
 8001496:	4618      	mov	r0, r3
 8001498:	f7ff ff6a 	bl	8001370 <VL6180x_UpscaleSetScaling>
 800149c:	60f8      	str	r0, [r7, #12]
		VL6180x_WrByte(dev, 0x016, 0x00); /* change fresh out of set status to 0 */
 800149e:	79fb      	ldrb	r3, [r7, #7]
 80014a0:	2200      	movs	r2, #0
 80014a2:	2116      	movs	r1, #22
 80014a4:	4618      	mov	r0, r3
 80014a6:	f001 f8f1 	bl	800268c <VL6180x_WrByte>
	}
	LOG_FUNCTION_END(status);
	return status;
 80014aa:	68fb      	ldr	r3, [r7, #12]
}
 80014ac:	4618      	mov	r0, r3
 80014ae:	3710      	adds	r7, #16
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}
 80014b4:	20000004 	.word	0x20000004

080014b8 <VL6180x_RangeConfigInterrupt>:
	LOG_FUNCTION_END(status);
	return status;
}

int VL6180x_RangeConfigInterrupt(VL6180xDev_t dev, uint8_t ConfigGpioInt)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b084      	sub	sp, #16
 80014bc:	af00      	add	r7, sp, #0
 80014be:	4603      	mov	r3, r0
 80014c0:	460a      	mov	r2, r1
 80014c2:	71fb      	strb	r3, [r7, #7]
 80014c4:	4613      	mov	r3, r2
 80014c6:	71bb      	strb	r3, [r7, #6]
	int status;

	if (ConfigGpioInt <= CONFIG_GPIO_INTERRUPT_NEW_SAMPLE_READY) {
 80014c8:	79bb      	ldrb	r3, [r7, #6]
 80014ca:	2b04      	cmp	r3, #4
 80014cc:	d807      	bhi.n	80014de <VL6180x_RangeConfigInterrupt+0x26>
		status = VL6180x_UpdateByte(dev, SYSTEM_INTERRUPT_CONFIG_GPIO,
 80014ce:	79bb      	ldrb	r3, [r7, #6]
 80014d0:	79f8      	ldrb	r0, [r7, #7]
 80014d2:	22f8      	movs	r2, #248	; 0xf8
 80014d4:	2114      	movs	r1, #20
 80014d6:	f001 f968 	bl	80027aa <VL6180x_UpdateByte>
 80014da:	60f8      	str	r0, [r7, #12]
 80014dc:	e002      	b.n	80014e4 <VL6180x_RangeConfigInterrupt+0x2c>
									(uint8_t)(~CONFIG_GPIO_RANGE_MASK),
									ConfigGpioInt);
	} else {
		VL6180x_ErrLog("Invalid config mode param %d", (int)ConfigGpioInt);
		status = INVALID_PARAMS;
 80014de:	f06f 0301 	mvn.w	r3, #1
 80014e2:	60fb      	str	r3, [r7, #12]
	}
	LOG_FUNCTION_END(status);
	return status;
 80014e4:	68fb      	ldr	r3, [r7, #12]
}
 80014e6:	4618      	mov	r0, r3
 80014e8:	3710      	adds	r7, #16
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}

080014ee <VL6180x_RangeSetEceState>:
	LOG_FUNCTION_END(status);
	return status;
}

int VL6180x_RangeSetEceState(VL6180xDev_t dev, int enable)
{
 80014ee:	b580      	push	{r7, lr}
 80014f0:	b084      	sub	sp, #16
 80014f2:	af00      	add	r7, sp, #0
 80014f4:	4603      	mov	r3, r0
 80014f6:	6039      	str	r1, [r7, #0]
 80014f8:	71fb      	strb	r3, [r7, #7]
	int status;
	uint8_t or_mask;

	LOG_FUNCTION_START("%d", (int)enable);
	if (enable)
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d002      	beq.n	8001506 <VL6180x_RangeSetEceState+0x18>
		or_mask = RANGE_CHECK_ECE_ENABLE_MASK;
 8001500:	2301      	movs	r3, #1
 8001502:	73fb      	strb	r3, [r7, #15]
 8001504:	e001      	b.n	800150a <VL6180x_RangeSetEceState+0x1c>
	else
		or_mask = 0;
 8001506:	2300      	movs	r3, #0
 8001508:	73fb      	strb	r3, [r7, #15]

	status = VL6180x_UpdateByte(dev, SYSRANGE_RANGE_CHECK_ENABLES, ~RANGE_CHECK_ECE_ENABLE_MASK, or_mask);
 800150a:	7bfb      	ldrb	r3, [r7, #15]
 800150c:	79f8      	ldrb	r0, [r7, #7]
 800150e:	22fe      	movs	r2, #254	; 0xfe
 8001510:	212d      	movs	r1, #45	; 0x2d
 8001512:	f001 f94a 	bl	80027aa <VL6180x_UpdateByte>
 8001516:	60b8      	str	r0, [r7, #8]
	LOG_FUNCTION_END(status);
	return status;
 8001518:	68bb      	ldr	r3, [r7, #8]
}
 800151a:	4618      	mov	r0, r3
 800151c:	3710      	adds	r7, #16
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}

08001522 <VL6180x_RangeSetMaxConvergenceTime>:


int VL6180x_RangeSetMaxConvergenceTime(VL6180xDev_t dev, uint8_t  MaxConTime_msec)
{
 8001522:	b580      	push	{r7, lr}
 8001524:	b084      	sub	sp, #16
 8001526:	af00      	add	r7, sp, #0
 8001528:	4603      	mov	r3, r0
 800152a:	460a      	mov	r2, r1
 800152c:	71fb      	strb	r3, [r7, #7]
 800152e:	4613      	mov	r3, r2
 8001530:	71bb      	strb	r3, [r7, #6]
	int status = 0;
 8001532:	2300      	movs	r3, #0
 8001534:	60fb      	str	r3, [r7, #12]
	LOG_FUNCTION_START("%d", (int)MaxConTime_msec);
	do {
		status = VL6180x_WrByte(dev, SYSRANGE_MAX_CONVERGENCE_TIME, MaxConTime_msec);
 8001536:	79ba      	ldrb	r2, [r7, #6]
 8001538:	79fb      	ldrb	r3, [r7, #7]
 800153a:	211c      	movs	r1, #28
 800153c:	4618      	mov	r0, r3
 800153e:	f001 f8a5 	bl	800268c <VL6180x_WrByte>
 8001542:	60f8      	str	r0, [r7, #12]
		if (status) {
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	2b00      	cmp	r3, #0
 8001548:	d10d      	bne.n	8001566 <VL6180x_RangeSetMaxConvergenceTime+0x44>
			break;
		}
		status = VL6180x_RangeSetEarlyConvergenceEestimateThreshold(dev);
 800154a:	79fb      	ldrb	r3, [r7, #7]
 800154c:	4618      	mov	r0, r3
 800154e:	f000 f82d 	bl	80015ac <VL6180x_RangeSetEarlyConvergenceEestimateThreshold>
 8001552:	60f8      	str	r0, [r7, #12]
		if (status) {
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	2b00      	cmp	r3, #0
 8001558:	d107      	bne.n	800156a <VL6180x_RangeSetMaxConvergenceTime+0x48>
			break;
		}
		status = _DMax_InitData(dev);
 800155a:	79fb      	ldrb	r3, [r7, #7]
 800155c:	4618      	mov	r0, r3
 800155e:	f000 ff8f 	bl	8002480 <_DMax_InitData>
 8001562:	60f8      	str	r0, [r7, #12]
 8001564:	e002      	b.n	800156c <VL6180x_RangeSetMaxConvergenceTime+0x4a>
			break;
 8001566:	bf00      	nop
 8001568:	e000      	b.n	800156c <VL6180x_RangeSetMaxConvergenceTime+0x4a>
			break;
 800156a:	bf00      	nop
	} while (0);
	LOG_FUNCTION_END(status);
	return status;
 800156c:	68fb      	ldr	r3, [r7, #12]
}
 800156e:	4618      	mov	r0, r3
 8001570:	3710      	adds	r7, #16
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}

08001576 <VL6180x_RangeSetSystemMode>:
	LOG_FUNCTION_END(status);
	return status;
}

int VL6180x_RangeSetSystemMode(VL6180xDev_t dev, uint8_t  mode)
{
 8001576:	b580      	push	{r7, lr}
 8001578:	b084      	sub	sp, #16
 800157a:	af00      	add	r7, sp, #0
 800157c:	4603      	mov	r3, r0
 800157e:	460a      	mov	r2, r1
 8001580:	71fb      	strb	r3, [r7, #7]
 8001582:	4613      	mov	r3, r2
 8001584:	71bb      	strb	r3, [r7, #6]
	LOG_FUNCTION_START("%d", (int)mode);
	/* FIXME we are not checking device is ready via @a VL6180x_RangeWaitDeviceReady
	 * so if called back to back real fast we are not checking
	 * if previous mode "set" got absorbed => bit 0 must be 0 so that it work
	 */
	if (mode <= 3) {
 8001586:	79bb      	ldrb	r3, [r7, #6]
 8001588:	2b03      	cmp	r3, #3
 800158a:	d807      	bhi.n	800159c <VL6180x_RangeSetSystemMode+0x26>
		status = VL6180x_WrByte(dev, SYSRANGE_START, mode);
 800158c:	79ba      	ldrb	r2, [r7, #6]
 800158e:	79fb      	ldrb	r3, [r7, #7]
 8001590:	2118      	movs	r1, #24
 8001592:	4618      	mov	r0, r3
 8001594:	f001 f87a 	bl	800268c <VL6180x_WrByte>
 8001598:	60f8      	str	r0, [r7, #12]
 800159a:	e002      	b.n	80015a2 <VL6180x_RangeSetSystemMode+0x2c>
		if (status) {
		    VL6180x_ErrLog("SYSRANGE_START wr fail");
		}
	} else {
		status = INVALID_PARAMS;
 800159c:	f06f 0301 	mvn.w	r3, #1
 80015a0:	60fb      	str	r3, [r7, #12]
	}
	LOG_FUNCTION_END(status);
	return status;
 80015a2:	68fb      	ldr	r3, [r7, #12]
}
 80015a4:	4618      	mov	r0, r3
 80015a6:	3710      	adds	r7, #16
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bd80      	pop	{r7, pc}

080015ac <VL6180x_RangeSetEarlyConvergenceEestimateThreshold>:
	return status;
}


static int VL6180x_RangeSetEarlyConvergenceEestimateThreshold(VL6180xDev_t dev)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b08e      	sub	sp, #56	; 0x38
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	4603      	mov	r3, r0
 80015b4:	71fb      	strb	r3, [r7, #7]
	int status;

	const uint32_t cMicroSecPerMilliSec  = 1000;
 80015b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015ba:	633b      	str	r3, [r7, #48]	; 0x30
	const uint32_t cEceSampleTime_us     = 500;
 80015bc:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80015c0:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t ece_factor_m          = VL6180xDevDataGet(dev, EceFactorM);
 80015c2:	4b29      	ldr	r3, [pc, #164]	; (8001668 <VL6180x_RangeSetEarlyConvergenceEestimateThreshold+0xbc>)
 80015c4:	891b      	ldrh	r3, [r3, #8]
 80015c6:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t ece_factor_d          = VL6180xDevDataGet(dev, EceFactorD);
 80015c8:	4b27      	ldr	r3, [pc, #156]	; (8001668 <VL6180x_RangeSetEarlyConvergenceEestimateThreshold+0xbc>)
 80015ca:	895b      	ldrh	r3, [r3, #10]
 80015cc:	627b      	str	r3, [r7, #36]	; 0x24
	int32_t AveTime;

	LOG_FUNCTION_START("");

	do {
		status = VL6180x_RdByte(dev, SYSRANGE_MAX_CONVERGENCE_TIME, &u8);
 80015ce:	f107 020f 	add.w	r2, r7, #15
 80015d2:	79fb      	ldrb	r3, [r7, #7]
 80015d4:	211c      	movs	r1, #28
 80015d6:	4618      	mov	r0, r3
 80015d8:	f001 f931 	bl	800283e <VL6180x_RdByte>
 80015dc:	6378      	str	r0, [r7, #52]	; 0x34
		if (status) {
 80015de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d139      	bne.n	8001658 <VL6180x_RangeSetEarlyConvergenceEestimateThreshold+0xac>
			VL6180x_ErrLog("SYSRANGE_MAX_CONVERGENCE_TIME rd fail");
			break;
		}
		maxConv_ms = u8;
 80015e4:	7bfb      	ldrb	r3, [r7, #15]
 80015e6:	623b      	str	r3, [r7, #32]
		AveTime = _GetAveTotalTime(dev);
 80015e8:	79fb      	ldrb	r3, [r7, #7]
 80015ea:	4618      	mov	r0, r3
 80015ec:	f000 f83e 	bl	800166c <_GetAveTotalTime>
 80015f0:	61f8      	str	r0, [r7, #28]
		if (AveTime < 0) {
 80015f2:	69fb      	ldr	r3, [r7, #28]
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	da03      	bge.n	8001600 <VL6180x_RangeSetEarlyConvergenceEestimateThreshold+0x54>
			status = -1;
 80015f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80015fc:	637b      	str	r3, [r7, #52]	; 0x34
			break;
 80015fe:	e02e      	b.n	800165e <VL6180x_RangeSetEarlyConvergenceEestimateThreshold+0xb2>
		}

		convergTime_us = maxConv_ms * cMicroSecPerMilliSec - AveTime;
 8001600:	6a3b      	ldr	r3, [r7, #32]
 8001602:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001604:	fb03 f202 	mul.w	r2, r3, r2
 8001608:	69fb      	ldr	r3, [r7, #28]
 800160a:	1ad3      	subs	r3, r2, r3
 800160c:	61bb      	str	r3, [r7, #24]
		status = VL6180x_RdDWord(dev, 0xB8, &fineThresh);
 800160e:	f107 0210 	add.w	r2, r7, #16
 8001612:	79fb      	ldrb	r3, [r7, #7]
 8001614:	21b8      	movs	r1, #184	; 0xb8
 8001616:	4618      	mov	r0, r3
 8001618:	f001 f980 	bl	800291c <VL6180x_RdDWord>
 800161c:	6378      	str	r0, [r7, #52]	; 0x34
		if (status) {
 800161e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001620:	2b00      	cmp	r3, #0
 8001622:	d11b      	bne.n	800165c <VL6180x_RangeSetEarlyConvergenceEestimateThreshold+0xb0>
			VL6180x_ErrLog("reg 0xB8 rd fail");
			break;
		}
		fineThresh *= 256;
 8001624:	693b      	ldr	r3, [r7, #16]
 8001626:	021b      	lsls	r3, r3, #8
 8001628:	613b      	str	r3, [r7, #16]
		eceThresh = ece_factor_m * cEceSampleTime_us * fineThresh / (convergTime_us * ece_factor_d);
 800162a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800162c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800162e:	fb02 f303 	mul.w	r3, r2, r3
 8001632:	693a      	ldr	r2, [r7, #16]
 8001634:	fb03 f202 	mul.w	r2, r3, r2
 8001638:	69bb      	ldr	r3, [r7, #24]
 800163a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800163c:	fb01 f303 	mul.w	r3, r1, r3
 8001640:	fbb2 f3f3 	udiv	r3, r2, r3
 8001644:	617b      	str	r3, [r7, #20]

		status = VL6180x_WrWord(dev, SYSRANGE_EARLY_CONVERGENCE_ESTIMATE, (uint16_t)eceThresh);
 8001646:	697b      	ldr	r3, [r7, #20]
 8001648:	b29a      	uxth	r2, r3
 800164a:	79fb      	ldrb	r3, [r7, #7]
 800164c:	2122      	movs	r1, #34	; 0x22
 800164e:	4618      	mov	r0, r3
 8001650:	f001 f843 	bl	80026da <VL6180x_WrWord>
 8001654:	6378      	str	r0, [r7, #52]	; 0x34
 8001656:	e002      	b.n	800165e <VL6180x_RangeSetEarlyConvergenceEestimateThreshold+0xb2>
			break;
 8001658:	bf00      	nop
 800165a:	e000      	b.n	800165e <VL6180x_RangeSetEarlyConvergenceEestimateThreshold+0xb2>
			break;
 800165c:	bf00      	nop
	} while (0);

	LOG_FUNCTION_END(status);
	return status;
 800165e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8001660:	4618      	mov	r0, r3
 8001662:	3738      	adds	r7, #56	; 0x38
 8001664:	46bd      	mov	sp, r7
 8001666:	bd80      	pop	{r7, pc}
 8001668:	20000004 	.word	0x20000004

0800166c <_GetAveTotalTime>:
/*
 * Return >0 = time
 *       <0 1 if fail to get read data from device to compute time
 */
static int32_t _GetAveTotalTime(VL6180xDev_t dev)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b08c      	sub	sp, #48	; 0x30
 8001670:	af00      	add	r7, sp, #0
 8001672:	4603      	mov	r3, r0
 8001674:	71fb      	strb	r3, [r7, #7]
	uint32_t cFwOverhead_us = 24;
 8001676:	2318      	movs	r3, #24
 8001678:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t cVcpSetupTime_us = 70;
 800167a:	2346      	movs	r3, #70	; 0x46
 800167c:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t cPLL2_StartupDelay_us = 200;
 800167e:	23c8      	movs	r3, #200	; 0xc8
 8001680:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t cMeasMask = 0x07;
 8001682:	2307      	movs	r3, #7
 8001684:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint8_t u8;
	int status;

	LOG_FUNCTION_START("");

	status = VL6180x_RdByte(dev, 0x109, &u8);
 8001688:	f107 020b 	add.w	r2, r7, #11
 800168c:	79fb      	ldrb	r3, [r7, #7]
 800168e:	f240 1109 	movw	r1, #265	; 0x109
 8001692:	4618      	mov	r0, r3
 8001694:	f001 f8d3 	bl	800283e <VL6180x_RdByte>
 8001698:	61f8      	str	r0, [r7, #28]
	if (status) {
 800169a:	69fb      	ldr	r3, [r7, #28]
 800169c:	2b00      	cmp	r3, #0
 800169e:	d002      	beq.n	80016a6 <_GetAveTotalTime+0x3a>
		VL6180x_ErrLog("rd 0x109 fail");
		return -1;
 80016a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80016a4:	e029      	b.n	80016fa <_GetAveTotalTime+0x8e>
	}
	Samples = u8 & cMeasMask;
 80016a6:	7afa      	ldrb	r2, [r7, #11]
 80016a8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80016ac:	4013      	ands	r3, r2
 80016ae:	b2db      	uxtb	r3, r3
 80016b0:	61bb      	str	r3, [r7, #24]
	status = VL6180x_RdByte(dev, READOUT_AVERAGING_SAMPLE_PERIOD, &u8);
 80016b2:	f107 020b 	add.w	r2, r7, #11
 80016b6:	79fb      	ldrb	r3, [r7, #7]
 80016b8:	f44f 7185 	mov.w	r1, #266	; 0x10a
 80016bc:	4618      	mov	r0, r3
 80016be:	f001 f8be 	bl	800283e <VL6180x_RdByte>
 80016c2:	61f8      	str	r0, [r7, #28]
	if (status) {
 80016c4:	69fb      	ldr	r3, [r7, #28]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d002      	beq.n	80016d0 <_GetAveTotalTime+0x64>
		VL6180x_ErrLog("i2c READOUT_AVERAGING_SAMPLE_PERIOD fail");
		return -1;
 80016ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80016ce:	e014      	b.n	80016fa <_GetAveTotalTime+0x8e>
	}
	SamplePeriod = u8;
 80016d0:	7afb      	ldrb	r3, [r7, #11]
 80016d2:	617b      	str	r3, [r7, #20]
	SingleTime_us = cFwOverhead_us + cVcpSetupTime_us + (SamplePeriod * 10);
 80016d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80016d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016d8:	18d1      	adds	r1, r2, r3
 80016da:	697a      	ldr	r2, [r7, #20]
 80016dc:	4613      	mov	r3, r2
 80016de:	009b      	lsls	r3, r3, #2
 80016e0:	4413      	add	r3, r2
 80016e2:	005b      	lsls	r3, r3, #1
 80016e4:	440b      	add	r3, r1
 80016e6:	613b      	str	r3, [r7, #16]
	TotalAveTime_us = (Samples + 1) * SingleTime_us + cPLL2_StartupDelay_us;
 80016e8:	69bb      	ldr	r3, [r7, #24]
 80016ea:	3301      	adds	r3, #1
 80016ec:	693a      	ldr	r2, [r7, #16]
 80016ee:	fb03 f202 	mul.w	r2, r3, r2
 80016f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016f4:	4413      	add	r3, r2
 80016f6:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_END(TotalAveTime_us);
	return TotalAveTime_us;
 80016f8:	68fb      	ldr	r3, [r7, #12]
}
 80016fa:	4618      	mov	r0, r3
 80016fc:	3730      	adds	r7, #48	; 0x30
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}
	...

08001704 <_filter_Init>:
#define _FilterData(field) VL6180xDevDataGet(dev, FilterData.field)
/*
 * One time init
 */
int _filter_Init(VL6180xDev_t dev)
{
 8001704:	b480      	push	{r7}
 8001706:	b085      	sub	sp, #20
 8001708:	af00      	add	r7, sp, #0
 800170a:	4603      	mov	r3, r0
 800170c:	71fb      	strb	r3, [r7, #7]
	int i;
	_FilterData(MeasurementIndex) = 0;
 800170e:	4b1d      	ldr	r3, [pc, #116]	; (8001784 <_filter_Init+0x80>)
 8001710:	2200      	movs	r2, #0
 8001712:	61da      	str	r2, [r3, #28]

	_FilterData(Default_ZeroVal) = 0;
 8001714:	4b1b      	ldr	r3, [pc, #108]	; (8001784 <_filter_Init+0x80>)
 8001716:	2200      	movs	r2, #0
 8001718:	665a      	str	r2, [r3, #100]	; 0x64
	_FilterData(Default_VAVGVal) = 0;
 800171a:	4b1a      	ldr	r3, [pc, #104]	; (8001784 <_filter_Init+0x80>)
 800171c:	2200      	movs	r2, #0
 800171e:	669a      	str	r2, [r3, #104]	; 0x68
	_FilterData(NoDelay_ZeroVal) = 0;
 8001720:	4b18      	ldr	r3, [pc, #96]	; (8001784 <_filter_Init+0x80>)
 8001722:	2200      	movs	r2, #0
 8001724:	66da      	str	r2, [r3, #108]	; 0x6c
	_FilterData(NoDelay_VAVGVal) = 0;
 8001726:	4b17      	ldr	r3, [pc, #92]	; (8001784 <_filter_Init+0x80>)
 8001728:	2200      	movs	r2, #0
 800172a:	671a      	str	r2, [r3, #112]	; 0x70
	_FilterData(Previous_VAVGDiff) = 0;
 800172c:	4b15      	ldr	r3, [pc, #84]	; (8001784 <_filter_Init+0x80>)
 800172e:	2200      	movs	r2, #0
 8001730:	675a      	str	r2, [r3, #116]	; 0x74

	_FilterData(StdFilteredReads) = 0;
 8001732:	4b14      	ldr	r3, [pc, #80]	; (8001784 <_filter_Init+0x80>)
 8001734:	2200      	movs	r2, #0
 8001736:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
	_FilterData(FilteringOnGoingConsecutiveStates) = 0;
 800173a:	4b12      	ldr	r3, [pc, #72]	; (8001784 <_filter_Init+0x80>)
 800173c:	2200      	movs	r2, #0
 800173e:	679a      	str	r2, [r3, #120]	; 0x78

	for (i = 0; i < FILTER_NBOF_SAMPLES; i++) {
 8001740:	2300      	movs	r3, #0
 8001742:	60fb      	str	r3, [r7, #12]
 8001744:	e011      	b.n	800176a <_filter_Init+0x66>
		_FilterData(LastTrueRange)[i] = FILTER_INVALID_DISTANCE;
 8001746:	4a0f      	ldr	r2, [pc, #60]	; (8001784 <_filter_Init+0x80>)
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	3310      	adds	r3, #16
 800174c:	005b      	lsls	r3, r3, #1
 800174e:	4413      	add	r3, r2
 8001750:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001754:	809a      	strh	r2, [r3, #4]
		_FilterData(LastReturnRates)[i] = 0;
 8001756:	4a0b      	ldr	r2, [pc, #44]	; (8001784 <_filter_Init+0x80>)
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	330c      	adds	r3, #12
 800175c:	009b      	lsls	r3, r3, #2
 800175e:	4413      	add	r3, r2
 8001760:	2200      	movs	r2, #0
 8001762:	609a      	str	r2, [r3, #8]
	for (i = 0; i < FILTER_NBOF_SAMPLES; i++) {
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	3301      	adds	r3, #1
 8001768:	60fb      	str	r3, [r7, #12]
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	2b09      	cmp	r3, #9
 800176e:	ddea      	ble.n	8001746 <_filter_Init+0x42>
	}
	_FilterData(MeasurementsSinceLastFlush)=0;
 8001770:	4b04      	ldr	r3, [pc, #16]	; (8001784 <_filter_Init+0x80>)
 8001772:	2200      	movs	r2, #0
 8001774:	621a      	str	r2, [r3, #32]
	return 0;
 8001776:	2300      	movs	r3, #0
}
 8001778:	4618      	mov	r0, r3
 800177a:	3714      	adds	r7, #20
 800177c:	46bd      	mov	sp, r7
 800177e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001782:	4770      	bx	lr
 8001784:	20000004 	.word	0x20000004

08001788 <_filter_StdDevDamper>:
									uint32_t SignalRate,
									const uint32_t StdDevLimitLowLight,
									const uint32_t StdDevLimitLowLightSNR,
									const uint32_t StdDevLimitHighLight,
									const uint32_t StdDevLimitHighLightSNR)
{
 8001788:	b480      	push	{r7}
 800178a:	b087      	sub	sp, #28
 800178c:	af00      	add	r7, sp, #0
 800178e:	60f8      	str	r0, [r7, #12]
 8001790:	60b9      	str	r1, [r7, #8]
 8001792:	607a      	str	r2, [r7, #4]
 8001794:	603b      	str	r3, [r7, #0]
	uint32_t newStdDev;
	uint16_t SNR;

	if (AmbientRate > 0)
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	2b00      	cmp	r3, #0
 800179a:	d008      	beq.n	80017ae <_filter_StdDevDamper+0x26>
		SNR = (uint16_t) ((100 * SignalRate) / AmbientRate);
 800179c:	68bb      	ldr	r3, [r7, #8]
 800179e:	2264      	movs	r2, #100	; 0x64
 80017a0:	fb03 f202 	mul.w	r2, r3, r2
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80017aa:	827b      	strh	r3, [r7, #18]
 80017ac:	e002      	b.n	80017b4 <_filter_StdDevDamper+0x2c>
	else
		SNR = 9999;
 80017ae:	f242 730f 	movw	r3, #9999	; 0x270f
 80017b2:	827b      	strh	r3, [r7, #18]

	if (SNR >= StdDevLimitLowLightSNR) {
 80017b4:	8a7b      	ldrh	r3, [r7, #18]
 80017b6:	683a      	ldr	r2, [r7, #0]
 80017b8:	429a      	cmp	r2, r3
 80017ba:	d802      	bhi.n	80017c2 <_filter_StdDevDamper+0x3a>
		newStdDev = StdDevLimitLowLight;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	617b      	str	r3, [r7, #20]
 80017c0:	e016      	b.n	80017f0 <_filter_StdDevDamper+0x68>
	} else {
		if (SNR <= StdDevLimitHighLightSNR)
 80017c2:	8a7b      	ldrh	r3, [r7, #18]
 80017c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017c6:	429a      	cmp	r2, r3
 80017c8:	d302      	bcc.n	80017d0 <_filter_StdDevDamper+0x48>
			newStdDev = StdDevLimitHighLight;
 80017ca:	6a3b      	ldr	r3, [r7, #32]
 80017cc:	617b      	str	r3, [r7, #20]
 80017ce:	e00f      	b.n	80017f0 <_filter_StdDevDamper+0x68>
		else {
			newStdDev = (uint32_t)(StdDevLimitHighLight -
									(SNR - StdDevLimitHighLightSNR) *
 80017d0:	8a7a      	ldrh	r2, [r7, #18]
 80017d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017d4:	1ad3      	subs	r3, r2, r3
									(StdDevLimitHighLight - StdDevLimitLowLight) /
 80017d6:	6a39      	ldr	r1, [r7, #32]
 80017d8:	687a      	ldr	r2, [r7, #4]
 80017da:	1a8a      	subs	r2, r1, r2
									(SNR - StdDevLimitHighLightSNR) *
 80017dc:	fb03 f202 	mul.w	r2, r3, r2
									(StdDevLimitLowLightSNR - StdDevLimitHighLightSNR));
 80017e0:	6839      	ldr	r1, [r7, #0]
 80017e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017e4:	1acb      	subs	r3, r1, r3
									(StdDevLimitHighLight - StdDevLimitLowLight) /
 80017e6:	fbb2 f3f3 	udiv	r3, r2, r3
			newStdDev = (uint32_t)(StdDevLimitHighLight -
 80017ea:	6a3a      	ldr	r2, [r7, #32]
 80017ec:	1ad3      	subs	r3, r2, r3
 80017ee:	617b      	str	r3, [r7, #20]
		}
	}

	return newStdDev;
 80017f0:	697b      	ldr	r3, [r7, #20]
}
 80017f2:	4618      	mov	r0, r3
 80017f4:	371c      	adds	r7, #28
 80017f6:	46bd      	mov	sp, r7
 80017f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fc:	4770      	bx	lr
	...

08001800 <_filter_Start>:
								uint16_t m_trueRange_mm,
								uint16_t m_rawRange_mm,
								uint32_t m_rtnSignalRate,
								uint32_t m_rtnAmbientRate,
								uint16_t errorCode)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b0aa      	sub	sp, #168	; 0xa8
 8001804:	af02      	add	r7, sp, #8
 8001806:	607b      	str	r3, [r7, #4]
 8001808:	4603      	mov	r3, r0
 800180a:	73fb      	strb	r3, [r7, #15]
 800180c:	460b      	mov	r3, r1
 800180e:	81bb      	strh	r3, [r7, #12]
 8001810:	4613      	mov	r3, r2
 8001812:	817b      	strh	r3, [r7, #10]
	int status;
	uint16_t m_newTrueRange_mm = 0;
 8001814:	2300      	movs	r3, #0
 8001816:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
	#if VL6180x_HAVE_MULTI_READ
	uint8_t MultiReadBuf[8];
	#endif
	uint16_t i;
	uint16_t bypassFilter = 0;
 800181a:	2300      	movs	r3, #0
 800181c:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
	uint16_t resetVAVGData = 1;
 8001820:	2301      	movs	r3, #1
 8001822:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98

	uint16_t filterErrorCode = NoError;
 8001826:	2300      	movs	r3, #0
 8001828:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
	uint16_t filterErrorCodeOnRangingErrorCode = NoError;
 800182c:	2300      	movs	r3, #0
 800182e:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
	uint16_t registerValue;

	uint32_t register32BitsValue1;
	uint32_t register32BitsValue2;

	uint16_t ValidDistance = 0;
 8001832:	2300      	movs	r3, #0
 8001834:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
	uint16_t SuspicuousRangingZone = 0;
 8001838:	2300      	movs	r3, #0
 800183a:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90

	uint16_t WrapAroundFlag = 0;
 800183e:	2300      	movs	r3, #0
 8001840:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
	uint16_t NoWrapAroundFlag = 0;
 8001844:	2300      	movs	r3, #0
 8001846:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
	uint16_t NoWrapAroundHighConfidenceFlag = 0;
 800184a:	2300      	movs	r3, #0
 800184c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	uint16_t FlushFilter = 0;
 8001850:	2300      	movs	r3, #0
 8001852:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
	uint32_t RateChange = 0;
 8001856:	2300      	movs	r3, #0
 8001858:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

	uint16_t StdDevSamplesMinNeeded = 0;
 800185c:	2300      	movs	r3, #0
 800185e:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
	uint16_t StdDevSamples = 0;
 8001862:	2300      	movs	r3, #0
 8001864:	f8a7 3080 	strh.w	r3, [r7, #128]	; 0x80
	uint32_t StdDevDistanceSum = 0;
 8001868:	2300      	movs	r3, #0
 800186a:	67fb      	str	r3, [r7, #124]	; 0x7c
	uint32_t StdDevDistanceMean = 0;
 800186c:	2300      	movs	r3, #0
 800186e:	67bb      	str	r3, [r7, #120]	; 0x78
	uint32_t StdDevDistance = 0;
 8001870:	2300      	movs	r3, #0
 8001872:	677b      	str	r3, [r7, #116]	; 0x74
	uint32_t StdDevRateSum = 0;
 8001874:	2300      	movs	r3, #0
 8001876:	673b      	str	r3, [r7, #112]	; 0x70
	uint32_t StdDevRateMean = 0;
 8001878:	2300      	movs	r3, #0
 800187a:	66fb      	str	r3, [r7, #108]	; 0x6c
	uint32_t StdDevRate = 0;
 800187c:	2300      	movs	r3, #0
 800187e:	66bb      	str	r3, [r7, #104]	; 0x68
	uint32_t StdDevLimitWithTargetMove = 0;
 8001880:	2300      	movs	r3, #0
 8001882:	667b      	str	r3, [r7, #100]	; 0x64
	uint32_t WrapAroundLowReturnRateLimit;
	uint32_t WrapAroundLowReturnRateLimit2;
	uint32_t WrapAroundLowReturnRateFilterLimit;
	uint32_t WrapAroundHighReturnRateFilterLimit;

	uint32_t MAX_VAVGDiff = 1800;
 8001884:	f44f 63e1 	mov.w	r3, #1800	; 0x708
 8001888:	657b      	str	r3, [r7, #84]	; 0x54

	uint8_t u8;//, u8_2;
	uint32_t XTalkCompRate_KCps;
	uint32_t StdDevLimit = 300;
 800188a:	f44f 7396 	mov.w	r3, #300	; 0x12c
 800188e:	653b      	str	r3, [r7, #80]	; 0x50
	uint32_t MaxOrInvalidDistance =   255*_GetUpscale(dev);
 8001890:	4ba5      	ldr	r3, [pc, #660]	; (8001b28 <_filter_Start+0x328>)
 8001892:	7e1b      	ldrb	r3, [r3, #24]
 8001894:	461a      	mov	r2, r3
 8001896:	4613      	mov	r3, r2
 8001898:	021b      	lsls	r3, r3, #8
 800189a:	1a9b      	subs	r3, r3, r2
 800189c:	64fb      	str	r3, [r7, #76]	; 0x4c
	/* #define MaxOrInvalidDistance  (uint16_t) (255 * 3) */

	/* Check if distance is Valid or not */
	switch (errorCode) {
 800189e:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 80018a2:	3b0c      	subs	r3, #12
 80018a4:	2b03      	cmp	r3, #3
 80018a6:	d826      	bhi.n	80018f6 <_filter_Start+0xf6>
 80018a8:	a201      	add	r2, pc, #4	; (adr r2, 80018b0 <_filter_Start+0xb0>)
 80018aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018ae:	bf00      	nop
 80018b0:	080018c1 	.word	0x080018c1
 80018b4:	080018cf 	.word	0x080018cf
 80018b8:	080018c1 	.word	0x080018c1
 80018bc:	080018cf 	.word	0x080018cf
	case Raw_Ranging_Algo_Underflow:
	case Ranging_Algo_Underflow:
		filterErrorCodeOnRangingErrorCode = RangingFiltered; /* If we have to go through filter, mean we have here a wraparound case */
 80018c0:	2310      	movs	r3, #16
 80018c2:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
		ValidDistance = 0;
 80018c6:	2300      	movs	r3, #0
 80018c8:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
		break;
 80018cc:	e022      	b.n	8001914 <_filter_Start+0x114>
	case Raw_Ranging_Algo_Overflow:
	case Ranging_Algo_Overflow:
		filterErrorCodeOnRangingErrorCode = RangingFiltered; /* If we have to go through filter, mean we have here a wraparound case */
 80018ce:	2310      	movs	r3, #16
 80018d0:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
		//m_trueRange_mm = MaxOrInvalidDistance;
		m_trueRange_mm = 200*_GetUpscale(dev);
 80018d4:	4b94      	ldr	r3, [pc, #592]	; (8001b28 <_filter_Start+0x328>)
 80018d6:	7e1b      	ldrb	r3, [r3, #24]
 80018d8:	b29b      	uxth	r3, r3
 80018da:	461a      	mov	r2, r3
 80018dc:	0092      	lsls	r2, r2, #2
 80018de:	4413      	add	r3, r2
 80018e0:	461a      	mov	r2, r3
 80018e2:	0091      	lsls	r1, r2, #2
 80018e4:	461a      	mov	r2, r3
 80018e6:	460b      	mov	r3, r1
 80018e8:	4413      	add	r3, r2
 80018ea:	00db      	lsls	r3, r3, #3
 80018ec:	81bb      	strh	r3, [r7, #12]
		ValidDistance = 1;
 80018ee:	2301      	movs	r3, #1
 80018f0:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
		break;
 80018f4:	e00e      	b.n	8001914 <_filter_Start+0x114>
	default:
		if (m_rawRange_mm >= MaxOrInvalidDistance) {
 80018f6:	897b      	ldrh	r3, [r7, #10]
 80018f8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80018fa:	429a      	cmp	r2, r3
 80018fc:	d806      	bhi.n	800190c <_filter_Start+0x10c>
			ValidDistance = 0;
 80018fe:	2300      	movs	r3, #0
 8001900:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
			bypassFilter = 1; /* Bypass the filter in this case as produced distance is not usable (and also the VAVGVal and ZeroVal values) */
 8001904:	2301      	movs	r3, #1
 8001906:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
		} else {
			ValidDistance = 1;
		}
		break;
 800190a:	e002      	b.n	8001912 <_filter_Start+0x112>
			ValidDistance = 1;
 800190c:	2301      	movs	r3, #1
 800190e:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
		break;
 8001912:	bf00      	nop
	}
	m_newTrueRange_mm = m_trueRange_mm;
 8001914:	89bb      	ldrh	r3, [r7, #12]
 8001916:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e

	XTalkCompRate_KCps = VL6180xDevDataGet(dev, XTalkCompRate_KCps);
 800191a:	4b83      	ldr	r3, [pc, #524]	; (8001b28 <_filter_Start+0x328>)
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	64bb      	str	r3, [r7, #72]	; 0x48

	/* Update signal rate limits depending on crosstalk */
	SignalRateDMax = (uint32_t)_GetDMaxDataRetSignalAt400mm(dev) ;
 8001920:	4b81      	ldr	r3, [pc, #516]	; (8001b28 <_filter_Start+0x328>)
 8001922:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001926:	647b      	str	r3, [r7, #68]	; 0x44
	WrapAroundLowReturnRateLimit = WrapAroundLowReturnRateLimit_ROM  + XTalkCompRate_KCps;
 8001928:	4b80      	ldr	r3, [pc, #512]	; (8001b2c <_filter_Start+0x32c>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800192e:	4413      	add	r3, r2
 8001930:	643b      	str	r3, [r7, #64]	; 0x40
	WrapAroundLowReturnRateLimit2 = ((WrapAroundLowReturnRateLimit2_ROM *
 8001932:	4b7f      	ldr	r3, [pc, #508]	; (8001b30 <_filter_Start+0x330>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001938:	fb02 f303 	mul.w	r3, r2, r3
									SignalRateDMax) / 312) +
 800193c:	08db      	lsrs	r3, r3, #3
 800193e:	4a7d      	ldr	r2, [pc, #500]	; (8001b34 <_filter_Start+0x334>)
 8001940:	fba2 2303 	umull	r2, r3, r2, r3
 8001944:	089b      	lsrs	r3, r3, #2
	WrapAroundLowReturnRateLimit2 = ((WrapAroundLowReturnRateLimit2_ROM *
 8001946:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001948:	4413      	add	r3, r2
 800194a:	63fb      	str	r3, [r7, #60]	; 0x3c
									XTalkCompRate_KCps;
	WrapAroundLowReturnRateFilterLimit = ((WrapAroundLowReturnRateFilterLimit_ROM *
 800194c:	4b7a      	ldr	r3, [pc, #488]	; (8001b38 <_filter_Start+0x338>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001952:	fb02 f303 	mul.w	r3, r2, r3
									SignalRateDMax) / 312) + XTalkCompRate_KCps;
 8001956:	08db      	lsrs	r3, r3, #3
 8001958:	4a76      	ldr	r2, [pc, #472]	; (8001b34 <_filter_Start+0x334>)
 800195a:	fba2 2303 	umull	r2, r3, r2, r3
 800195e:	089b      	lsrs	r3, r3, #2
	WrapAroundLowReturnRateFilterLimit = ((WrapAroundLowReturnRateFilterLimit_ROM *
 8001960:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001962:	4413      	add	r3, r2
 8001964:	63bb      	str	r3, [r7, #56]	; 0x38
	WrapAroundHighReturnRateFilterLimit = ((WrapAroundHighReturnRateFilterLimit_ROM *
 8001966:	4b75      	ldr	r3, [pc, #468]	; (8001b3c <_filter_Start+0x33c>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800196c:	fb02 f303 	mul.w	r3, r2, r3
									SignalRateDMax) / 312) + XTalkCompRate_KCps;
 8001970:	08db      	lsrs	r3, r3, #3
 8001972:	4a70      	ldr	r2, [pc, #448]	; (8001b34 <_filter_Start+0x334>)
 8001974:	fba2 2303 	umull	r2, r3, r2, r3
 8001978:	089b      	lsrs	r3, r3, #2
	WrapAroundHighReturnRateFilterLimit = ((WrapAroundHighReturnRateFilterLimit_ROM *
 800197a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800197c:	4413      	add	r3, r2
 800197e:	637b      	str	r3, [r7, #52]	; 0x34


	/* Checks on low range data */
	if ((m_rawRange_mm < WrapAroundLowRawRangeLimit) && (m_rtnSignalRate < WrapAroundLowReturnRateLimit)) {
 8001980:	4b6f      	ldr	r3, [pc, #444]	; (8001b40 <_filter_Start+0x340>)
 8001982:	881b      	ldrh	r3, [r3, #0]
 8001984:	897a      	ldrh	r2, [r7, #10]
 8001986:	429a      	cmp	r2, r3
 8001988:	d209      	bcs.n	800199e <_filter_Start+0x19e>
 800198a:	687a      	ldr	r2, [r7, #4]
 800198c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800198e:	429a      	cmp	r2, r3
 8001990:	d205      	bcs.n	800199e <_filter_Start+0x19e>
		filterErrorCode = RangingFiltered; /* On this condition, wraparound case is ensured */
 8001992:	2310      	movs	r3, #16
 8001994:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
		bypassFilter = 1;
 8001998:	2301      	movs	r3, #1
 800199a:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
	}
	if ((m_rawRange_mm < WrapAroundLowRawRangeLimit2) && (m_rtnSignalRate < WrapAroundLowReturnRateLimit2)) {
 800199e:	4b69      	ldr	r3, [pc, #420]	; (8001b44 <_filter_Start+0x344>)
 80019a0:	881b      	ldrh	r3, [r3, #0]
 80019a2:	897a      	ldrh	r2, [r7, #10]
 80019a4:	429a      	cmp	r2, r3
 80019a6:	d209      	bcs.n	80019bc <_filter_Start+0x1bc>
 80019a8:	687a      	ldr	r2, [r7, #4]
 80019aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80019ac:	429a      	cmp	r2, r3
 80019ae:	d205      	bcs.n	80019bc <_filter_Start+0x1bc>
		filterErrorCode = RangingFiltered; /* On this condition, wraparound case is ensured */
 80019b0:	2310      	movs	r3, #16
 80019b2:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
		bypassFilter = 1;
 80019b6:	2301      	movs	r3, #1
 80019b8:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
	}
	if ((m_rawRange_mm < WrapAroundLowRawRangeLimit2) && (m_rtnSignalRate < (WrapAroundLowReturnRateLimit2 + WrapAroundLowRawRangeLimit2SuspicuousAddedSignalRate))) {
 80019bc:	4b61      	ldr	r3, [pc, #388]	; (8001b44 <_filter_Start+0x344>)
 80019be:	881b      	ldrh	r3, [r3, #0]
 80019c0:	897a      	ldrh	r2, [r7, #10]
 80019c2:	429a      	cmp	r2, r3
 80019c4:	d209      	bcs.n	80019da <_filter_Start+0x1da>
 80019c6:	4b60      	ldr	r3, [pc, #384]	; (8001b48 <_filter_Start+0x348>)
 80019c8:	681a      	ldr	r2, [r3, #0]
 80019ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80019cc:	4413      	add	r3, r2
 80019ce:	687a      	ldr	r2, [r7, #4]
 80019d0:	429a      	cmp	r2, r3
 80019d2:	d202      	bcs.n	80019da <_filter_Start+0x1da>
		SuspicuousRangingZone = 1; /* On this area, we are in an highly suspicuous wraparound ares, filter parameter will be stengthen */
 80019d4:	2301      	movs	r3, #1
 80019d6:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
	}


	/* Checks on Ambient rate level */
	if (m_rtnAmbientRate > WrapAroundMaximumAmbientRateFilterLimit) {
 80019da:	4b5c      	ldr	r3, [pc, #368]	; (8001b4c <_filter_Start+0x34c>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80019e2:	429a      	cmp	r2, r3
 80019e4:	d905      	bls.n	80019f2 <_filter_Start+0x1f2>
		/* Too high ambient rate */
		FlushFilter = 1;
 80019e6:	2301      	movs	r3, #1
 80019e8:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
		bypassFilter = 1;
 80019ec:	2301      	movs	r3, #1
 80019ee:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
	}
    
	/*  Checks on Filter flush */
	if (m_rtnSignalRate < MinReturnRateFilterFlush) {
 80019f2:	4b57      	ldr	r3, [pc, #348]	; (8001b50 <_filter_Start+0x350>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	687a      	ldr	r2, [r7, #4]
 80019f8:	429a      	cmp	r2, r3
 80019fa:	d205      	bcs.n	8001a08 <_filter_Start+0x208>
		/* Completely lost target, so flush the filter */
		FlushFilter = 1;
 80019fc:	2301      	movs	r3, #1
 80019fe:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
		bypassFilter = 1;
 8001a02:	2301      	movs	r3, #1
 8001a04:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
	}
	if (_FilterData(LastReturnRates)[0] != 0) {
 8001a08:	4b47      	ldr	r3, [pc, #284]	; (8001b28 <_filter_Start+0x328>)
 8001a0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d020      	beq.n	8001a52 <_filter_Start+0x252>
		if (m_rtnSignalRate > _FilterData(LastReturnRates)[0])
 8001a10:	4b45      	ldr	r3, [pc, #276]	; (8001b28 <_filter_Start+0x328>)
 8001a12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a14:	687a      	ldr	r2, [r7, #4]
 8001a16:	429a      	cmp	r2, r3
 8001a18:	d90d      	bls.n	8001a36 <_filter_Start+0x236>
			RateChange = (100 *
						(m_rtnSignalRate - _FilterData(LastReturnRates)[0])) /
 8001a1a:	4b43      	ldr	r3, [pc, #268]	; (8001b28 <_filter_Start+0x328>)
 8001a1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a1e:	687a      	ldr	r2, [r7, #4]
 8001a20:	1ad3      	subs	r3, r2, r3
			RateChange = (100 *
 8001a22:	2264      	movs	r2, #100	; 0x64
 8001a24:	fb03 f202 	mul.w	r2, r3, r2
						_FilterData(LastReturnRates)[0];
 8001a28:	4b3f      	ldr	r3, [pc, #252]	; (8001b28 <_filter_Start+0x328>)
 8001a2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
			RateChange = (100 *
 8001a2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a30:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001a34:	e010      	b.n	8001a58 <_filter_Start+0x258>
		else
			RateChange = (100 *
						(_FilterData(LastReturnRates)[0] - m_rtnSignalRate)) /
 8001a36:	4b3c      	ldr	r3, [pc, #240]	; (8001b28 <_filter_Start+0x328>)
 8001a38:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	1ad3      	subs	r3, r2, r3
			RateChange = (100 *
 8001a3e:	2264      	movs	r2, #100	; 0x64
 8001a40:	fb03 f202 	mul.w	r2, r3, r2
						_FilterData(LastReturnRates)[0];
 8001a44:	4b38      	ldr	r3, [pc, #224]	; (8001b28 <_filter_Start+0x328>)
 8001a46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
			RateChange = (100 *
 8001a48:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a4c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001a50:	e002      	b.n	8001a58 <_filter_Start+0x258>
	} else
		RateChange = 0;
 8001a52:	2300      	movs	r3, #0
 8001a54:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	if (RateChange > MaxReturnRateChangeFilterFlush) {
 8001a58:	4b3e      	ldr	r3, [pc, #248]	; (8001b54 <_filter_Start+0x354>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8001a60:	429a      	cmp	r2, r3
 8001a62:	d902      	bls.n	8001a6a <_filter_Start+0x26a>
		FlushFilter = 1;
 8001a64:	2301      	movs	r3, #1
 8001a66:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
	}
	/* TODO optimize filter  using circular buffer */
	if (FlushFilter == 1) {
 8001a6a:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8001a6e:	2b01      	cmp	r3, #1
 8001a70:	d124      	bne.n	8001abc <_filter_Start+0x2bc>
		_FilterData(MeasurementIndex) = 0;
 8001a72:	4b2d      	ldr	r3, [pc, #180]	; (8001b28 <_filter_Start+0x328>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	61da      	str	r2, [r3, #28]
		for (i = 0; i < FILTER_NBOF_SAMPLES; i++) {
 8001a78:	2300      	movs	r3, #0
 8001a7a:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
 8001a7e:	e015      	b.n	8001aac <_filter_Start+0x2ac>
			_FilterData(LastTrueRange)[i] = FILTER_INVALID_DISTANCE;
 8001a80:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8001a84:	4a28      	ldr	r2, [pc, #160]	; (8001b28 <_filter_Start+0x328>)
 8001a86:	3310      	adds	r3, #16
 8001a88:	005b      	lsls	r3, r3, #1
 8001a8a:	4413      	add	r3, r2
 8001a8c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a90:	809a      	strh	r2, [r3, #4]
			_FilterData(LastReturnRates)[i] = 0;
 8001a92:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8001a96:	4a24      	ldr	r2, [pc, #144]	; (8001b28 <_filter_Start+0x328>)
 8001a98:	330c      	adds	r3, #12
 8001a9a:	009b      	lsls	r3, r3, #2
 8001a9c:	4413      	add	r3, r2
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	609a      	str	r2, [r3, #8]
		for (i = 0; i < FILTER_NBOF_SAMPLES; i++) {
 8001aa2:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8001aa6:	3301      	adds	r3, #1
 8001aa8:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
 8001aac:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8001ab0:	2b09      	cmp	r3, #9
 8001ab2:	d9e5      	bls.n	8001a80 <_filter_Start+0x280>
		}
		_FilterData(MeasurementsSinceLastFlush)=0;
 8001ab4:	4b1c      	ldr	r3, [pc, #112]	; (8001b28 <_filter_Start+0x328>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	621a      	str	r2, [r3, #32]
 8001aba:	e02d      	b.n	8001b18 <_filter_Start+0x318>
	} else {
		for (i = (uint16_t) (FILTER_NBOF_SAMPLES - 1); i > 0; i--) {
 8001abc:	2309      	movs	r3, #9
 8001abe:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
 8001ac2:	e025      	b.n	8001b10 <_filter_Start+0x310>
			_FilterData(LastTrueRange)[i] = _FilterData(LastTrueRange)[i - 1];
 8001ac4:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8001ac8:	3b01      	subs	r3, #1
 8001aca:	f8b7 209c 	ldrh.w	r2, [r7, #156]	; 0x9c
 8001ace:	4916      	ldr	r1, [pc, #88]	; (8001b28 <_filter_Start+0x328>)
 8001ad0:	3310      	adds	r3, #16
 8001ad2:	005b      	lsls	r3, r3, #1
 8001ad4:	440b      	add	r3, r1
 8001ad6:	8898      	ldrh	r0, [r3, #4]
 8001ad8:	4913      	ldr	r1, [pc, #76]	; (8001b28 <_filter_Start+0x328>)
 8001ada:	f102 0310 	add.w	r3, r2, #16
 8001ade:	005b      	lsls	r3, r3, #1
 8001ae0:	440b      	add	r3, r1
 8001ae2:	4602      	mov	r2, r0
 8001ae4:	809a      	strh	r2, [r3, #4]
			_FilterData(LastReturnRates)[i] = _FilterData(LastReturnRates)[i - 1];
 8001ae6:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8001aea:	3b01      	subs	r3, #1
 8001aec:	f8b7 109c 	ldrh.w	r1, [r7, #156]	; 0x9c
 8001af0:	4a0d      	ldr	r2, [pc, #52]	; (8001b28 <_filter_Start+0x328>)
 8001af2:	330c      	adds	r3, #12
 8001af4:	009b      	lsls	r3, r3, #2
 8001af6:	4413      	add	r3, r2
 8001af8:	689a      	ldr	r2, [r3, #8]
 8001afa:	480b      	ldr	r0, [pc, #44]	; (8001b28 <_filter_Start+0x328>)
 8001afc:	f101 030c 	add.w	r3, r1, #12
 8001b00:	009b      	lsls	r3, r3, #2
 8001b02:	4403      	add	r3, r0
 8001b04:	609a      	str	r2, [r3, #8]
		for (i = (uint16_t) (FILTER_NBOF_SAMPLES - 1); i > 0; i--) {
 8001b06:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8001b0a:	3b01      	subs	r3, #1
 8001b0c:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
 8001b10:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d1d5      	bne.n	8001ac4 <_filter_Start+0x2c4>
		}
	}

	if (ValidDistance == 1)
 8001b18:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8001b1c:	2b01      	cmp	r3, #1
 8001b1e:	d11b      	bne.n	8001b58 <_filter_Start+0x358>
		_FilterData(LastTrueRange)[0] = m_trueRange_mm;
 8001b20:	4a01      	ldr	r2, [pc, #4]	; (8001b28 <_filter_Start+0x328>)
 8001b22:	89bb      	ldrh	r3, [r7, #12]
 8001b24:	8493      	strh	r3, [r2, #36]	; 0x24
 8001b26:	e01b      	b.n	8001b60 <_filter_Start+0x360>
 8001b28:	20000004 	.word	0x20000004
 8001b2c:	08006e2c 	.word	0x08006e2c
 8001b30:	08006e30 	.word	0x08006e30
 8001b34:	1a41a41b 	.word	0x1a41a41b
 8001b38:	08006e34 	.word	0x08006e34
 8001b3c:	08006e38 	.word	0x08006e38
 8001b40:	08006e3c 	.word	0x08006e3c
 8001b44:	08006e3e 	.word	0x08006e3e
 8001b48:	08006e40 	.word	0x08006e40
 8001b4c:	08006e44 	.word	0x08006e44
 8001b50:	08006e48 	.word	0x08006e48
 8001b54:	08006e4c 	.word	0x08006e4c
	else
		_FilterData(LastTrueRange)[0] = FILTER_INVALID_DISTANCE;
 8001b58:	4b98      	ldr	r3, [pc, #608]	; (8001dbc <_filter_Start+0x5bc>)
 8001b5a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b5e:	849a      	strh	r2, [r3, #36]	; 0x24
	_FilterData(LastReturnRates)[0] = m_rtnSignalRate;
 8001b60:	4a96      	ldr	r2, [pc, #600]	; (8001dbc <_filter_Start+0x5bc>)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6393      	str	r3, [r2, #56]	; 0x38
	_FilterData(MeasurementsSinceLastFlush)++;
 8001b66:	4b95      	ldr	r3, [pc, #596]	; (8001dbc <_filter_Start+0x5bc>)
 8001b68:	6a1b      	ldr	r3, [r3, #32]
 8001b6a:	3301      	adds	r3, #1
 8001b6c:	4a93      	ldr	r2, [pc, #588]	; (8001dbc <_filter_Start+0x5bc>)
 8001b6e:	6213      	str	r3, [r2, #32]

	/* Check if we need to go through the filter or not */
	if (!(((m_rawRange_mm < WrapAroundHighRawRangeFilterLimit) &&
 8001b70:	4b93      	ldr	r3, [pc, #588]	; (8001dc0 <_filter_Start+0x5c0>)
 8001b72:	881b      	ldrh	r3, [r3, #0]
 8001b74:	897a      	ldrh	r2, [r7, #10]
 8001b76:	429a      	cmp	r2, r3
 8001b78:	d203      	bcs.n	8001b82 <_filter_Start+0x382>
 8001b7a:	687a      	ldr	r2, [r7, #4]
 8001b7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b7e:	429a      	cmp	r2, r3
 8001b80:	d30c      	bcc.n	8001b9c <_filter_Start+0x39c>
		(m_rtnSignalRate < WrapAroundLowReturnRateFilterLimit)) ||
		((m_rawRange_mm >= WrapAroundHighRawRangeFilterLimit) &&
 8001b82:	4b8f      	ldr	r3, [pc, #572]	; (8001dc0 <_filter_Start+0x5c0>)
 8001b84:	881b      	ldrh	r3, [r3, #0]
	if (!(((m_rawRange_mm < WrapAroundHighRawRangeFilterLimit) &&
 8001b86:	897a      	ldrh	r2, [r7, #10]
 8001b88:	429a      	cmp	r2, r3
 8001b8a:	d303      	bcc.n	8001b94 <_filter_Start+0x394>
		((m_rawRange_mm >= WrapAroundHighRawRangeFilterLimit) &&
 8001b8c:	687a      	ldr	r2, [r7, #4]
 8001b8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b90:	429a      	cmp	r2, r3
 8001b92:	d303      	bcc.n	8001b9c <_filter_Start+0x39c>
		(m_rtnSignalRate < WrapAroundHighReturnRateFilterLimit))))
		bypassFilter = 1;
 8001b94:	2301      	movs	r3, #1
 8001b96:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
 8001b9a:	e015      	b.n	8001bc8 <_filter_Start+0x3c8>
	else {
		/* if some wraparound filtering due to some ranging error code has been detected, update the filter status and bypass the filter */
		if(filterErrorCodeOnRangingErrorCode!=NoError){
 8001b9c:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d011      	beq.n	8001bc8 <_filter_Start+0x3c8>
#ifndef PRESERVE_DEVICE_ERROR_CODE
			filterErrorCode = filterErrorCodeOnRangingErrorCode;
#else
			if((errorCode==Raw_Ranging_Algo_Underflow) || (errorCode==Ranging_Algo_Underflow)) {
 8001ba4:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 8001ba8:	2b0c      	cmp	r3, #12
 8001baa:	d003      	beq.n	8001bb4 <_filter_Start+0x3b4>
 8001bac:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 8001bb0:	2b0e      	cmp	r3, #14
 8001bb2:	d103      	bne.n	8001bbc <_filter_Start+0x3bc>
				/* Preserves the error codes except for Raw_Ranging_Algo_Underflow and Ranging_Algo_Underflow */
				filterErrorCode = filterErrorCodeOnRangingErrorCode;
 8001bb4:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8001bb8:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
			}
#endif
			bypassFilter = 1;
 8001bbc:	2301      	movs	r3, #1
 8001bbe:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
			resetVAVGData = 0;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
		}
	}

	/* Check which kind of measurement has been made */
	status = VL6180x_RdByte(dev, 0x01AC, &u8);
 8001bc8:	f107 0217 	add.w	r2, r7, #23
 8001bcc:	7bfb      	ldrb	r3, [r7, #15]
 8001bce:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	f000 fe33 	bl	800283e <VL6180x_RdByte>
 8001bd8:	6338      	str	r0, [r7, #48]	; 0x30
	if (status) {
 8001bda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	f040 82d0 	bne.w	8002182 <_filter_Start+0x982>
		VL6180x_ErrLog("0x01AC rd fail");
		goto done_err;
	}
	registerValue = u8;
 8001be2:	7dfb      	ldrb	r3, [r7, #23]
 8001be4:	85fb      	strh	r3, [r7, #46]	; 0x2e

	/* Read data for filtering */
#if VL6180x_HAVE_MULTI_READ
	status = VL6180x_RdMulti(dev, 0x10C, MultiReadBuf, 8); /* read only 8 lsb bits */
 8001be6:	f107 0218 	add.w	r2, r7, #24
 8001bea:	7bf8      	ldrb	r0, [r7, #15]
 8001bec:	2308      	movs	r3, #8
 8001bee:	f44f 7186 	mov.w	r1, #268	; 0x10c
 8001bf2:	f000 fed5 	bl	80029a0 <VL6180x_RdMulti>
 8001bf6:	6338      	str	r0, [r7, #48]	; 0x30
	if (status) {
 8001bf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	f040 82c3 	bne.w	8002186 <_filter_Start+0x986>
		VL6180x_ErrLog("0x10C multi rd fail");
		goto done_err;
	}
	register32BitsValue1 = ((uint32_t) MultiReadBuf[0] << 24)
 8001c00:	7e3b      	ldrb	r3, [r7, #24]
 8001c02:	061a      	lsls	r2, r3, #24
			+ ((uint32_t) MultiReadBuf[1] << 16)
 8001c04:	7e7b      	ldrb	r3, [r7, #25]
 8001c06:	041b      	lsls	r3, r3, #16
 8001c08:	441a      	add	r2, r3
			+ ((uint32_t) MultiReadBuf[2] << 8)
 8001c0a:	7ebb      	ldrb	r3, [r7, #26]
 8001c0c:	021b      	lsls	r3, r3, #8
 8001c0e:	4413      	add	r3, r2
			+ ((uint32_t) MultiReadBuf[3] << 0);
 8001c10:	7efa      	ldrb	r2, [r7, #27]
	register32BitsValue1 = ((uint32_t) MultiReadBuf[0] << 24)
 8001c12:	4413      	add	r3, r2
 8001c14:	62bb      	str	r3, [r7, #40]	; 0x28
	register32BitsValue2 = ((uint32_t) MultiReadBuf[4] << 24)
 8001c16:	7f3b      	ldrb	r3, [r7, #28]
 8001c18:	061a      	lsls	r2, r3, #24
			+ ((uint32_t) MultiReadBuf[5] << 16)
 8001c1a:	7f7b      	ldrb	r3, [r7, #29]
 8001c1c:	041b      	lsls	r3, r3, #16
 8001c1e:	441a      	add	r2, r3
			+ ((uint32_t) MultiReadBuf[6] << 8)
 8001c20:	7fbb      	ldrb	r3, [r7, #30]
 8001c22:	021b      	lsls	r3, r3, #8
 8001c24:	4413      	add	r3, r2
			+ ((uint32_t) MultiReadBuf[7] << 0);
 8001c26:	7ffa      	ldrb	r2, [r7, #31]
	register32BitsValue2 = ((uint32_t) MultiReadBuf[4] << 24)
 8001c28:	4413      	add	r3, r2
 8001c2a:	627b      	str	r3, [r7, #36]	; 0x24
		goto done_err;
	}
#endif


	if ((FlushFilter == 1) || ((bypassFilter == 1) && (resetVAVGData == 1))) {
 8001c2c:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8001c30:	2b01      	cmp	r3, #1
 8001c32:	d007      	beq.n	8001c44 <_filter_Start+0x444>
 8001c34:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8001c38:	2b01      	cmp	r3, #1
 8001c3a:	d122      	bne.n	8001c82 <_filter_Start+0x482>
 8001c3c:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8001c40:	2b01      	cmp	r3, #1
 8001c42:	d11e      	bne.n	8001c82 <_filter_Start+0x482>
		if (registerValue != 0x3E) {
 8001c44:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001c46:	2b3e      	cmp	r3, #62	; 0x3e
 8001c48:	d00b      	beq.n	8001c62 <_filter_Start+0x462>
			status = VL6180x_WrByte(dev, 0x1AC, 0x3E);
 8001c4a:	7bfb      	ldrb	r3, [r7, #15]
 8001c4c:	223e      	movs	r2, #62	; 0x3e
 8001c4e:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
 8001c52:	4618      	mov	r0, r3
 8001c54:	f000 fd1a 	bl	800268c <VL6180x_WrByte>
 8001c58:	6338      	str	r0, [r7, #48]	; 0x30
			if (status) {
 8001c5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	f040 8294 	bne.w	800218a <_filter_Start+0x98a>
			//	VL6180x_ErrLog("0x0F2 bypass wr fail");
			//	goto done_err;
			//}
		}
		/* Set both Default and NoDelay To same value */
		_FilterData(Default_ZeroVal) = register32BitsValue1;
 8001c62:	4a56      	ldr	r2, [pc, #344]	; (8001dbc <_filter_Start+0x5bc>)
 8001c64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c66:	6653      	str	r3, [r2, #100]	; 0x64
		_FilterData(Default_VAVGVal) = register32BitsValue2;
 8001c68:	4a54      	ldr	r2, [pc, #336]	; (8001dbc <_filter_Start+0x5bc>)
 8001c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c6c:	6693      	str	r3, [r2, #104]	; 0x68
		_FilterData(NoDelay_ZeroVal) = register32BitsValue1;
 8001c6e:	4a53      	ldr	r2, [pc, #332]	; (8001dbc <_filter_Start+0x5bc>)
 8001c70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c72:	66d3      	str	r3, [r2, #108]	; 0x6c
		_FilterData(NoDelay_VAVGVal) = register32BitsValue2;
 8001c74:	4a51      	ldr	r2, [pc, #324]	; (8001dbc <_filter_Start+0x5bc>)
 8001c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c78:	6713      	str	r3, [r2, #112]	; 0x70

		_FilterData(MeasurementIndex) = 0;
 8001c7a:	4b50      	ldr	r3, [pc, #320]	; (8001dbc <_filter_Start+0x5bc>)
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	61da      	str	r2, [r3, #28]
 8001c80:	e030      	b.n	8001ce4 <_filter_Start+0x4e4>
	} else {
		if (registerValue == 0x3E) {
 8001c82:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001c84:	2b3e      	cmp	r3, #62	; 0x3e
 8001c86:	d106      	bne.n	8001c96 <_filter_Start+0x496>
			_FilterData(Default_ZeroVal) = register32BitsValue1;
 8001c88:	4a4c      	ldr	r2, [pc, #304]	; (8001dbc <_filter_Start+0x5bc>)
 8001c8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c8c:	6653      	str	r3, [r2, #100]	; 0x64
			_FilterData(Default_VAVGVal) = register32BitsValue2;
 8001c8e:	4a4b      	ldr	r2, [pc, #300]	; (8001dbc <_filter_Start+0x5bc>)
 8001c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c92:	6693      	str	r3, [r2, #104]	; 0x68
 8001c94:	e005      	b.n	8001ca2 <_filter_Start+0x4a2>
		} else {
			_FilterData(NoDelay_ZeroVal) = register32BitsValue1;
 8001c96:	4a49      	ldr	r2, [pc, #292]	; (8001dbc <_filter_Start+0x5bc>)
 8001c98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c9a:	66d3      	str	r3, [r2, #108]	; 0x6c
			_FilterData(NoDelay_VAVGVal) = register32BitsValue2;
 8001c9c:	4a47      	ldr	r2, [pc, #284]	; (8001dbc <_filter_Start+0x5bc>)
 8001c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ca0:	6713      	str	r3, [r2, #112]	; 0x70
		}

		if (_FilterData(MeasurementIndex) % WrapAroundNoDelayCheckPeriod == 0) {
 8001ca2:	4b46      	ldr	r3, [pc, #280]	; (8001dbc <_filter_Start+0x5bc>)
 8001ca4:	69db      	ldr	r3, [r3, #28]
 8001ca6:	4a47      	ldr	r2, [pc, #284]	; (8001dc4 <_filter_Start+0x5c4>)
 8001ca8:	8812      	ldrh	r2, [r2, #0]
 8001caa:	fbb3 f1f2 	udiv	r1, r3, r2
 8001cae:	fb01 f202 	mul.w	r2, r1, r2
 8001cb2:	1a9b      	subs	r3, r3, r2
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d102      	bne.n	8001cbe <_filter_Start+0x4be>
			u8 = 0x3C;
 8001cb8:	233c      	movs	r3, #60	; 0x3c
 8001cba:	75fb      	strb	r3, [r7, #23]
 8001cbc:	e001      	b.n	8001cc2 <_filter_Start+0x4c2>
			//u8_2 = 0x05;
		} else {
			u8 = 0x3E;
 8001cbe:	233e      	movs	r3, #62	; 0x3e
 8001cc0:	75fb      	strb	r3, [r7, #23]
			//u8_2 = 0x01;
		}
		status = VL6180x_WrByte(dev, 0x01AC, u8);
 8001cc2:	7dfa      	ldrb	r2, [r7, #23]
 8001cc4:	7bfb      	ldrb	r3, [r7, #15]
 8001cc6:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f000 fcde 	bl	800268c <VL6180x_WrByte>
 8001cd0:	6338      	str	r0, [r7, #48]	; 0x30
		if (status) {
 8001cd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	f040 825a 	bne.w	800218e <_filter_Start+0x98e>
		//status = VL6180x_WrByte(dev, 0x0F2, u8_2);
		//if (status) {
		//	VL6180x_ErrLog("0x0F2  wr fail");
		//	goto done_err;
		//}
		_FilterData(MeasurementIndex)++;
 8001cda:	4b38      	ldr	r3, [pc, #224]	; (8001dbc <_filter_Start+0x5bc>)
 8001cdc:	69db      	ldr	r3, [r3, #28]
 8001cde:	3301      	adds	r3, #1
 8001ce0:	4a36      	ldr	r2, [pc, #216]	; (8001dbc <_filter_Start+0x5bc>)
 8001ce2:	61d3      	str	r3, [r2, #28]
	}

	if (bypassFilter == 1) {
 8001ce4:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8001ce8:	2b01      	cmp	r3, #1
 8001cea:	d10d      	bne.n	8001d08 <_filter_Start+0x508>
		/* Do not go through the filter */

		/* Update filter error code */
		_FilterData(filterError) = filterErrorCode;
 8001cec:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8001cf0:	4a32      	ldr	r2, [pc, #200]	; (8001dbc <_filter_Start+0x5bc>)
 8001cf2:	67d3      	str	r3, [r2, #124]	; 0x7c

		/* Update reported range */
		if(filterErrorCode==RangingFiltered)
 8001cf4:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8001cf8:	2b10      	cmp	r3, #16
 8001cfa:	d102      	bne.n	8001d02 <_filter_Start+0x502>
			m_newTrueRange_mm = MaxOrInvalidDistance; /* Set to invalid distance */
 8001cfc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001cfe:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e

		return m_newTrueRange_mm;
 8001d02:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8001d06:	e245      	b.n	8002194 <_filter_Start+0x994>
	}

	/* Computes current VAVGDiff */
	if (_FilterData(Default_VAVGVal) > _FilterData(NoDelay_VAVGVal))
 8001d08:	4b2c      	ldr	r3, [pc, #176]	; (8001dbc <_filter_Start+0x5bc>)
 8001d0a:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001d0c:	4b2b      	ldr	r3, [pc, #172]	; (8001dbc <_filter_Start+0x5bc>)
 8001d0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d10:	429a      	cmp	r2, r3
 8001d12:	d906      	bls.n	8001d22 <_filter_Start+0x522>
		VAVGDiff = _FilterData(Default_VAVGVal) - _FilterData(NoDelay_VAVGVal);
 8001d14:	4b29      	ldr	r3, [pc, #164]	; (8001dbc <_filter_Start+0x5bc>)
 8001d16:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001d18:	4b28      	ldr	r3, [pc, #160]	; (8001dbc <_filter_Start+0x5bc>)
 8001d1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d1c:	1ad3      	subs	r3, r2, r3
 8001d1e:	663b      	str	r3, [r7, #96]	; 0x60
 8001d20:	e001      	b.n	8001d26 <_filter_Start+0x526>
	else
		VAVGDiff = 0;
 8001d22:	2300      	movs	r3, #0
 8001d24:	663b      	str	r3, [r7, #96]	; 0x60
	_FilterData(Previous_VAVGDiff) = VAVGDiff;
 8001d26:	4a25      	ldr	r2, [pc, #148]	; (8001dbc <_filter_Start+0x5bc>)
 8001d28:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001d2a:	6753      	str	r3, [r2, #116]	; 0x74

	if(SuspicuousRangingZone==0)
 8001d2c:	f8b7 3090 	ldrh.w	r3, [r7, #144]	; 0x90
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d103      	bne.n	8001d3c <_filter_Start+0x53c>
		MAX_VAVGDiff = MAX_VAVGDiff_ROM;
 8001d34:	4b24      	ldr	r3, [pc, #144]	; (8001dc8 <_filter_Start+0x5c8>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	657b      	str	r3, [r7, #84]	; 0x54
 8001d3a:	e006      	b.n	8001d4a <_filter_Start+0x54a>
	else
		/* In suspicuous area, strengthen the filter */
		MAX_VAVGDiff = MAX_VAVGDiff_ROM / SuspicuousMAX_VAVGDiffRatio;
 8001d3c:	4b22      	ldr	r3, [pc, #136]	; (8001dc8 <_filter_Start+0x5c8>)
 8001d3e:	681a      	ldr	r2, [r3, #0]
 8001d40:	4b22      	ldr	r3, [pc, #136]	; (8001dcc <_filter_Start+0x5cc>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d48:	657b      	str	r3, [r7, #84]	; 0x54

	/* Check the VAVGDiff */
	if (_FilterData(Default_ZeroVal) > _FilterData(NoDelay_ZeroVal))
 8001d4a:	4b1c      	ldr	r3, [pc, #112]	; (8001dbc <_filter_Start+0x5bc>)
 8001d4c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001d4e:	4b1b      	ldr	r3, [pc, #108]	; (8001dbc <_filter_Start+0x5bc>)
 8001d50:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001d52:	429a      	cmp	r2, r3
 8001d54:	d906      	bls.n	8001d64 <_filter_Start+0x564>
		IdealVAVGDiff = _FilterData(Default_ZeroVal) - _FilterData(NoDelay_ZeroVal);
 8001d56:	4b19      	ldr	r3, [pc, #100]	; (8001dbc <_filter_Start+0x5bc>)
 8001d58:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001d5a:	4b18      	ldr	r3, [pc, #96]	; (8001dbc <_filter_Start+0x5bc>)
 8001d5c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001d5e:	1ad3      	subs	r3, r2, r3
 8001d60:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001d62:	e005      	b.n	8001d70 <_filter_Start+0x570>
	else
		IdealVAVGDiff = _FilterData(NoDelay_ZeroVal) - _FilterData(Default_ZeroVal);
 8001d64:	4b15      	ldr	r3, [pc, #84]	; (8001dbc <_filter_Start+0x5bc>)
 8001d66:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001d68:	4b14      	ldr	r3, [pc, #80]	; (8001dbc <_filter_Start+0x5bc>)
 8001d6a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001d6c:	1ad3      	subs	r3, r2, r3
 8001d6e:	65fb      	str	r3, [r7, #92]	; 0x5c
	if (IdealVAVGDiff > MAX_VAVGDiff)
 8001d70:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001d72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d74:	429a      	cmp	r2, r3
 8001d76:	d904      	bls.n	8001d82 <_filter_Start+0x582>
		MinVAVGDiff = IdealVAVGDiff - MAX_VAVGDiff;
 8001d78:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001d7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d7c:	1ad3      	subs	r3, r2, r3
 8001d7e:	65bb      	str	r3, [r7, #88]	; 0x58
 8001d80:	e001      	b.n	8001d86 <_filter_Start+0x586>
	else
		MinVAVGDiff = 0;
 8001d82:	2300      	movs	r3, #0
 8001d84:	65bb      	str	r3, [r7, #88]	; 0x58
	MaxVAVGDiff = IdealVAVGDiff + MAX_VAVGDiff;
 8001d86:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001d88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d8a:	4413      	add	r3, r2
 8001d8c:	623b      	str	r3, [r7, #32]
	if (VAVGDiff < MinVAVGDiff || VAVGDiff > MaxVAVGDiff) {
 8001d8e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001d90:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001d92:	429a      	cmp	r2, r3
 8001d94:	d303      	bcc.n	8001d9e <_filter_Start+0x59e>
 8001d96:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001d98:	6a3b      	ldr	r3, [r7, #32]
 8001d9a:	429a      	cmp	r2, r3
 8001d9c:	d906      	bls.n	8001dac <_filter_Start+0x5ac>
		WrapAroundFlag = 1;
 8001d9e:	2301      	movs	r3, #1
 8001da0:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
		filterErrorCode = RangingFiltered;
 8001da4:	2310      	movs	r3, #16
 8001da6:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
 8001daa:	e145      	b.n	8002038 <_filter_Start+0x838>
	} else {
		/* Go through filtering check */

		if(_FilterData(MeasurementIndex)<=1)
 8001dac:	4b03      	ldr	r3, [pc, #12]	; (8001dbc <_filter_Start+0x5bc>)
 8001dae:	69db      	ldr	r3, [r3, #28]
 8001db0:	2b01      	cmp	r3, #1
 8001db2:	d80d      	bhi.n	8001dd0 <_filter_Start+0x5d0>
			/* On measurement after a bypass, uses an increase number of samples */
			StdDevSamplesMinNeeded = MIN_FILTER_STDDEV_SAMPLES_AFTER_FLUSH_OR_BYPASS;
 8001db4:	2305      	movs	r3, #5
 8001db6:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
 8001dba:	e00c      	b.n	8001dd6 <_filter_Start+0x5d6>
 8001dbc:	20000004 	.word	0x20000004
 8001dc0:	08006e50 	.word	0x08006e50
 8001dc4:	08006e52 	.word	0x08006e52
 8001dc8:	08006e54 	.word	0x08006e54
 8001dcc:	08006e58 	.word	0x08006e58
		else
			StdDevSamplesMinNeeded = MIN_FILTER_STDDEV_SAMPLES;
 8001dd0:	2303      	movs	r3, #3
 8001dd2:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82

		/* StdDevLimit Damper on SNR */
		StdDevLimit = _filter_StdDevDamper(m_rtnAmbientRate, m_rtnSignalRate, StdDevLimitLowLight, StdDevLimitLowLightSNR, StdDevLimitHighLight, StdDevLimitHighLightSNR);
 8001dd6:	4baf      	ldr	r3, [pc, #700]	; (8002094 <_filter_Start+0x894>)
 8001dd8:	6819      	ldr	r1, [r3, #0]
 8001dda:	4baf      	ldr	r3, [pc, #700]	; (8002098 <_filter_Start+0x898>)
 8001ddc:	6818      	ldr	r0, [r3, #0]
 8001dde:	4baf      	ldr	r3, [pc, #700]	; (800209c <_filter_Start+0x89c>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4aaf      	ldr	r2, [pc, #700]	; (80020a0 <_filter_Start+0x8a0>)
 8001de4:	6812      	ldr	r2, [r2, #0]
 8001de6:	9201      	str	r2, [sp, #4]
 8001de8:	9300      	str	r3, [sp, #0]
 8001dea:	4603      	mov	r3, r0
 8001dec:	460a      	mov	r2, r1
 8001dee:	6879      	ldr	r1, [r7, #4]
 8001df0:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 8001df4:	f7ff fcc8 	bl	8001788 <_filter_StdDevDamper>
 8001df8:	6538      	str	r0, [r7, #80]	; 0x50

		/* Standard deviations computations */
		StdDevSamples = 0;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	f8a7 3080 	strh.w	r3, [r7, #128]	; 0x80
		StdDevDistanceSum = 0;
 8001e00:	2300      	movs	r3, #0
 8001e02:	67fb      	str	r3, [r7, #124]	; 0x7c
		StdDevDistanceMean = 0;
 8001e04:	2300      	movs	r3, #0
 8001e06:	67bb      	str	r3, [r7, #120]	; 0x78
		StdDevDistance = 0;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	677b      	str	r3, [r7, #116]	; 0x74
		StdDevRateSum = 0;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	673b      	str	r3, [r7, #112]	; 0x70
		StdDevRateMean = 0;
 8001e10:	2300      	movs	r3, #0
 8001e12:	66fb      	str	r3, [r7, #108]	; 0x6c
		StdDevRate = 0;
 8001e14:	2300      	movs	r3, #0
 8001e16:	66bb      	str	r3, [r7, #104]	; 0x68
		for (i = 0; (i < FILTER_NBOF_SAMPLES) && (StdDevSamples < FILTER_STDDEV_SAMPLES); i++) {
 8001e18:	2300      	movs	r3, #0
 8001e1a:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
 8001e1e:	e029      	b.n	8001e74 <_filter_Start+0x674>
			if (_FilterData(LastTrueRange)[i] != FILTER_INVALID_DISTANCE) {
 8001e20:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8001e24:	4a9f      	ldr	r2, [pc, #636]	; (80020a4 <_filter_Start+0x8a4>)
 8001e26:	3310      	adds	r3, #16
 8001e28:	005b      	lsls	r3, r3, #1
 8001e2a:	4413      	add	r3, r2
 8001e2c:	889b      	ldrh	r3, [r3, #4]
 8001e2e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d019      	beq.n	8001e6a <_filter_Start+0x66a>
				StdDevSamples = (uint16_t) (StdDevSamples + 1);
 8001e36:	f8b7 3080 	ldrh.w	r3, [r7, #128]	; 0x80
 8001e3a:	3301      	adds	r3, #1
 8001e3c:	f8a7 3080 	strh.w	r3, [r7, #128]	; 0x80
				StdDevDistanceSum = (uint32_t) (StdDevDistanceSum + _FilterData(LastTrueRange)[i]);
 8001e40:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8001e44:	4a97      	ldr	r2, [pc, #604]	; (80020a4 <_filter_Start+0x8a4>)
 8001e46:	3310      	adds	r3, #16
 8001e48:	005b      	lsls	r3, r3, #1
 8001e4a:	4413      	add	r3, r2
 8001e4c:	889b      	ldrh	r3, [r3, #4]
 8001e4e:	461a      	mov	r2, r3
 8001e50:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001e52:	4413      	add	r3, r2
 8001e54:	67fb      	str	r3, [r7, #124]	; 0x7c
				StdDevRateSum = (uint32_t) (StdDevRateSum + _FilterData(LastReturnRates)[i]);
 8001e56:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8001e5a:	4a92      	ldr	r2, [pc, #584]	; (80020a4 <_filter_Start+0x8a4>)
 8001e5c:	330c      	adds	r3, #12
 8001e5e:	009b      	lsls	r3, r3, #2
 8001e60:	4413      	add	r3, r2
 8001e62:	689b      	ldr	r3, [r3, #8]
 8001e64:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8001e66:	4413      	add	r3, r2
 8001e68:	673b      	str	r3, [r7, #112]	; 0x70
		for (i = 0; (i < FILTER_NBOF_SAMPLES) && (StdDevSamples < FILTER_STDDEV_SAMPLES); i++) {
 8001e6a:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8001e6e:	3301      	adds	r3, #1
 8001e70:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
 8001e74:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8001e78:	2b09      	cmp	r3, #9
 8001e7a:	d803      	bhi.n	8001e84 <_filter_Start+0x684>
 8001e7c:	f8b7 3080 	ldrh.w	r3, [r7, #128]	; 0x80
 8001e80:	2b05      	cmp	r3, #5
 8001e82:	d9cd      	bls.n	8001e20 <_filter_Start+0x620>
			}
		}
		if (StdDevSamples > 0) {
 8001e84:	f8b7 3080 	ldrh.w	r3, [r7, #128]	; 0x80
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d00b      	beq.n	8001ea4 <_filter_Start+0x6a4>
			StdDevDistanceMean = (uint32_t) (StdDevDistanceSum / StdDevSamples);
 8001e8c:	f8b7 3080 	ldrh.w	r3, [r7, #128]	; 0x80
 8001e90:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8001e92:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e96:	67bb      	str	r3, [r7, #120]	; 0x78
			StdDevRateMean = (uint32_t) (StdDevRateSum / StdDevSamples);
 8001e98:	f8b7 3080 	ldrh.w	r3, [r7, #128]	; 0x80
 8001e9c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8001e9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ea2:	66fb      	str	r3, [r7, #108]	; 0x6c
		}
		/* TODO optimize shorten Std dev in aisngle loop computation using sum of x2 - (sum of x)2 */
		StdDevSamples = 0;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	f8a7 3080 	strh.w	r3, [r7, #128]	; 0x80
		StdDevDistanceSum = 0;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	67fb      	str	r3, [r7, #124]	; 0x7c
		StdDevRateSum = 0;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	673b      	str	r3, [r7, #112]	; 0x70
		for (i = 0; (i < FILTER_NBOF_SAMPLES) && (StdDevSamples < FILTER_STDDEV_SAMPLES); i++) {
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
 8001eb8:	e048      	b.n	8001f4c <_filter_Start+0x74c>
			if (_FilterData(LastTrueRange)[i] != FILTER_INVALID_DISTANCE) {
 8001eba:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8001ebe:	4a79      	ldr	r2, [pc, #484]	; (80020a4 <_filter_Start+0x8a4>)
 8001ec0:	3310      	adds	r3, #16
 8001ec2:	005b      	lsls	r3, r3, #1
 8001ec4:	4413      	add	r3, r2
 8001ec6:	889b      	ldrh	r3, [r3, #4]
 8001ec8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ecc:	4293      	cmp	r3, r2
 8001ece:	d038      	beq.n	8001f42 <_filter_Start+0x742>
				StdDevSamples = (uint16_t) (StdDevSamples + 1);
 8001ed0:	f8b7 3080 	ldrh.w	r3, [r7, #128]	; 0x80
 8001ed4:	3301      	adds	r3, #1
 8001ed6:	f8a7 3080 	strh.w	r3, [r7, #128]	; 0x80
				StdDevDistanceSum = (uint32_t) (StdDevDistanceSum +
									(int)(_FilterData(LastTrueRange)[i] -
 8001eda:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8001ede:	4a71      	ldr	r2, [pc, #452]	; (80020a4 <_filter_Start+0x8a4>)
 8001ee0:	3310      	adds	r3, #16
 8001ee2:	005b      	lsls	r3, r3, #1
 8001ee4:	4413      	add	r3, r2
 8001ee6:	889b      	ldrh	r3, [r3, #4]
 8001ee8:	461a      	mov	r2, r3
 8001eea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001eec:	1ad3      	subs	r3, r2, r3
 8001eee:	4619      	mov	r1, r3
											StdDevDistanceMean) *
											(int) (_FilterData(LastTrueRange)[i] -
 8001ef0:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8001ef4:	4a6b      	ldr	r2, [pc, #428]	; (80020a4 <_filter_Start+0x8a4>)
 8001ef6:	3310      	adds	r3, #16
 8001ef8:	005b      	lsls	r3, r3, #1
 8001efa:	4413      	add	r3, r2
 8001efc:	889b      	ldrh	r3, [r3, #4]
 8001efe:	461a      	mov	r2, r3
 8001f00:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001f02:	1ad3      	subs	r3, r2, r3
											StdDevDistanceMean) *
 8001f04:	fb01 f303 	mul.w	r3, r1, r3
 8001f08:	461a      	mov	r2, r3
				StdDevDistanceSum = (uint32_t) (StdDevDistanceSum +
 8001f0a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001f0c:	4413      	add	r3, r2
 8001f0e:	67fb      	str	r3, [r7, #124]	; 0x7c
													StdDevDistanceMean));
				StdDevRateSum = (uint32_t) (StdDevRateSum +
									(int) (_FilterData(LastReturnRates)[i] -
 8001f10:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8001f14:	4a63      	ldr	r2, [pc, #396]	; (80020a4 <_filter_Start+0x8a4>)
 8001f16:	330c      	adds	r3, #12
 8001f18:	009b      	lsls	r3, r3, #2
 8001f1a:	4413      	add	r3, r2
 8001f1c:	689a      	ldr	r2, [r3, #8]
 8001f1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001f20:	1ad3      	subs	r3, r2, r3
 8001f22:	4619      	mov	r1, r3
											StdDevRateMean) *
											(int) (_FilterData(LastReturnRates)[i] -
 8001f24:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8001f28:	4a5e      	ldr	r2, [pc, #376]	; (80020a4 <_filter_Start+0x8a4>)
 8001f2a:	330c      	adds	r3, #12
 8001f2c:	009b      	lsls	r3, r3, #2
 8001f2e:	4413      	add	r3, r2
 8001f30:	689a      	ldr	r2, [r3, #8]
 8001f32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001f34:	1ad3      	subs	r3, r2, r3
											StdDevRateMean) *
 8001f36:	fb01 f303 	mul.w	r3, r1, r3
 8001f3a:	461a      	mov	r2, r3
				StdDevRateSum = (uint32_t) (StdDevRateSum +
 8001f3c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001f3e:	4413      	add	r3, r2
 8001f40:	673b      	str	r3, [r7, #112]	; 0x70
		for (i = 0; (i < FILTER_NBOF_SAMPLES) && (StdDevSamples < FILTER_STDDEV_SAMPLES); i++) {
 8001f42:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8001f46:	3301      	adds	r3, #1
 8001f48:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
 8001f4c:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8001f50:	2b09      	cmp	r3, #9
 8001f52:	d803      	bhi.n	8001f5c <_filter_Start+0x75c>
 8001f54:	f8b7 3080 	ldrh.w	r3, [r7, #128]	; 0x80
 8001f58:	2b05      	cmp	r3, #5
 8001f5a:	d9ae      	bls.n	8001eba <_filter_Start+0x6ba>
													StdDevRateMean));
			}
		}
		if (StdDevSamples >= StdDevSamplesMinNeeded) {
 8001f5c:	f8b7 2080 	ldrh.w	r2, [r7, #128]	; 0x80
 8001f60:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 8001f64:	429a      	cmp	r2, r3
 8001f66:	d30e      	bcc.n	8001f86 <_filter_Start+0x786>
			StdDevDistance = (uint16_t) (StdDevDistanceSum / StdDevSamples);
 8001f68:	f8b7 3080 	ldrh.w	r3, [r7, #128]	; 0x80
 8001f6c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8001f6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f72:	b29b      	uxth	r3, r3
 8001f74:	677b      	str	r3, [r7, #116]	; 0x74
			StdDevRate = (uint16_t) (StdDevRateSum / StdDevSamples);
 8001f76:	f8b7 3080 	ldrh.w	r3, [r7, #128]	; 0x80
 8001f7a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8001f7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f80:	b29b      	uxth	r3, r3
 8001f82:	66bb      	str	r3, [r7, #104]	; 0x68
 8001f84:	e003      	b.n	8001f8e <_filter_Start+0x78e>
		} else {
			StdDevDistance = 0;
 8001f86:	2300      	movs	r3, #0
 8001f88:	677b      	str	r3, [r7, #116]	; 0x74
			StdDevRate = 0;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	66bb      	str	r3, [r7, #104]	; 0x68
		}

		/* Check Return rate standard deviation */
		if (StdDevRate < StdDevMovingTargetStdDevLimit) {
 8001f8e:	4b46      	ldr	r3, [pc, #280]	; (80020a8 <_filter_Start+0x8a8>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8001f94:	429a      	cmp	r2, r3
 8001f96:	d249      	bcs.n	800202c <_filter_Start+0x82c>
			if (StdDevSamples < StdDevSamplesMinNeeded) {
 8001f98:	f8b7 2080 	ldrh.w	r2, [r7, #128]	; 0x80
 8001f9c:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 8001fa0:	429a      	cmp	r2, r3
 8001fa2:	d203      	bcs.n	8001fac <_filter_Start+0x7ac>
				//m_newTrueRange_mm = MaxOrInvalidDistance;
				filterErrorCode = RangingFiltered;
 8001fa4:	2310      	movs	r3, #16
 8001fa6:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
 8001faa:	e045      	b.n	8002038 <_filter_Start+0x838>
			} else {
				/* Check distance standard deviation */
				if (StdDevRate < StdDevMovingTargetReturnRateLimit)
 8001fac:	4b3f      	ldr	r3, [pc, #252]	; (80020ac <_filter_Start+0x8ac>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8001fb2:	429a      	cmp	r2, r3
 8001fb4:	d20e      	bcs.n	8001fd4 <_filter_Start+0x7d4>
					StdDevLimitWithTargetMove = StdDevLimit +
						(((StdDevMovingTargetStdDevForReturnRateLimit -
 8001fb6:	4b3e      	ldr	r3, [pc, #248]	; (80020b0 <_filter_Start+0x8b0>)
 8001fb8:	681a      	ldr	r2, [r3, #0]
 8001fba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001fbc:	1ad3      	subs	r3, r2, r3
							StdDevLimit) * StdDevRate) /
 8001fbe:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8001fc0:	fb03 f202 	mul.w	r2, r3, r2
 8001fc4:	4b39      	ldr	r3, [pc, #228]	; (80020ac <_filter_Start+0x8ac>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	fbb2 f3f3 	udiv	r3, r2, r3
					StdDevLimitWithTargetMove = StdDevLimit +
 8001fcc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001fce:	4413      	add	r3, r2
 8001fd0:	667b      	str	r3, [r7, #100]	; 0x64
 8001fd2:	e002      	b.n	8001fda <_filter_Start+0x7da>
							StdDevMovingTargetReturnRateLimit);
				else
					StdDevLimitWithTargetMove = StdDevMovingTargetStdDevForReturnRateLimit;
 8001fd4:	4b36      	ldr	r3, [pc, #216]	; (80020b0 <_filter_Start+0x8b0>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	667b      	str	r3, [r7, #100]	; 0x64

				if(_FilterData(filterError)==NoError){
 8001fda:	4b32      	ldr	r3, [pc, #200]	; (80020a4 <_filter_Start+0x8a4>)
 8001fdc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d105      	bne.n	8001fee <_filter_Start+0x7ee>
					/* No wrapAround detected yet, so relax constraints on the std dev */
					StdDevLimitWithTargetMove = StdDevLimitWithTargetMove * StdDevNoWrapDetectedMultiplier;
 8001fe2:	4b34      	ldr	r3, [pc, #208]	; (80020b4 <_filter_Start+0x8b4>)
 8001fe4:	681a      	ldr	r2, [r3, #0]
 8001fe6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001fe8:	fb02 f303 	mul.w	r3, r2, r3
 8001fec:	667b      	str	r3, [r7, #100]	; 0x64
				}

				if (((StdDevDistance * StdDevHighConfidenceSNRLimit) < StdDevLimit) && (StdDevSamples>=FILTER_STDDEV_SAMPLES)) {
 8001fee:	4b32      	ldr	r3, [pc, #200]	; (80020b8 <_filter_Start+0x8b8>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8001ff4:	fb02 f303 	mul.w	r3, r2, r3
 8001ff8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001ffa:	429a      	cmp	r2, r3
 8001ffc:	d907      	bls.n	800200e <_filter_Start+0x80e>
 8001ffe:	f8b7 3080 	ldrh.w	r3, [r7, #128]	; 0x80
 8002002:	2b05      	cmp	r3, #5
 8002004:	d903      	bls.n	800200e <_filter_Start+0x80e>
					NoWrapAroundHighConfidenceFlag = 1;
 8002006:	2301      	movs	r3, #1
 8002008:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800200c:	e014      	b.n	8002038 <_filter_Start+0x838>
				} else {
					if (StdDevDistance < StdDevLimitWithTargetMove) {
 800200e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002010:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002012:	429a      	cmp	r2, r3
 8002014:	d203      	bcs.n	800201e <_filter_Start+0x81e>
							NoWrapAroundFlag = 1;
 8002016:	2301      	movs	r3, #1
 8002018:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 800201c:	e00c      	b.n	8002038 <_filter_Start+0x838>
						} else {
						WrapAroundFlag = 1;
 800201e:	2301      	movs	r3, #1
 8002020:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
						filterErrorCode = RangingFiltered;
 8002024:	2310      	movs	r3, #16
 8002026:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
 800202a:	e005      	b.n	8002038 <_filter_Start+0x838>
					}
				}
			}
		} else {
			/* Target moving too fast */
			WrapAroundFlag = 1;
 800202c:	2301      	movs	r3, #1
 800202e:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
			filterErrorCode = RangingFiltered;
 8002032:	2310      	movs	r3, #16
 8002034:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
		}
	}

	if (ValidDistance == 0) {
 8002038:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 800203c:	2b00      	cmp	r3, #0
 800203e:	d10d      	bne.n	800205c <_filter_Start+0x85c>
		/* In case of invalid distance */
		if (_FilterData(StdFilteredReads) > 0)
 8002040:	4b18      	ldr	r3, [pc, #96]	; (80020a4 <_filter_Start+0x8a4>)
 8002042:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8002046:	2b00      	cmp	r3, #0
 8002048:	d067      	beq.n	800211a <_filter_Start+0x91a>
			_FilterData(StdFilteredReads) = (uint16_t) (_FilterData(StdFilteredReads) - 1);
 800204a:	4b16      	ldr	r3, [pc, #88]	; (80020a4 <_filter_Start+0x8a4>)
 800204c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8002050:	3b01      	subs	r3, #1
 8002052:	b29a      	uxth	r2, r3
 8002054:	4b13      	ldr	r3, [pc, #76]	; (80020a4 <_filter_Start+0x8a4>)
 8002056:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800205a:	e05e      	b.n	800211a <_filter_Start+0x91a>
	} else {
		if (WrapAroundFlag == 1) {
 800205c:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8002060:	2b01      	cmp	r3, #1
 8002062:	d12f      	bne.n	80020c4 <_filter_Start+0x8c4>
			_FilterData(StdFilteredReads) = (uint16_t) (_FilterData(StdFilteredReads) +
 8002064:	4b0f      	ldr	r3, [pc, #60]	; (80020a4 <_filter_Start+0x8a4>)
 8002066:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800206a:	4b14      	ldr	r3, [pc, #80]	; (80020bc <_filter_Start+0x8bc>)
 800206c:	881b      	ldrh	r3, [r3, #0]
 800206e:	4413      	add	r3, r2
 8002070:	b29a      	uxth	r2, r3
 8002072:	4b0c      	ldr	r3, [pc, #48]	; (80020a4 <_filter_Start+0x8a4>)
 8002074:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
											StdFilteredReadsIncrement);
			if (_FilterData(StdFilteredReads) > StdMaxFilteredReads)
 8002078:	4b0a      	ldr	r3, [pc, #40]	; (80020a4 <_filter_Start+0x8a4>)
 800207a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800207e:	4b10      	ldr	r3, [pc, #64]	; (80020c0 <_filter_Start+0x8c0>)
 8002080:	881b      	ldrh	r3, [r3, #0]
 8002082:	429a      	cmp	r2, r3
 8002084:	d949      	bls.n	800211a <_filter_Start+0x91a>
				_FilterData(StdFilteredReads) = StdMaxFilteredReads;
 8002086:	4b0e      	ldr	r3, [pc, #56]	; (80020c0 <_filter_Start+0x8c0>)
 8002088:	881a      	ldrh	r2, [r3, #0]
 800208a:	4b06      	ldr	r3, [pc, #24]	; (80020a4 <_filter_Start+0x8a4>)
 800208c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8002090:	e043      	b.n	800211a <_filter_Start+0x91a>
 8002092:	bf00      	nop
 8002094:	08006e5c 	.word	0x08006e5c
 8002098:	08006e60 	.word	0x08006e60
 800209c:	08006e64 	.word	0x08006e64
 80020a0:	08006e68 	.word	0x08006e68
 80020a4:	20000004 	.word	0x20000004
 80020a8:	08006e6c 	.word	0x08006e6c
 80020ac:	08006e70 	.word	0x08006e70
 80020b0:	08006e74 	.word	0x08006e74
 80020b4:	08006e78 	.word	0x08006e78
 80020b8:	08006e7c 	.word	0x08006e7c
 80020bc:	08006e80 	.word	0x08006e80
 80020c0:	08006e82 	.word	0x08006e82
		} else {
			if (NoWrapAroundFlag == 1) {
 80020c4:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80020c8:	2b01      	cmp	r3, #1
 80020ca:	d11e      	bne.n	800210a <_filter_Start+0x90a>
				if (_FilterData(StdFilteredReads) > 0) {
 80020cc:	4b33      	ldr	r3, [pc, #204]	; (800219c <_filter_Start+0x99c>)
 80020ce:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d021      	beq.n	800211a <_filter_Start+0x91a>
					filterErrorCode = RangingFiltered;
 80020d6:	2310      	movs	r3, #16
 80020d8:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
					if (_FilterData(StdFilteredReads) > StdFilteredReadsDecrement)
 80020dc:	4b2f      	ldr	r3, [pc, #188]	; (800219c <_filter_Start+0x99c>)
 80020de:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80020e2:	4b2f      	ldr	r3, [pc, #188]	; (80021a0 <_filter_Start+0x9a0>)
 80020e4:	881b      	ldrh	r3, [r3, #0]
 80020e6:	429a      	cmp	r2, r3
 80020e8:	d90a      	bls.n	8002100 <_filter_Start+0x900>
						_FilterData(StdFilteredReads) = (uint16_t) (_FilterData(StdFilteredReads) -
 80020ea:	4b2c      	ldr	r3, [pc, #176]	; (800219c <_filter_Start+0x99c>)
 80020ec:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80020f0:	4b2b      	ldr	r3, [pc, #172]	; (80021a0 <_filter_Start+0x9a0>)
 80020f2:	881b      	ldrh	r3, [r3, #0]
 80020f4:	1ad3      	subs	r3, r2, r3
 80020f6:	b29a      	uxth	r2, r3
 80020f8:	4b28      	ldr	r3, [pc, #160]	; (800219c <_filter_Start+0x99c>)
 80020fa:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80020fe:	e00c      	b.n	800211a <_filter_Start+0x91a>
														StdFilteredReadsDecrement);
					else
						_FilterData(StdFilteredReads) = 0;
 8002100:	4b26      	ldr	r3, [pc, #152]	; (800219c <_filter_Start+0x99c>)
 8002102:	2200      	movs	r2, #0
 8002104:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8002108:	e007      	b.n	800211a <_filter_Start+0x91a>
				}
			} else {
				if (NoWrapAroundHighConfidenceFlag == 1) {
 800210a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800210e:	2b01      	cmp	r3, #1
 8002110:	d103      	bne.n	800211a <_filter_Start+0x91a>
					_FilterData(StdFilteredReads) = 0;
 8002112:	4b22      	ldr	r3, [pc, #136]	; (800219c <_filter_Start+0x99c>)
 8002114:	2200      	movs	r2, #0
 8002116:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
	}

	/* If we detect a change from no Error to RangingFilteringOnGoing, then it means that
	 * the filter detected a change in te scene, so discard all previous measurements.
	 */
	if((_FilterData(filterError) == NoError) && (filterErrorCode!=NoError)) {
 800211a:	4b20      	ldr	r3, [pc, #128]	; (800219c <_filter_Start+0x99c>)
 800211c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800211e:	2b00      	cmp	r3, #0
 8002120:	d121      	bne.n	8002166 <_filter_Start+0x966>
 8002122:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8002126:	2b00      	cmp	r3, #0
 8002128:	d01d      	beq.n	8002166 <_filter_Start+0x966>
		for (i = 1; i < FILTER_NBOF_SAMPLES; i++) {
 800212a:	2301      	movs	r3, #1
 800212c:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
 8002130:	e015      	b.n	800215e <_filter_Start+0x95e>
			_FilterData(LastTrueRange)[i] = FILTER_INVALID_DISTANCE;
 8002132:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8002136:	4a19      	ldr	r2, [pc, #100]	; (800219c <_filter_Start+0x99c>)
 8002138:	3310      	adds	r3, #16
 800213a:	005b      	lsls	r3, r3, #1
 800213c:	4413      	add	r3, r2
 800213e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002142:	809a      	strh	r2, [r3, #4]
			_FilterData(LastReturnRates)[i] = 0;
 8002144:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8002148:	4a14      	ldr	r2, [pc, #80]	; (800219c <_filter_Start+0x99c>)
 800214a:	330c      	adds	r3, #12
 800214c:	009b      	lsls	r3, r3, #2
 800214e:	4413      	add	r3, r2
 8002150:	2200      	movs	r2, #0
 8002152:	609a      	str	r2, [r3, #8]
		for (i = 1; i < FILTER_NBOF_SAMPLES; i++) {
 8002154:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8002158:	3301      	adds	r3, #1
 800215a:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
 800215e:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8002162:	2b09      	cmp	r3, #9
 8002164:	d9e5      	bls.n	8002132 <_filter_Start+0x932>
		}
	}

	/* Update filter error code */
	_FilterData(filterError) = filterErrorCode;
 8002166:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800216a:	4a0c      	ldr	r2, [pc, #48]	; (800219c <_filter_Start+0x99c>)
 800216c:	67d3      	str	r3, [r2, #124]	; 0x7c

	/* Update reported range */
	if(filterErrorCode==RangingFiltered)
 800216e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8002172:	2b10      	cmp	r3, #16
 8002174:	d102      	bne.n	800217c <_filter_Start+0x97c>
		m_newTrueRange_mm = MaxOrInvalidDistance; /* Set to invalid distance */
 8002176:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002178:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e

	return m_newTrueRange_mm;
 800217c:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8002180:	e008      	b.n	8002194 <_filter_Start+0x994>
		goto done_err;
 8002182:	bf00      	nop
 8002184:	e004      	b.n	8002190 <_filter_Start+0x990>
		goto done_err;
 8002186:	bf00      	nop
 8002188:	e002      	b.n	8002190 <_filter_Start+0x990>
				goto done_err;
 800218a:	bf00      	nop
 800218c:	e000      	b.n	8002190 <_filter_Start+0x990>
			goto done_err;
 800218e:	bf00      	nop
done_err:
	return -1;
 8002190:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff

#undef MaxOrInvalidDistance
}
 8002194:	4618      	mov	r0, r3
 8002196:	37a0      	adds	r7, #160	; 0xa0
 8002198:	46bd      	mov	sp, r7
 800219a:	bd80      	pop	{r7, pc}
 800219c:	20000004 	.word	0x20000004
 80021a0:	08006e84 	.word	0x08006e84

080021a4 <_filter_GetResult>:


static int _filter_GetResult(VL6180xDev_t dev, VL6180x_RangeData_t *pRangeData)
{
 80021a4:	b5b0      	push	{r4, r5, r7, lr}
 80021a6:	b08a      	sub	sp, #40	; 0x28
 80021a8:	af02      	add	r7, sp, #8
 80021aa:	4603      	mov	r3, r0
 80021ac:	6039      	str	r1, [r7, #0]
 80021ae:	71fb      	strb	r3, [r7, #7]
	uint32_t m_rawRange_mm = 0;
 80021b0:	2300      	movs	r3, #0
 80021b2:	61bb      	str	r3, [r7, #24]
	int32_t  FilteredRange;
	const uint8_t scaler = _GetUpscale(dev);
 80021b4:	4b23      	ldr	r3, [pc, #140]	; (8002244 <_filter_GetResult+0xa0>)
 80021b6:	7e1b      	ldrb	r3, [r3, #24]
 80021b8:	75fb      	strb	r3, [r7, #23]
	uint8_t u8;
	int status;

	do {
		status = VL6180x_GetCachedByte(dev, RESULT_RANGE_RAW, &u8);
 80021ba:	f107 020f 	add.w	r2, r7, #15
 80021be:	79fb      	ldrb	r3, [r7, #7]
 80021c0:	2164      	movs	r1, #100	; 0x64
 80021c2:	4618      	mov	r0, r3
 80021c4:	f7fe fe70 	bl	8000ea8 <VL6180x_GetCachedByte>
 80021c8:	61f8      	str	r0, [r7, #28]
		if (status) {
 80021ca:	69fb      	ldr	r3, [r7, #28]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d133      	bne.n	8002238 <_filter_GetResult+0x94>
		    VL6180x_ErrLog("RESULT_RANGE_RAW rd fail");
		    break;
		}
		m_rawRange_mm = u8;
 80021d0:	7bfb      	ldrb	r3, [r7, #15]
 80021d2:	61bb      	str	r3, [r7, #24]

		FilteredRange = _filter_Start(dev, pRangeData->range_mm, (m_rawRange_mm * scaler), pRangeData->rtnRate, pRangeData->rtnAmbRate, pRangeData->errorStatus);
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	b299      	uxth	r1, r3
 80021da:	7dfb      	ldrb	r3, [r7, #23]
 80021dc:	b29a      	uxth	r2, r3
 80021de:	69bb      	ldr	r3, [r7, #24]
 80021e0:	b29b      	uxth	r3, r3
 80021e2:	fb12 f303 	smulbb	r3, r2, r3
 80021e6:	b29c      	uxth	r4, r3
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	691d      	ldr	r5, [r3, #16]
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	68db      	ldr	r3, [r3, #12]
 80021f0:	683a      	ldr	r2, [r7, #0]
 80021f2:	6892      	ldr	r2, [r2, #8]
 80021f4:	b292      	uxth	r2, r2
 80021f6:	79f8      	ldrb	r0, [r7, #7]
 80021f8:	9201      	str	r2, [sp, #4]
 80021fa:	9300      	str	r3, [sp, #0]
 80021fc:	462b      	mov	r3, r5
 80021fe:	4622      	mov	r2, r4
 8002200:	f7ff fafe 	bl	8001800 <_filter_Start>
 8002204:	6138      	str	r0, [r7, #16]
		if (FilteredRange < 0) {
 8002206:	693b      	ldr	r3, [r7, #16]
 8002208:	2b00      	cmp	r3, #0
 800220a:	da03      	bge.n	8002214 <_filter_GetResult+0x70>
		    status = -1;
 800220c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002210:	61fb      	str	r3, [r7, #28]
		    break;
 8002212:	e012      	b.n	800223a <_filter_GetResult+0x96>
		}
		pRangeData->FilteredData.range_mm = FilteredRange;
 8002214:	693b      	ldr	r3, [r7, #16]
 8002216:	b29a      	uxth	r2, r3
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	841a      	strh	r2, [r3, #32]
		pRangeData->FilteredData.rawRange_mm = m_rawRange_mm * scaler;
 800221c:	7dfb      	ldrb	r3, [r7, #23]
 800221e:	b29a      	uxth	r2, r3
 8002220:	69bb      	ldr	r3, [r7, #24]
 8002222:	b29b      	uxth	r3, r3
 8002224:	fb12 f303 	smulbb	r3, r2, r3
 8002228:	b29a      	uxth	r2, r3
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	845a      	strh	r2, [r3, #34]	; 0x22
		pRangeData->FilteredData.filterError= _FilterData(filterError);
 800222e:	4b05      	ldr	r3, [pc, #20]	; (8002244 <_filter_GetResult+0xa0>)
 8002230:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	625a      	str	r2, [r3, #36]	; 0x24
 8002236:	e000      	b.n	800223a <_filter_GetResult+0x96>
		    break;
 8002238:	bf00      	nop
	} while (0);
	return status;
 800223a:	69fb      	ldr	r3, [r7, #28]
}
 800223c:	4618      	mov	r0, r3
 800223e:	3720      	adds	r7, #32
 8002240:	46bd      	mov	sp, r7
 8002242:	bdb0      	pop	{r4, r5, r7, pc}
 8002244:	20000004 	.word	0x20000004

08002248 <_GetRateResult>:
#endif /* VL6180x_WRAP_AROUND_FILTER_SUPPORT */

#ifdef VL6180x_HAVE_RATE_DATA

static int _GetRateResult(VL6180xDev_t dev, VL6180x_RangeData_t *pRangeData)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b08c      	sub	sp, #48	; 0x30
 800224c:	af00      	add	r7, sp, #0
 800224e:	4603      	mov	r3, r0
 8002250:	6039      	str	r1, [r7, #0]
 8002252:	71fb      	strb	r3, [r7, #7]
	uint32_t m_rtnConvTime = 0;
 8002254:	2300      	movs	r3, #0
 8002256:	617b      	str	r3, [r7, #20]
	uint32_t m_rtnSignalRate = 0;
 8002258:	2300      	movs	r3, #0
 800225a:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t m_rtnAmbientRate = 0;
 800225c:	2300      	movs	r3, #0
 800225e:	623b      	str	r3, [r7, #32]
	uint32_t m_rtnSignalCount = 0;
 8002260:	2300      	movs	r3, #0
 8002262:	613b      	str	r3, [r7, #16]
	uint32_t m_rtnAmbientCount = 0;
 8002264:	2300      	movs	r3, #0
 8002266:	60fb      	str	r3, [r7, #12]
	uint32_t m_refConvTime = 0;
 8002268:	2300      	movs	r3, #0
 800226a:	60bb      	str	r3, [r7, #8]
	uint32_t cRtnSignalCountMax = 0x7FFFFFFF;
 800226c:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8002270:	61fb      	str	r3, [r7, #28]
	uint32_t cDllPeriods = 6;
 8002272:	2306      	movs	r3, #6
 8002274:	61bb      	str	r3, [r7, #24]
	uint32_t calcConvTime = 0;
 8002276:	2300      	movs	r3, #0
 8002278:	62fb      	str	r3, [r7, #44]	; 0x2c

	int status;

	do {
		status = VL6180x_GetCachedDWord(dev, RESULT_RANGE_RETURN_SIGNAL_COUNT, &m_rtnSignalCount);
 800227a:	f107 0210 	add.w	r2, r7, #16
 800227e:	79fb      	ldrb	r3, [r7, #7]
 8002280:	216c      	movs	r1, #108	; 0x6c
 8002282:	4618      	mov	r0, r3
 8002284:	f7fe fd98 	bl	8000db8 <VL6180x_GetCachedDWord>
 8002288:	62b8      	str	r0, [r7, #40]	; 0x28
		if (status) {
 800228a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800228c:	2b00      	cmp	r3, #0
 800228e:	d156      	bne.n	800233e <_GetRateResult+0xf6>
			VL6180x_ErrLog("RESULT_RANGE_RETURN_SIGNAL_COUNT rd fail");
			break;
		}
		if (m_rtnSignalCount > cRtnSignalCountMax) {
 8002290:	693b      	ldr	r3, [r7, #16]
 8002292:	69fa      	ldr	r2, [r7, #28]
 8002294:	429a      	cmp	r2, r3
 8002296:	d201      	bcs.n	800229c <_GetRateResult+0x54>
			m_rtnSignalCount = 0;
 8002298:	2300      	movs	r3, #0
 800229a:	613b      	str	r3, [r7, #16]
		}

		status = VL6180x_GetCachedDWord(dev, RESULT_RANGE_RETURN_AMB_COUNT, &m_rtnAmbientCount);
 800229c:	f107 020c 	add.w	r2, r7, #12
 80022a0:	79fb      	ldrb	r3, [r7, #7]
 80022a2:	2174      	movs	r1, #116	; 0x74
 80022a4:	4618      	mov	r0, r3
 80022a6:	f7fe fd87 	bl	8000db8 <VL6180x_GetCachedDWord>
 80022aa:	62b8      	str	r0, [r7, #40]	; 0x28
		if (status) {
 80022ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d147      	bne.n	8002342 <_GetRateResult+0xfa>
			VL6180x_ErrLog("RESULT_RANGE_RETURN_AMB_COUNTrd fail");
			break;
		}


		status = VL6180x_GetCachedDWord(dev, RESULT_RANGE_RETURN_CONV_TIME, &m_rtnConvTime);
 80022b2:	f107 0214 	add.w	r2, r7, #20
 80022b6:	79fb      	ldrb	r3, [r7, #7]
 80022b8:	217c      	movs	r1, #124	; 0x7c
 80022ba:	4618      	mov	r0, r3
 80022bc:	f7fe fd7c 	bl	8000db8 <VL6180x_GetCachedDWord>
 80022c0:	62b8      	str	r0, [r7, #40]	; 0x28
		if (status) {
 80022c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d13e      	bne.n	8002346 <_GetRateResult+0xfe>
			VL6180x_ErrLog("RESULT_RANGE_RETURN_CONV_TIME rd fail");
			break;
		}

		status = VL6180x_GetCachedDWord(dev, RESULT_RANGE_REFERENCE_CONV_TIME, &m_refConvTime);
 80022c8:	f107 0208 	add.w	r2, r7, #8
 80022cc:	79fb      	ldrb	r3, [r7, #7]
 80022ce:	2180      	movs	r1, #128	; 0x80
 80022d0:	4618      	mov	r0, r3
 80022d2:	f7fe fd71 	bl	8000db8 <VL6180x_GetCachedDWord>
 80022d6:	62b8      	str	r0, [r7, #40]	; 0x28
		if (status) {
 80022d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d135      	bne.n	800234a <_GetRateResult+0x102>
			VL6180x_ErrLog("RESULT_RANGE_REFERENCE_CONV_TIME rd fail");
			break;
		}

		pRangeData->rtnConvTime = m_rtnConvTime;
 80022de:	697a      	ldr	r2, [r7, #20]
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	615a      	str	r2, [r3, #20]
		pRangeData->refConvTime = m_refConvTime;
 80022e4:	68ba      	ldr	r2, [r7, #8]
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	619a      	str	r2, [r3, #24]

		calcConvTime = m_refConvTime;
 80022ea:	68bb      	ldr	r3, [r7, #8]
 80022ec:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (m_rtnConvTime > m_refConvTime) {
 80022ee:	697a      	ldr	r2, [r7, #20]
 80022f0:	68bb      	ldr	r3, [r7, #8]
 80022f2:	429a      	cmp	r2, r3
 80022f4:	d901      	bls.n	80022fa <_GetRateResult+0xb2>
			calcConvTime = m_rtnConvTime;
 80022f6:	697b      	ldr	r3, [r7, #20]
 80022f8:	62fb      	str	r3, [r7, #44]	; 0x2c
		}
		if (calcConvTime == 0)
 80022fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d102      	bne.n	8002306 <_GetRateResult+0xbe>
			calcConvTime = 63000;
 8002300:	f24f 6318 	movw	r3, #63000	; 0xf618
 8002304:	62fb      	str	r3, [r7, #44]	; 0x2c

		m_rtnSignalRate = (m_rtnSignalCount * 1000) / calcConvTime;
 8002306:	693b      	ldr	r3, [r7, #16]
 8002308:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800230c:	fb03 f202 	mul.w	r2, r3, r2
 8002310:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002312:	fbb2 f3f3 	udiv	r3, r2, r3
 8002316:	627b      	str	r3, [r7, #36]	; 0x24
		m_rtnAmbientRate = (m_rtnAmbientCount * cDllPeriods * 1000) / calcConvTime;
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	69ba      	ldr	r2, [r7, #24]
 800231c:	fb02 f303 	mul.w	r3, r2, r3
 8002320:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002324:	fb03 f202 	mul.w	r2, r3, r2
 8002328:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800232a:	fbb2 f3f3 	udiv	r3, r2, r3
 800232e:	623b      	str	r3, [r7, #32]

		pRangeData->rtnRate = m_rtnSignalRate;
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002334:	611a      	str	r2, [r3, #16]
		pRangeData->rtnAmbRate = m_rtnAmbientRate;
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	6a3a      	ldr	r2, [r7, #32]
 800233a:	60da      	str	r2, [r3, #12]
 800233c:	e006      	b.n	800234c <_GetRateResult+0x104>
			break;
 800233e:	bf00      	nop
 8002340:	e004      	b.n	800234c <_GetRateResult+0x104>
			break;
 8002342:	bf00      	nop
 8002344:	e002      	b.n	800234c <_GetRateResult+0x104>
			break;
 8002346:	bf00      	nop
 8002348:	e000      	b.n	800234c <_GetRateResult+0x104>
			break;
 800234a:	bf00      	nop


	} while (0);
	return status;
 800234c:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 800234e:	4618      	mov	r0, r3
 8002350:	3730      	adds	r7, #48	; 0x30
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}

08002356 <VL6180x_SqrtUint32>:
/*
 * 32 bit integer square root with not so bad precision (integer result) and is quite fast
 * see http://en.wikipedia.org/wiki/Methods_of_computing_square_roots
 */
uint32_t VL6180x_SqrtUint32(uint32_t num)
{
 8002356:	b480      	push	{r7}
 8002358:	b085      	sub	sp, #20
 800235a:	af00      	add	r7, sp, #0
 800235c:	6078      	str	r0, [r7, #4]
	uint32_t res = 0;
 800235e:	2300      	movs	r3, #0
 8002360:	60fb      	str	r3, [r7, #12]
	uint32_t bit = 1 << 30; /* The second-to-top bit is set: 1 << 30 for 32 bits */
 8002362:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002366:	60bb      	str	r3, [r7, #8]

	/* "bit" starts at the highest power of four <= the argument. */
	while (bit > num)
 8002368:	e002      	b.n	8002370 <VL6180x_SqrtUint32+0x1a>
		bit >>= 2;
 800236a:	68bb      	ldr	r3, [r7, #8]
 800236c:	089b      	lsrs	r3, r3, #2
 800236e:	60bb      	str	r3, [r7, #8]
	while (bit > num)
 8002370:	68ba      	ldr	r2, [r7, #8]
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	429a      	cmp	r2, r3
 8002376:	d8f8      	bhi.n	800236a <VL6180x_SqrtUint32+0x14>

	while (bit != 0) {
 8002378:	e017      	b.n	80023aa <VL6180x_SqrtUint32+0x54>
		if (num >= res + bit) {
 800237a:	68fa      	ldr	r2, [r7, #12]
 800237c:	68bb      	ldr	r3, [r7, #8]
 800237e:	4413      	add	r3, r2
 8002380:	687a      	ldr	r2, [r7, #4]
 8002382:	429a      	cmp	r2, r3
 8002384:	d30b      	bcc.n	800239e <VL6180x_SqrtUint32+0x48>
		    num -= res + bit;
 8002386:	68fa      	ldr	r2, [r7, #12]
 8002388:	68bb      	ldr	r3, [r7, #8]
 800238a:	4413      	add	r3, r2
 800238c:	687a      	ldr	r2, [r7, #4]
 800238e:	1ad3      	subs	r3, r2, r3
 8002390:	607b      	str	r3, [r7, #4]
		    res = (res >> 1) + bit;
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	085b      	lsrs	r3, r3, #1
 8002396:	68ba      	ldr	r2, [r7, #8]
 8002398:	4413      	add	r3, r2
 800239a:	60fb      	str	r3, [r7, #12]
 800239c:	e002      	b.n	80023a4 <VL6180x_SqrtUint32+0x4e>
		} else
		    res >>= 1;
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	085b      	lsrs	r3, r3, #1
 80023a2:	60fb      	str	r3, [r7, #12]
		bit >>= 2;
 80023a4:	68bb      	ldr	r3, [r7, #8]
 80023a6:	089b      	lsrs	r3, r3, #2
 80023a8:	60bb      	str	r3, [r7, #8]
	while (bit != 0) {
 80023aa:	68bb      	ldr	r3, [r7, #8]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d1e4      	bne.n	800237a <VL6180x_SqrtUint32+0x24>
	}
	return res;
 80023b0:	68fb      	ldr	r3, [r7, #12]
}
 80023b2:	4618      	mov	r0, r3
 80023b4:	3714      	adds	r7, #20
 80023b6:	46bd      	mov	sp, r7
 80023b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023bc:	4770      	bx	lr
	...

080023c0 <_DMax_OneTimeInit>:
#endif


/* DMax one time init */
void _DMax_OneTimeInit(VL6180xDev_t dev)
{
 80023c0:	b480      	push	{r7}
 80023c2:	b083      	sub	sp, #12
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	4603      	mov	r3, r0
 80023c8:	71fb      	strb	r3, [r7, #7]
	_DMaxData(ambTuningWindowFactor_K) = DEF_AMBIENT_TUNING;
 80023ca:	4b05      	ldr	r3, [pc, #20]	; (80023e0 <_DMax_OneTimeInit+0x20>)
 80023cc:	2250      	movs	r2, #80	; 0x50
 80023ce:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
}
 80023d2:	bf00      	nop
 80023d4:	370c      	adds	r7, #12
 80023d6:	46bd      	mov	sp, r7
 80023d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023dc:	4770      	bx	lr
 80023de:	bf00      	nop
 80023e0:	20000004 	.word	0x20000004

080023e4 <_DMax_RawValueAtRateKCps>:


static uint32_t _DMax_RawValueAtRateKCps(VL6180xDev_t dev, int32_t rate)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b088      	sub	sp, #32
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	4603      	mov	r3, r0
 80023ec:	6039      	str	r1, [r7, #0]
 80023ee:	71fb      	strb	r3, [r7, #7]
	uint32_t RawDMax;
	DMaxFix_t retSignalAt400mm;
	uint32_t ambTuningWindowFactor_K;


	ambTuningWindowFactor_K = _DMaxData(ambTuningWindowFactor_K);
 80023f0:	4b21      	ldr	r3, [pc, #132]	; (8002478 <_DMax_RawValueAtRateKCps+0x94>)
 80023f2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80023f6:	617b      	str	r3, [r7, #20]
	snrLimit_K              = _DMaxData(snrLimit_K);
 80023f8:	4b1f      	ldr	r3, [pc, #124]	; (8002478 <_DMax_RawValueAtRateKCps+0x94>)
 80023fa:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80023fe:	613b      	str	r3, [r7, #16]
	retSignalAt400mm        = _DMaxData(retSignalAt400mm);
 8002400:	4b1d      	ldr	r3, [pc, #116]	; (8002478 <_DMax_RawValueAtRateKCps+0x94>)
 8002402:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002406:	60fb      	str	r3, [r7, #12]
	/* 12 to 18 bits Kcps */
	if (rate > 0) {
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	2b00      	cmp	r3, #0
 800240c:	dd2c      	ble.n	8002468 <_DMax_RawValueAtRateKCps+0x84>
		DMaxSq = 400 * 400 * 1000 / rate - (400 * 400 / 330);
 800240e:	4a1b      	ldr	r2, [pc, #108]	; (800247c <_DMax_RawValueAtRateKCps+0x98>)
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	fb92 f3f3 	sdiv	r3, r2, r3
 8002416:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800241a:	61fb      	str	r3, [r7, #28]
		/* K of (1/RtnAmb -1/330 )=> 30bit- (12-18)bit  => 12-18 bits*/
		if (DMaxSq <= 0) {
 800241c:	69fb      	ldr	r3, [r7, #28]
 800241e:	2b00      	cmp	r3, #0
 8002420:	dc02      	bgt.n	8002428 <_DMax_RawValueAtRateKCps+0x44>
		    RawDMax = 0;
 8002422:	2300      	movs	r3, #0
 8002424:	61bb      	str	r3, [r7, #24]
 8002426:	e022      	b.n	800246e <_DMax_RawValueAtRateKCps+0x8a>
		} else {
		    /* value can be more 32 bit so base on raneg apply
			 * retSignalAt400mm before or after division to presevr accuracy */
		    if (DMaxSq < (2 << 12)) {
 8002428:	69fb      	ldr	r3, [r7, #28]
 800242a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800242e:	da0b      	bge.n	8002448 <_DMax_RawValueAtRateKCps+0x64>
				DMaxSq = DMaxSq * retSignalAt400mm /
 8002430:	69fb      	ldr	r3, [r7, #28]
 8002432:	68fa      	ldr	r2, [r7, #12]
 8002434:	fb02 f303 	mul.w	r3, r2, r3
 8002438:	4619      	mov	r1, r3
							(snrLimit_K + ambTuningWindowFactor_K);
 800243a:	693a      	ldr	r2, [r7, #16]
 800243c:	697b      	ldr	r3, [r7, #20]
 800243e:	4413      	add	r3, r2
				DMaxSq = DMaxSq * retSignalAt400mm /
 8002440:	fbb1 f3f3 	udiv	r3, r1, r3
 8002444:	61fb      	str	r3, [r7, #28]
 8002446:	e009      	b.n	800245c <_DMax_RawValueAtRateKCps+0x78>
				/* max 12 + 12 to 18 -10 => 12-26 bit */
		    } else {
				DMaxSq = DMaxSq / (snrLimit_K + ambTuningWindowFactor_K) * retSignalAt400mm;
 8002448:	69fa      	ldr	r2, [r7, #28]
 800244a:	6939      	ldr	r1, [r7, #16]
 800244c:	697b      	ldr	r3, [r7, #20]
 800244e:	440b      	add	r3, r1
 8002450:	fbb2 f3f3 	udiv	r3, r2, r3
 8002454:	68fa      	ldr	r2, [r7, #12]
 8002456:	fb02 f303 	mul.w	r3, r2, r3
 800245a:	61fb      	str	r3, [r7, #28]
				/* 12 to 18 -10 + 12 to 18 *=> 12-26 bit */
		    }
		    RawDMax = VL6180x_SqrtUint32(DMaxSq);
 800245c:	69fb      	ldr	r3, [r7, #28]
 800245e:	4618      	mov	r0, r3
 8002460:	f7ff ff79 	bl	8002356 <VL6180x_SqrtUint32>
 8002464:	61b8      	str	r0, [r7, #24]
 8002466:	e002      	b.n	800246e <_DMax_RawValueAtRateKCps+0x8a>
		}
	} else {
		RawDMax = 0x7FFFFFFF; /* bigest possibmle 32bit signed value */
 8002468:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800246c:	61bb      	str	r3, [r7, #24]
	}
	return RawDMax;
 800246e:	69bb      	ldr	r3, [r7, #24]
}
 8002470:	4618      	mov	r0, r3
 8002472:	3720      	adds	r7, #32
 8002474:	46bd      	mov	sp, r7
 8002476:	bd80      	pop	{r7, pc}
 8002478:	20000004 	.word	0x20000004
 800247c:	09896800 	.word	0x09896800

08002480 <_DMax_InitData>:
 *  SYSRANGE_MAX_CONVERGENCE_TIME
 *  SYSRANGE_RANGE_CHECK_ENABLES    mask RANGE_CHECK_RANGE_ENABLE_MASK
 *  range 0xb8-0xbb (0xbb)
 */
static int _DMax_InitData(VL6180xDev_t dev)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b08c      	sub	sp, #48	; 0x30
 8002484:	af00      	add	r7, sp, #0
 8002486:	4603      	mov	r3, r0
 8002488:	71fb      	strb	r3, [r7, #7]
	int32_t minSignalNeeded;
	uint8_t SysRangeCheckEn;
	uint8_t snrLimit;
	static const int ROMABLE_DATA MaxConvTimeAdjust = -4;

	warning = 0;
 800248a:	2300      	movs	r3, #0
 800248c:	62bb      	str	r3, [r7, #40]	; 0x28

	LOG_FUNCTION_START("");
	do {
		status = VL6180x_RdByte(dev, 0x02A, &u8);
 800248e:	f107 0213 	add.w	r2, r7, #19
 8002492:	79fb      	ldrb	r3, [r7, #7]
 8002494:	212a      	movs	r1, #42	; 0x2a
 8002496:	4618      	mov	r0, r3
 8002498:	f000 f9d1 	bl	800283e <VL6180x_RdByte>
 800249c:	62f8      	str	r0, [r7, #44]	; 0x2c
		if (status) {
 800249e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	f040 8096 	bne.w	80025d2 <_DMax_InitData+0x152>
		    VL6180x_ErrLog("Reg 0x02A rd fail");
		    break;
		}

		if (u8 == 0) {
 80024a6:	7cfb      	ldrb	r3, [r7, #19]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d103      	bne.n	80024b4 <_DMax_InitData+0x34>
		    warning = CALIBRATION_WARNING;
 80024ac:	2301      	movs	r3, #1
 80024ae:	62bb      	str	r3, [r7, #40]	; 0x28
		    u8 = 40; /* use a default average value */
 80024b0:	2328      	movs	r3, #40	; 0x28
 80024b2:	74fb      	strb	r3, [r7, #19]
		}
		Reg2A_KCps = Fix7_2_KCPs(u8); /* convert to KCPs */
 80024b4:	7cfb      	ldrb	r3, [r7, #19]
 80024b6:	461a      	mov	r2, r3
 80024b8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80024bc:	fb02 f303 	mul.w	r3, r2, r3
 80024c0:	09db      	lsrs	r3, r3, #7
 80024c2:	61fb      	str	r3, [r7, #28]

		status = VL6180x_RdByte(dev, SYSRANGE_RANGE_CHECK_ENABLES, &SysRangeCheckEn);
 80024c4:	f107 020a 	add.w	r2, r7, #10
 80024c8:	79fb      	ldrb	r3, [r7, #7]
 80024ca:	212d      	movs	r1, #45	; 0x2d
 80024cc:	4618      	mov	r0, r3
 80024ce:	f000 f9b6 	bl	800283e <VL6180x_RdByte>
 80024d2:	62f8      	str	r0, [r7, #44]	; 0x2c
		if (status) {
 80024d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d17d      	bne.n	80025d6 <_DMax_InitData+0x156>
		    VL6180x_ErrLog("SYSRANGE_RANGE_CHECK_ENABLES rd fail ");
		    break;
		}

		status = VL6180x_RdByte(dev, SYSRANGE_MAX_CONVERGENCE_TIME, &MaxConvTime);
 80024da:	f107 020b 	add.w	r2, r7, #11
 80024de:	79fb      	ldrb	r3, [r7, #7]
 80024e0:	211c      	movs	r1, #28
 80024e2:	4618      	mov	r0, r3
 80024e4:	f000 f9ab 	bl	800283e <VL6180x_RdByte>
 80024e8:	62f8      	str	r0, [r7, #44]	; 0x2c
		if (status) {
 80024ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d174      	bne.n	80025da <_DMax_InitData+0x15a>
		    VL6180x_ErrLog("SYSRANGE_MAX_CONVERGENCE_TIME rd fail ");
			break;
		}

		status = VL6180x_RdDWord(dev, 0x0B8, &RegB8);
 80024f0:	f107 020c 	add.w	r2, r7, #12
 80024f4:	79fb      	ldrb	r3, [r7, #7]
 80024f6:	21b8      	movs	r1, #184	; 0xb8
 80024f8:	4618      	mov	r0, r3
 80024fa:	f000 fa0f 	bl	800291c <VL6180x_RdDWord>
 80024fe:	62f8      	str	r0, [r7, #44]	; 0x2c
		if (status) {
 8002500:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002502:	2b00      	cmp	r3, #0
 8002504:	d16b      	bne.n	80025de <_DMax_InitData+0x15e>
		    VL6180x_ErrLog("reg 0x0B8 rd fail ");
		    break;
		}

		status = VL6180x_RdByte(dev, SYSRANGE_MAX_AMBIENT_LEVEL_MULT, &snrLimit);
 8002506:	f107 0209 	add.w	r2, r7, #9
 800250a:	79fb      	ldrb	r3, [r7, #7]
 800250c:	212c      	movs	r1, #44	; 0x2c
 800250e:	4618      	mov	r0, r3
 8002510:	f000 f995 	bl	800283e <VL6180x_RdByte>
 8002514:	62f8      	str	r0, [r7, #44]	; 0x2c
		if (status) {
 8002516:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002518:	2b00      	cmp	r3, #0
 800251a:	d162      	bne.n	80025e2 <_DMax_InitData+0x162>
		    VL6180x_ErrLog("SYSRANGE_MAX_AMBIENT_LEVEL_MULT rd fail ");
		    break;
		}
		_DMaxData(snrLimit_K) = (int32_t)16 * 1000 / snrLimit;
 800251c:	7a7b      	ldrb	r3, [r7, #9]
 800251e:	461a      	mov	r2, r3
 8002520:	f44f 537a 	mov.w	r3, #16000	; 0x3e80
 8002524:	fb93 f3f2 	sdiv	r3, r3, r2
 8002528:	4a34      	ldr	r2, [pc, #208]	; (80025fc <_DMax_InitData+0x17c>)
 800252a:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
		XTalkCompRate_KCps =   VL6180xDevDataGet(dev, XTalkCompRate_KCps);
 800252e:	4b33      	ldr	r3, [pc, #204]	; (80025fc <_DMax_InitData+0x17c>)
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	61bb      	str	r3, [r7, #24]

		if (Reg2A_KCps >= XTalkCompRate_KCps) {
 8002534:	69fa      	ldr	r2, [r7, #28]
 8002536:	69bb      	ldr	r3, [r7, #24]
 8002538:	429a      	cmp	r2, r3
 800253a:	d304      	bcc.n	8002546 <_DMax_InitData+0xc6>
		    _DMaxData(retSignalAt400mm) = Reg2A_KCps;
 800253c:	69fb      	ldr	r3, [r7, #28]
 800253e:	4a2f      	ldr	r2, [pc, #188]	; (80025fc <_DMax_InitData+0x17c>)
 8002540:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8002544:	e003      	b.n	800254e <_DMax_InitData+0xce>
		} else{
		    _DMaxData(retSignalAt400mm) = 0;
 8002546:	4b2d      	ldr	r3, [pc, #180]	; (80025fc <_DMax_InitData+0x17c>)
 8002548:	2200      	movs	r2, #0
 800254a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
			/* Reg2A_K - XTalkCompRate_KCp <0 is invalid */
		}

		/* if xtalk range check is off omit it in snr clipping */
		if (SysRangeCheckEn&RANGE_CHECK_RANGE_ENABLE_MASK) {
 800254e:	7abb      	ldrb	r3, [r7, #10]
 8002550:	f003 0302 	and.w	r3, r3, #2
 8002554:	2b00      	cmp	r3, #0
 8002556:	d013      	beq.n	8002580 <_DMax_InitData+0x100>
		    status = VL6180x_RdWord(dev, SYSRANGE_RANGE_IGNORE_THRESHOLD, &u16);
 8002558:	f107 0210 	add.w	r2, r7, #16
 800255c:	79fb      	ldrb	r3, [r7, #7]
 800255e:	2126      	movs	r1, #38	; 0x26
 8002560:	4618      	mov	r0, r3
 8002562:	f000 f99f 	bl	80028a4 <VL6180x_RdWord>
 8002566:	62f8      	str	r0, [r7, #44]	; 0x2c
		    if (status) {
 8002568:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800256a:	2b00      	cmp	r3, #0
 800256c:	d13b      	bne.n	80025e6 <_DMax_InitData+0x166>
				VL6180x_ErrLog("SYSRANGE_RANGE_IGNORE_THRESHOLD rd fail ");
				break;
		    }
		    RangeIgnoreThreshold = Fix7_2_KCPs(u16);
 800256e:	8a3b      	ldrh	r3, [r7, #16]
 8002570:	461a      	mov	r2, r3
 8002572:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002576:	fb02 f303 	mul.w	r3, r2, r3
 800257a:	09db      	lsrs	r3, r3, #7
 800257c:	627b      	str	r3, [r7, #36]	; 0x24
 800257e:	e001      	b.n	8002584 <_DMax_InitData+0x104>
		} else{
		    RangeIgnoreThreshold  = 0;
 8002580:	2300      	movs	r3, #0
 8002582:	627b      	str	r3, [r7, #36]	; 0x24
		}

		minSignalNeeded = (RegB8 * 256) / ((int32_t)MaxConvTime + (int32_t)MaxConvTimeAdjust);
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	021b      	lsls	r3, r3, #8
 8002588:	7afa      	ldrb	r2, [r7, #11]
 800258a:	4611      	mov	r1, r2
 800258c:	4a1c      	ldr	r2, [pc, #112]	; (8002600 <_DMax_InitData+0x180>)
 800258e:	6812      	ldr	r2, [r2, #0]
 8002590:	440a      	add	r2, r1
 8002592:	fbb3 f3f2 	udiv	r3, r3, r2
 8002596:	623b      	str	r3, [r7, #32]
		/* KCps 8+8 bit -(1 to 6 bit) => 15-10 bit */
		/* minSignalNeeded = max ( minSignalNeeded,  RangeIgnoreThreshold - XTalkCompRate_KCps) */
		if (minSignalNeeded  <= (int32_t)RangeIgnoreThreshold - (int32_t)XTalkCompRate_KCps)
 8002598:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800259a:	69bb      	ldr	r3, [r7, #24]
 800259c:	1ad3      	subs	r3, r2, r3
 800259e:	6a3a      	ldr	r2, [r7, #32]
 80025a0:	429a      	cmp	r2, r3
 80025a2:	dc03      	bgt.n	80025ac <_DMax_InitData+0x12c>
		    minSignalNeeded  =  RangeIgnoreThreshold - XTalkCompRate_KCps;
 80025a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025a6:	69bb      	ldr	r3, [r7, #24]
 80025a8:	1ad3      	subs	r3, r2, r3
 80025aa:	623b      	str	r3, [r7, #32]

		u32 = (minSignalNeeded*(uint32_t)snrLimit) / 16;
 80025ac:	7a7b      	ldrb	r3, [r7, #9]
 80025ae:	461a      	mov	r2, r3
 80025b0:	6a3b      	ldr	r3, [r7, #32]
 80025b2:	fb02 f303 	mul.w	r3, r2, r3
 80025b6:	091b      	lsrs	r3, r3, #4
 80025b8:	617b      	str	r3, [r7, #20]
		_DMaxData(ClipSnrLimit) = _DMax_RawValueAtRateKCps(dev, u32);
 80025ba:	697a      	ldr	r2, [r7, #20]
 80025bc:	79fb      	ldrb	r3, [r7, #7]
 80025be:	4611      	mov	r1, r2
 80025c0:	4618      	mov	r0, r3
 80025c2:	f7ff ff0f 	bl	80023e4 <_DMax_RawValueAtRateKCps>
 80025c6:	4603      	mov	r3, r0
 80025c8:	b29a      	uxth	r2, r3
 80025ca:	4b0c      	ldr	r3, [pc, #48]	; (80025fc <_DMax_InitData+0x17c>)
 80025cc:	f8a3 20c8 	strh.w	r2, [r3, #200]	; 0xc8
 80025d0:	e00a      	b.n	80025e8 <_DMax_InitData+0x168>
		    break;
 80025d2:	bf00      	nop
 80025d4:	e008      	b.n	80025e8 <_DMax_InitData+0x168>
		    break;
 80025d6:	bf00      	nop
 80025d8:	e006      	b.n	80025e8 <_DMax_InitData+0x168>
			break;
 80025da:	bf00      	nop
 80025dc:	e004      	b.n	80025e8 <_DMax_InitData+0x168>
		    break;
 80025de:	bf00      	nop
 80025e0:	e002      	b.n	80025e8 <_DMax_InitData+0x168>
		    break;
 80025e2:	bf00      	nop
 80025e4:	e000      	b.n	80025e8 <_DMax_InitData+0x168>
				break;
 80025e6:	bf00      	nop
		/* clip to dmax to min signal snr limit rate*/
	} while (0);
	if (!status)
 80025e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d101      	bne.n	80025f2 <_DMax_InitData+0x172>
		status = warning;
 80025ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025f0:	62fb      	str	r3, [r7, #44]	; 0x2c
	LOG_FUNCTION_END(status);
	return status;
 80025f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80025f4:	4618      	mov	r0, r3
 80025f6:	3730      	adds	r7, #48	; 0x30
 80025f8:	46bd      	mov	sp, r7
 80025fa:	bd80      	pop	{r7, pc}
 80025fc:	20000004 	.word	0x20000004
 8002600:	08006e88 	.word	0x08006e88

08002604 <_DMax_Compute>:

static int _DMax_Compute(VL6180xDev_t dev, VL6180x_RangeData_t *pRange)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b086      	sub	sp, #24
 8002608:	af00      	add	r7, sp, #0
 800260a:	4603      	mov	r3, r0
 800260c:	6039      	str	r1, [r7, #0]
 800260e:	71fb      	strb	r3, [r7, #7]
	int32_t DMax;
	int scaling;
	uint16_t HwLimitAtScale;
	static const int ROMABLE_DATA rtnAmbLowLimit_KCps = 330 * 1000;

	rtnAmbRate = pRange->rtnAmbRate;
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	68db      	ldr	r3, [r3, #12]
 8002614:	613b      	str	r3, [r7, #16]
	if (rtnAmbRate  < rtnAmbLowLimit_KCps) {
 8002616:	4b1a      	ldr	r3, [pc, #104]	; (8002680 <_DMax_Compute+0x7c>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	461a      	mov	r2, r3
 800261c:	693b      	ldr	r3, [r7, #16]
 800261e:	4293      	cmp	r3, r2
 8002620:	d225      	bcs.n	800266e <_DMax_Compute+0x6a>
		DMax = _DMax_RawValueAtRateKCps(dev, rtnAmbRate);
 8002622:	693a      	ldr	r2, [r7, #16]
 8002624:	79fb      	ldrb	r3, [r7, #7]
 8002626:	4611      	mov	r1, r2
 8002628:	4618      	mov	r0, r3
 800262a:	f7ff fedb 	bl	80023e4 <_DMax_RawValueAtRateKCps>
 800262e:	4603      	mov	r3, r0
 8002630:	617b      	str	r3, [r7, #20]
		scaling = _GetUpscale(dev);
 8002632:	4b14      	ldr	r3, [pc, #80]	; (8002684 <_DMax_Compute+0x80>)
 8002634:	7e1b      	ldrb	r3, [r3, #24]
 8002636:	60fb      	str	r3, [r7, #12]
		HwLimitAtScale = UpperLimitLookUP[scaling - 1];
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	3b01      	subs	r3, #1
 800263c:	4a12      	ldr	r2, [pc, #72]	; (8002688 <_DMax_Compute+0x84>)
 800263e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002642:	817b      	strh	r3, [r7, #10]

		if (DMax > _DMaxData(ClipSnrLimit)) {
 8002644:	4b0f      	ldr	r3, [pc, #60]	; (8002684 <_DMax_Compute+0x80>)
 8002646:	f8b3 30c8 	ldrh.w	r3, [r3, #200]	; 0xc8
 800264a:	461a      	mov	r2, r3
 800264c:	697b      	ldr	r3, [r7, #20]
 800264e:	4293      	cmp	r3, r2
 8002650:	dd03      	ble.n	800265a <_DMax_Compute+0x56>
		    DMax = _DMaxData(ClipSnrLimit);
 8002652:	4b0c      	ldr	r3, [pc, #48]	; (8002684 <_DMax_Compute+0x80>)
 8002654:	f8b3 30c8 	ldrh.w	r3, [r3, #200]	; 0xc8
 8002658:	617b      	str	r3, [r7, #20]
		}
		if (DMax > HwLimitAtScale) {
 800265a:	897b      	ldrh	r3, [r7, #10]
 800265c:	697a      	ldr	r2, [r7, #20]
 800265e:	429a      	cmp	r2, r3
 8002660:	dd01      	ble.n	8002666 <_DMax_Compute+0x62>
		    DMax = HwLimitAtScale;
 8002662:	897b      	ldrh	r3, [r7, #10]
 8002664:	617b      	str	r3, [r7, #20]
		}
		pRange->DMax = DMax;
 8002666:	697a      	ldr	r2, [r7, #20]
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	61da      	str	r2, [r3, #28]
 800266c:	e002      	b.n	8002674 <_DMax_Compute+0x70>
	} else {
		pRange->DMax = 0;
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	2200      	movs	r2, #0
 8002672:	61da      	str	r2, [r3, #28]
	}
	return 0;
 8002674:	2300      	movs	r3, #0
}
 8002676:	4618      	mov	r0, r3
 8002678:	3718      	adds	r7, #24
 800267a:	46bd      	mov	sp, r7
 800267c:	bd80      	pop	{r7, pc}
 800267e:	bf00      	nop
 8002680:	08006e8c 	.word	0x08006e8c
 8002684:	20000004 	.word	0x20000004
 8002688:	08006e24 	.word	0x08006e24

0800268c <VL6180x_WrByte>:
	HAL_I2C_Master_Receive(&hi2c1, dev, buff, len, 1000);
	return 0;
}
*/

int VL6180x_WrByte(VL6180xDev_t dev, uint16_t index, uint8_t data){
 800268c:	b580      	push	{r7, lr}
 800268e:	b086      	sub	sp, #24
 8002690:	af00      	add	r7, sp, #0
 8002692:	4603      	mov	r3, r0
 8002694:	71fb      	strb	r3, [r7, #7]
 8002696:	460b      	mov	r3, r1
 8002698:	80bb      	strh	r3, [r7, #4]
 800269a:	4613      	mov	r3, r2
 800269c:	71bb      	strb	r3, [r7, #6]
    DECL_I2C_BUFFER
    VL6180x_I2C_USER_VAR

    VL6180x_GetI2CAccess(dev);

    buffer=VL6180x_GetI2cBuffer(dev,3);
 800269e:	f107 0308 	add.w	r3, r7, #8
 80026a2:	617b      	str	r3, [r7, #20]
    buffer[0]=index>>8;
 80026a4:	88bb      	ldrh	r3, [r7, #4]
 80026a6:	0a1b      	lsrs	r3, r3, #8
 80026a8:	b29b      	uxth	r3, r3
 80026aa:	b2da      	uxtb	r2, r3
 80026ac:	697b      	ldr	r3, [r7, #20]
 80026ae:	701a      	strb	r2, [r3, #0]
    buffer[1]=index&0xFF;
 80026b0:	697b      	ldr	r3, [r7, #20]
 80026b2:	3301      	adds	r3, #1
 80026b4:	88ba      	ldrh	r2, [r7, #4]
 80026b6:	b2d2      	uxtb	r2, r2
 80026b8:	701a      	strb	r2, [r3, #0]
    buffer[2]=data;
 80026ba:	697b      	ldr	r3, [r7, #20]
 80026bc:	3302      	adds	r3, #2
 80026be:	79ba      	ldrb	r2, [r7, #6]
 80026c0:	701a      	strb	r2, [r3, #0]

    status=VL6180x_I2CWrite(dev, buffer,(uint8_t)3);
 80026c2:	79fb      	ldrb	r3, [r7, #7]
 80026c4:	2203      	movs	r2, #3
 80026c6:	6979      	ldr	r1, [r7, #20]
 80026c8:	4618      	mov	r0, r3
 80026ca:	f7fd fdd1 	bl	8000270 <VL6180x_I2CWrite>
 80026ce:	6138      	str	r0, [r7, #16]
    VL6180x_DoneI2CAcces(dev);
    return status;
 80026d0:	693b      	ldr	r3, [r7, #16]
}
 80026d2:	4618      	mov	r0, r3
 80026d4:	3718      	adds	r7, #24
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd80      	pop	{r7, pc}

080026da <VL6180x_WrWord>:

int VL6180x_WrWord(VL6180xDev_t dev, uint16_t index, uint16_t data){
 80026da:	b580      	push	{r7, lr}
 80026dc:	b086      	sub	sp, #24
 80026de:	af00      	add	r7, sp, #0
 80026e0:	4603      	mov	r3, r0
 80026e2:	71fb      	strb	r3, [r7, #7]
 80026e4:	460b      	mov	r3, r1
 80026e6:	80bb      	strh	r3, [r7, #4]
 80026e8:	4613      	mov	r3, r2
 80026ea:	807b      	strh	r3, [r7, #2]
    uint8_t *buffer;
    VL6180x_I2C_USER_VAR

    VL6180x_GetI2CAccess(dev);

    buffer=VL6180x_GetI2cBuffer(dev,4);
 80026ec:	f107 0308 	add.w	r3, r7, #8
 80026f0:	617b      	str	r3, [r7, #20]
    buffer[0]=index>>8;
 80026f2:	88bb      	ldrh	r3, [r7, #4]
 80026f4:	0a1b      	lsrs	r3, r3, #8
 80026f6:	b29b      	uxth	r3, r3
 80026f8:	b2da      	uxtb	r2, r3
 80026fa:	697b      	ldr	r3, [r7, #20]
 80026fc:	701a      	strb	r2, [r3, #0]
    buffer[1]=index&0xFF;
 80026fe:	697b      	ldr	r3, [r7, #20]
 8002700:	3301      	adds	r3, #1
 8002702:	88ba      	ldrh	r2, [r7, #4]
 8002704:	b2d2      	uxtb	r2, r2
 8002706:	701a      	strb	r2, [r3, #0]
    buffer[2]=data>>8;
 8002708:	887b      	ldrh	r3, [r7, #2]
 800270a:	0a1b      	lsrs	r3, r3, #8
 800270c:	b29a      	uxth	r2, r3
 800270e:	697b      	ldr	r3, [r7, #20]
 8002710:	3302      	adds	r3, #2
 8002712:	b2d2      	uxtb	r2, r2
 8002714:	701a      	strb	r2, [r3, #0]
    buffer[3]=data&0xFF;
 8002716:	697b      	ldr	r3, [r7, #20]
 8002718:	3303      	adds	r3, #3
 800271a:	887a      	ldrh	r2, [r7, #2]
 800271c:	b2d2      	uxtb	r2, r2
 800271e:	701a      	strb	r2, [r3, #0]

    status=VL6180x_I2CWrite(dev, buffer,(uint8_t)4);
 8002720:	79fb      	ldrb	r3, [r7, #7]
 8002722:	2204      	movs	r2, #4
 8002724:	6979      	ldr	r1, [r7, #20]
 8002726:	4618      	mov	r0, r3
 8002728:	f7fd fda2 	bl	8000270 <VL6180x_I2CWrite>
 800272c:	6138      	str	r0, [r7, #16]
    VL6180x_DoneI2CAcces(dev);
    return status;
 800272e:	693b      	ldr	r3, [r7, #16]
}
 8002730:	4618      	mov	r0, r3
 8002732:	3718      	adds	r7, #24
 8002734:	46bd      	mov	sp, r7
 8002736:	bd80      	pop	{r7, pc}

08002738 <VL6180x_WrDWord>:

int VL6180x_WrDWord(VL6180xDev_t dev, uint16_t index, uint32_t data){
 8002738:	b580      	push	{r7, lr}
 800273a:	b086      	sub	sp, #24
 800273c:	af00      	add	r7, sp, #0
 800273e:	4603      	mov	r3, r0
 8002740:	603a      	str	r2, [r7, #0]
 8002742:	71fb      	strb	r3, [r7, #7]
 8002744:	460b      	mov	r3, r1
 8002746:	80bb      	strh	r3, [r7, #4]
    int  status;
    uint8_t *buffer;


    VL6180x_GetI2CAccess(dev);
    buffer=VL6180x_GetI2cBuffer(dev,6);
 8002748:	f107 0308 	add.w	r3, r7, #8
 800274c:	617b      	str	r3, [r7, #20]
    buffer[0]=index>>8;
 800274e:	88bb      	ldrh	r3, [r7, #4]
 8002750:	0a1b      	lsrs	r3, r3, #8
 8002752:	b29b      	uxth	r3, r3
 8002754:	b2da      	uxtb	r2, r3
 8002756:	697b      	ldr	r3, [r7, #20]
 8002758:	701a      	strb	r2, [r3, #0]
    buffer[1]=index&0xFF;
 800275a:	697b      	ldr	r3, [r7, #20]
 800275c:	3301      	adds	r3, #1
 800275e:	88ba      	ldrh	r2, [r7, #4]
 8002760:	b2d2      	uxtb	r2, r2
 8002762:	701a      	strb	r2, [r3, #0]
    buffer[2]=data>>24;
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	0e1a      	lsrs	r2, r3, #24
 8002768:	697b      	ldr	r3, [r7, #20]
 800276a:	3302      	adds	r3, #2
 800276c:	b2d2      	uxtb	r2, r2
 800276e:	701a      	strb	r2, [r3, #0]
    buffer[3]=(data>>16)&0xFF;
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	0c1a      	lsrs	r2, r3, #16
 8002774:	697b      	ldr	r3, [r7, #20]
 8002776:	3303      	adds	r3, #3
 8002778:	b2d2      	uxtb	r2, r2
 800277a:	701a      	strb	r2, [r3, #0]
    buffer[4]=(data>>8)&0xFF;;
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	0a1a      	lsrs	r2, r3, #8
 8002780:	697b      	ldr	r3, [r7, #20]
 8002782:	3304      	adds	r3, #4
 8002784:	b2d2      	uxtb	r2, r2
 8002786:	701a      	strb	r2, [r3, #0]
    buffer[5]=data&0xFF;
 8002788:	697b      	ldr	r3, [r7, #20]
 800278a:	3305      	adds	r3, #5
 800278c:	683a      	ldr	r2, [r7, #0]
 800278e:	b2d2      	uxtb	r2, r2
 8002790:	701a      	strb	r2, [r3, #0]
    status=VL6180x_I2CWrite(dev, buffer,(uint8_t)6);
 8002792:	79fb      	ldrb	r3, [r7, #7]
 8002794:	2206      	movs	r2, #6
 8002796:	6979      	ldr	r1, [r7, #20]
 8002798:	4618      	mov	r0, r3
 800279a:	f7fd fd69 	bl	8000270 <VL6180x_I2CWrite>
 800279e:	6138      	str	r0, [r7, #16]
    VL6180x_DoneI2CAcces(dev);

    return status;
 80027a0:	693b      	ldr	r3, [r7, #16]
}
 80027a2:	4618      	mov	r0, r3
 80027a4:	3718      	adds	r7, #24
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bd80      	pop	{r7, pc}

080027aa <VL6180x_UpdateByte>:

int VL6180x_UpdateByte(VL6180xDev_t dev, uint16_t index, uint8_t AndData, uint8_t OrData){
 80027aa:	b590      	push	{r4, r7, lr}
 80027ac:	b087      	sub	sp, #28
 80027ae:	af00      	add	r7, sp, #0
 80027b0:	4604      	mov	r4, r0
 80027b2:	4608      	mov	r0, r1
 80027b4:	4611      	mov	r1, r2
 80027b6:	461a      	mov	r2, r3
 80027b8:	4623      	mov	r3, r4
 80027ba:	71fb      	strb	r3, [r7, #7]
 80027bc:	4603      	mov	r3, r0
 80027be:	80bb      	strh	r3, [r7, #4]
 80027c0:	460b      	mov	r3, r1
 80027c2:	71bb      	strb	r3, [r7, #6]
 80027c4:	4613      	mov	r3, r2
 80027c6:	70fb      	strb	r3, [r7, #3]
    uint8_t *buffer;
    DECL_I2C_BUFFER

    VL6180x_GetI2CAccess(dev);

    buffer=VL6180x_GetI2cBuffer(dev,3);
 80027c8:	f107 0308 	add.w	r3, r7, #8
 80027cc:	613b      	str	r3, [r7, #16]
    buffer[0]=index>>8;
 80027ce:	88bb      	ldrh	r3, [r7, #4]
 80027d0:	0a1b      	lsrs	r3, r3, #8
 80027d2:	b29b      	uxth	r3, r3
 80027d4:	b2da      	uxtb	r2, r3
 80027d6:	693b      	ldr	r3, [r7, #16]
 80027d8:	701a      	strb	r2, [r3, #0]
    buffer[1]=index&0xFF;
 80027da:	693b      	ldr	r3, [r7, #16]
 80027dc:	3301      	adds	r3, #1
 80027de:	88ba      	ldrh	r2, [r7, #4]
 80027e0:	b2d2      	uxtb	r2, r2
 80027e2:	701a      	strb	r2, [r3, #0]

    status=VL6180x_I2CWrite(dev, (uint8_t *)buffer,(uint8_t)2);
 80027e4:	79fb      	ldrb	r3, [r7, #7]
 80027e6:	2202      	movs	r2, #2
 80027e8:	6939      	ldr	r1, [r7, #16]
 80027ea:	4618      	mov	r0, r3
 80027ec:	f7fd fd40 	bl	8000270 <VL6180x_I2CWrite>
 80027f0:	6178      	str	r0, [r7, #20]
    if( !status ){
 80027f2:	697b      	ldr	r3, [r7, #20]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d11d      	bne.n	8002834 <VL6180x_UpdateByte+0x8a>
        /* read data direct onto buffer */
        status=VL6180x_I2CRead(dev, &buffer[2],1);
 80027f8:	693b      	ldr	r3, [r7, #16]
 80027fa:	1c99      	adds	r1, r3, #2
 80027fc:	79fb      	ldrb	r3, [r7, #7]
 80027fe:	2201      	movs	r2, #1
 8002800:	4618      	mov	r0, r3
 8002802:	f7fd fd4f 	bl	80002a4 <VL6180x_I2CRead>
 8002806:	6178      	str	r0, [r7, #20]
        if( !status ){
 8002808:	697b      	ldr	r3, [r7, #20]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d112      	bne.n	8002834 <VL6180x_UpdateByte+0x8a>
            buffer[2]=(buffer[2]&AndData)|OrData;
 800280e:	693b      	ldr	r3, [r7, #16]
 8002810:	3302      	adds	r3, #2
 8002812:	781a      	ldrb	r2, [r3, #0]
 8002814:	79bb      	ldrb	r3, [r7, #6]
 8002816:	4013      	ands	r3, r2
 8002818:	b2d9      	uxtb	r1, r3
 800281a:	693b      	ldr	r3, [r7, #16]
 800281c:	3302      	adds	r3, #2
 800281e:	78fa      	ldrb	r2, [r7, #3]
 8002820:	430a      	orrs	r2, r1
 8002822:	b2d2      	uxtb	r2, r2
 8002824:	701a      	strb	r2, [r3, #0]
            status=VL6180x_I2CWrite(dev, buffer, (uint8_t)3);
 8002826:	79fb      	ldrb	r3, [r7, #7]
 8002828:	2203      	movs	r2, #3
 800282a:	6939      	ldr	r1, [r7, #16]
 800282c:	4618      	mov	r0, r3
 800282e:	f7fd fd1f 	bl	8000270 <VL6180x_I2CWrite>
 8002832:	6178      	str	r0, [r7, #20]
        }
    }

    VL6180x_DoneI2CAcces(dev);

    return status;
 8002834:	697b      	ldr	r3, [r7, #20]
}
 8002836:	4618      	mov	r0, r3
 8002838:	371c      	adds	r7, #28
 800283a:	46bd      	mov	sp, r7
 800283c:	bd90      	pop	{r4, r7, pc}

0800283e <VL6180x_RdByte>:

int VL6180x_RdByte(VL6180xDev_t dev, uint16_t index, uint8_t *data){
 800283e:	b580      	push	{r7, lr}
 8002840:	b086      	sub	sp, #24
 8002842:	af00      	add	r7, sp, #0
 8002844:	4603      	mov	r3, r0
 8002846:	603a      	str	r2, [r7, #0]
 8002848:	71fb      	strb	r3, [r7, #7]
 800284a:	460b      	mov	r3, r1
 800284c:	80bb      	strh	r3, [r7, #4]
    uint8_t *buffer;
    DECL_I2C_BUFFER

    VL6180x_GetI2CAccess(dev);

    buffer=VL6180x_GetI2cBuffer(dev,2);
 800284e:	f107 0308 	add.w	r3, r7, #8
 8002852:	613b      	str	r3, [r7, #16]
    buffer[0]=index>>8;
 8002854:	88bb      	ldrh	r3, [r7, #4]
 8002856:	0a1b      	lsrs	r3, r3, #8
 8002858:	b29b      	uxth	r3, r3
 800285a:	b2da      	uxtb	r2, r3
 800285c:	693b      	ldr	r3, [r7, #16]
 800285e:	701a      	strb	r2, [r3, #0]
    buffer[1]=index&0xFF;
 8002860:	693b      	ldr	r3, [r7, #16]
 8002862:	3301      	adds	r3, #1
 8002864:	88ba      	ldrh	r2, [r7, #4]
 8002866:	b2d2      	uxtb	r2, r2
 8002868:	701a      	strb	r2, [r3, #0]

    status=VL6180x_I2CWrite(dev, buffer, (uint8_t)2);
 800286a:	79fb      	ldrb	r3, [r7, #7]
 800286c:	2202      	movs	r2, #2
 800286e:	6939      	ldr	r1, [r7, #16]
 8002870:	4618      	mov	r0, r3
 8002872:	f7fd fcfd 	bl	8000270 <VL6180x_I2CWrite>
 8002876:	6178      	str	r0, [r7, #20]
    if( !status ){
 8002878:	697b      	ldr	r3, [r7, #20]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d10d      	bne.n	800289a <VL6180x_RdByte+0x5c>
        status=VL6180x_I2CRead(dev, buffer,1);
 800287e:	79fb      	ldrb	r3, [r7, #7]
 8002880:	2201      	movs	r2, #1
 8002882:	6939      	ldr	r1, [r7, #16]
 8002884:	4618      	mov	r0, r3
 8002886:	f7fd fd0d 	bl	80002a4 <VL6180x_I2CRead>
 800288a:	6178      	str	r0, [r7, #20]
        if( !status ){
 800288c:	697b      	ldr	r3, [r7, #20]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d103      	bne.n	800289a <VL6180x_RdByte+0x5c>
            *data=buffer[0];
 8002892:	693b      	ldr	r3, [r7, #16]
 8002894:	781a      	ldrb	r2, [r3, #0]
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	701a      	strb	r2, [r3, #0]
        }
    }
    VL6180x_DoneI2CAcces(dev);

    return status;
 800289a:	697b      	ldr	r3, [r7, #20]
}
 800289c:	4618      	mov	r0, r3
 800289e:	3718      	adds	r7, #24
 80028a0:	46bd      	mov	sp, r7
 80028a2:	bd80      	pop	{r7, pc}

080028a4 <VL6180x_RdWord>:

int VL6180x_RdWord(VL6180xDev_t dev, uint16_t index, uint16_t *data){
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b086      	sub	sp, #24
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	4603      	mov	r3, r0
 80028ac:	603a      	str	r2, [r7, #0]
 80028ae:	71fb      	strb	r3, [r7, #7]
 80028b0:	460b      	mov	r3, r1
 80028b2:	80bb      	strh	r3, [r7, #4]
    uint8_t *buffer;
    DECL_I2C_BUFFER

    VL6180x_GetI2CAccess(dev);

    buffer=VL6180x_GetI2cBuffer(dev,2);
 80028b4:	f107 0308 	add.w	r3, r7, #8
 80028b8:	613b      	str	r3, [r7, #16]
    buffer[0]=index>>8;
 80028ba:	88bb      	ldrh	r3, [r7, #4]
 80028bc:	0a1b      	lsrs	r3, r3, #8
 80028be:	b29b      	uxth	r3, r3
 80028c0:	b2da      	uxtb	r2, r3
 80028c2:	693b      	ldr	r3, [r7, #16]
 80028c4:	701a      	strb	r2, [r3, #0]
    buffer[1]=index&0xFF;
 80028c6:	693b      	ldr	r3, [r7, #16]
 80028c8:	3301      	adds	r3, #1
 80028ca:	88ba      	ldrh	r2, [r7, #4]
 80028cc:	b2d2      	uxtb	r2, r2
 80028ce:	701a      	strb	r2, [r3, #0]

    status=VL6180x_I2CWrite(dev, buffer, (uint8_t)2);
 80028d0:	79fb      	ldrb	r3, [r7, #7]
 80028d2:	2202      	movs	r2, #2
 80028d4:	6939      	ldr	r1, [r7, #16]
 80028d6:	4618      	mov	r0, r3
 80028d8:	f7fd fcca 	bl	8000270 <VL6180x_I2CWrite>
 80028dc:	6178      	str	r0, [r7, #20]
    if( !status){
 80028de:	697b      	ldr	r3, [r7, #20]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d116      	bne.n	8002912 <VL6180x_RdWord+0x6e>
        status=VL6180x_I2CRead(dev, buffer,2);
 80028e4:	79fb      	ldrb	r3, [r7, #7]
 80028e6:	2202      	movs	r2, #2
 80028e8:	6939      	ldr	r1, [r7, #16]
 80028ea:	4618      	mov	r0, r3
 80028ec:	f7fd fcda 	bl	80002a4 <VL6180x_I2CRead>
 80028f0:	6178      	str	r0, [r7, #20]
        if( !status ){
 80028f2:	697b      	ldr	r3, [r7, #20]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d10c      	bne.n	8002912 <VL6180x_RdWord+0x6e>
            /* VL6180x register are Big endian if cpu is be direct read direct into *data is possible */
            *data=((uint16_t)buffer[0]<<8)|(uint16_t)buffer[1];
 80028f8:	693b      	ldr	r3, [r7, #16]
 80028fa:	781b      	ldrb	r3, [r3, #0]
 80028fc:	021b      	lsls	r3, r3, #8
 80028fe:	b21a      	sxth	r2, r3
 8002900:	693b      	ldr	r3, [r7, #16]
 8002902:	3301      	adds	r3, #1
 8002904:	781b      	ldrb	r3, [r3, #0]
 8002906:	b21b      	sxth	r3, r3
 8002908:	4313      	orrs	r3, r2
 800290a:	b21b      	sxth	r3, r3
 800290c:	b29a      	uxth	r2, r3
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	801a      	strh	r2, [r3, #0]
        }
    }
    VL6180x_DoneI2CAcces(dev);
    return status;
 8002912:	697b      	ldr	r3, [r7, #20]
}
 8002914:	4618      	mov	r0, r3
 8002916:	3718      	adds	r7, #24
 8002918:	46bd      	mov	sp, r7
 800291a:	bd80      	pop	{r7, pc}

0800291c <VL6180x_RdDWord>:

int  VL6180x_RdDWord(VL6180xDev_t dev, uint16_t index, uint32_t *data){
 800291c:	b580      	push	{r7, lr}
 800291e:	b086      	sub	sp, #24
 8002920:	af00      	add	r7, sp, #0
 8002922:	4603      	mov	r3, r0
 8002924:	603a      	str	r2, [r7, #0]
 8002926:	71fb      	strb	r3, [r7, #7]
 8002928:	460b      	mov	r3, r1
 800292a:	80bb      	strh	r3, [r7, #4]
    int status;
    uint8_t *buffer;
    DECL_I2C_BUFFER

    VL6180x_GetI2CAccess(dev);
    buffer=VL6180x_GetI2cBuffer(dev,4);
 800292c:	f107 0308 	add.w	r3, r7, #8
 8002930:	613b      	str	r3, [r7, #16]

    buffer[0]=index>>8;
 8002932:	88bb      	ldrh	r3, [r7, #4]
 8002934:	0a1b      	lsrs	r3, r3, #8
 8002936:	b29b      	uxth	r3, r3
 8002938:	b2da      	uxtb	r2, r3
 800293a:	693b      	ldr	r3, [r7, #16]
 800293c:	701a      	strb	r2, [r3, #0]
    buffer[1]=index&0xFF;
 800293e:	693b      	ldr	r3, [r7, #16]
 8002940:	3301      	adds	r3, #1
 8002942:	88ba      	ldrh	r2, [r7, #4]
 8002944:	b2d2      	uxtb	r2, r2
 8002946:	701a      	strb	r2, [r3, #0]

    status=VL6180x_I2CWrite(dev, (uint8_t *) buffer, (uint8_t)2);
 8002948:	79fb      	ldrb	r3, [r7, #7]
 800294a:	2202      	movs	r2, #2
 800294c:	6939      	ldr	r1, [r7, #16]
 800294e:	4618      	mov	r0, r3
 8002950:	f7fd fc8e 	bl	8000270 <VL6180x_I2CWrite>
 8002954:	6178      	str	r0, [r7, #20]
    if( !status ){
 8002956:	697b      	ldr	r3, [r7, #20]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d11c      	bne.n	8002996 <VL6180x_RdDWord+0x7a>
        status=VL6180x_I2CRead(dev, buffer,4);
 800295c:	79fb      	ldrb	r3, [r7, #7]
 800295e:	2204      	movs	r2, #4
 8002960:	6939      	ldr	r1, [r7, #16]
 8002962:	4618      	mov	r0, r3
 8002964:	f7fd fc9e 	bl	80002a4 <VL6180x_I2CRead>
 8002968:	6178      	str	r0, [r7, #20]
        if( !status ){
 800296a:	697b      	ldr	r3, [r7, #20]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d112      	bne.n	8002996 <VL6180x_RdDWord+0x7a>
            /* VL6180x register are Big endian if cpu is be direct read direct into data is possible */
            *data=((uint32_t)buffer[0]<<24)|((uint32_t)buffer[1]<<16)|((uint32_t)buffer[2]<<8)|((uint32_t)buffer[3]);
 8002970:	693b      	ldr	r3, [r7, #16]
 8002972:	781b      	ldrb	r3, [r3, #0]
 8002974:	061a      	lsls	r2, r3, #24
 8002976:	693b      	ldr	r3, [r7, #16]
 8002978:	3301      	adds	r3, #1
 800297a:	781b      	ldrb	r3, [r3, #0]
 800297c:	041b      	lsls	r3, r3, #16
 800297e:	431a      	orrs	r2, r3
 8002980:	693b      	ldr	r3, [r7, #16]
 8002982:	3302      	adds	r3, #2
 8002984:	781b      	ldrb	r3, [r3, #0]
 8002986:	021b      	lsls	r3, r3, #8
 8002988:	4313      	orrs	r3, r2
 800298a:	693a      	ldr	r2, [r7, #16]
 800298c:	3203      	adds	r2, #3
 800298e:	7812      	ldrb	r2, [r2, #0]
 8002990:	431a      	orrs	r2, r3
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	601a      	str	r2, [r3, #0]
        }
    }
    VL6180x_DoneI2CAcces(dev);
    return status;
 8002996:	697b      	ldr	r3, [r7, #20]
}
 8002998:	4618      	mov	r0, r3
 800299a:	3718      	adds	r7, #24
 800299c:	46bd      	mov	sp, r7
 800299e:	bd80      	pop	{r7, pc}

080029a0 <VL6180x_RdMulti>:


int  VL6180x_RdMulti(VL6180xDev_t dev, uint16_t index, uint8_t *data, int nData){
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b088      	sub	sp, #32
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	60ba      	str	r2, [r7, #8]
 80029a8:	607b      	str	r3, [r7, #4]
 80029aa:	4603      	mov	r3, r0
 80029ac:	73fb      	strb	r3, [r7, #15]
 80029ae:	460b      	mov	r3, r1
 80029b0:	81bb      	strh	r3, [r7, #12]
    int status;
    uint8_t *buffer;
    DECL_I2C_BUFFER

    VL6180x_GetI2CAccess(dev);
    buffer=VL6180x_GetI2cBuffer(dev,2);
 80029b2:	f107 0310 	add.w	r3, r7, #16
 80029b6:	61bb      	str	r3, [r7, #24]

    buffer[0]=index>>8;
 80029b8:	89bb      	ldrh	r3, [r7, #12]
 80029ba:	0a1b      	lsrs	r3, r3, #8
 80029bc:	b29b      	uxth	r3, r3
 80029be:	b2da      	uxtb	r2, r3
 80029c0:	69bb      	ldr	r3, [r7, #24]
 80029c2:	701a      	strb	r2, [r3, #0]
    buffer[1]=index&0xFF;
 80029c4:	69bb      	ldr	r3, [r7, #24]
 80029c6:	3301      	adds	r3, #1
 80029c8:	89ba      	ldrh	r2, [r7, #12]
 80029ca:	b2d2      	uxtb	r2, r2
 80029cc:	701a      	strb	r2, [r3, #0]

    status=VL6180x_I2CWrite(dev, (uint8_t *) buffer, (uint8_t)2);
 80029ce:	7bfb      	ldrb	r3, [r7, #15]
 80029d0:	2202      	movs	r2, #2
 80029d2:	69b9      	ldr	r1, [r7, #24]
 80029d4:	4618      	mov	r0, r3
 80029d6:	f7fd fc4b 	bl	8000270 <VL6180x_I2CWrite>
 80029da:	61f8      	str	r0, [r7, #28]
    if( !status ){
 80029dc:	69fb      	ldr	r3, [r7, #28]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d107      	bne.n	80029f2 <VL6180x_RdMulti+0x52>
        status=VL6180x_I2CRead(dev, data, nData);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	b2da      	uxtb	r2, r3
 80029e6:	7bfb      	ldrb	r3, [r7, #15]
 80029e8:	68b9      	ldr	r1, [r7, #8]
 80029ea:	4618      	mov	r0, r3
 80029ec:	f7fd fc5a 	bl	80002a4 <VL6180x_I2CRead>
 80029f0:	61f8      	str	r0, [r7, #28]
    }
    VL6180x_DoneI2CAcces(dev);
    return status;
 80029f2:	69fb      	ldr	r3, [r7, #28]
}
 80029f4:	4618      	mov	r0, r3
 80029f6:	3720      	adds	r7, #32
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bd80      	pop	{r7, pc}

080029fc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80029fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002a34 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8002a00:	f7fd ff7e 	bl	8000900 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002a04:	480c      	ldr	r0, [pc, #48]	; (8002a38 <LoopForever+0x6>)
  ldr r1, =_edata
 8002a06:	490d      	ldr	r1, [pc, #52]	; (8002a3c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002a08:	4a0d      	ldr	r2, [pc, #52]	; (8002a40 <LoopForever+0xe>)
  movs r3, #0
 8002a0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002a0c:	e002      	b.n	8002a14 <LoopCopyDataInit>

08002a0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002a0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a12:	3304      	adds	r3, #4

08002a14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a18:	d3f9      	bcc.n	8002a0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a1a:	4a0a      	ldr	r2, [pc, #40]	; (8002a44 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002a1c:	4c0a      	ldr	r4, [pc, #40]	; (8002a48 <LoopForever+0x16>)
  movs r3, #0
 8002a1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a20:	e001      	b.n	8002a26 <LoopFillZerobss>

08002a22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a24:	3204      	adds	r2, #4

08002a26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a28:	d3fb      	bcc.n	8002a22 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002a2a:	f003 f88d 	bl	8005b48 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002a2e:	f7fd fc53 	bl	80002d8 <main>

08002a32 <LoopForever>:

LoopForever:
    b LoopForever
 8002a32:	e7fe      	b.n	8002a32 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002a34:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8002a38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002a3c:	20000140 	.word	0x20000140
  ldr r2, =_sidata
 8002a40:	08006f50 	.word	0x08006f50
  ldr r2, =_sbss
 8002a44:	20000140 	.word	0x20000140
  ldr r4, =_ebss
 8002a48:	20000250 	.word	0x20000250

08002a4c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002a4c:	e7fe      	b.n	8002a4c <ADC1_2_IRQHandler>
	...

08002a50 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002a54:	4b08      	ldr	r3, [pc, #32]	; (8002a78 <HAL_Init+0x28>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a07      	ldr	r2, [pc, #28]	; (8002a78 <HAL_Init+0x28>)
 8002a5a:	f043 0310 	orr.w	r3, r3, #16
 8002a5e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a60:	2003      	movs	r0, #3
 8002a62:	f000 f931 	bl	8002cc8 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002a66:	2000      	movs	r0, #0
 8002a68:	f000 f808 	bl	8002a7c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002a6c:	f7fd fdea 	bl	8000644 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002a70:	2300      	movs	r3, #0
}
 8002a72:	4618      	mov	r0, r3
 8002a74:	bd80      	pop	{r7, pc}
 8002a76:	bf00      	nop
 8002a78:	40022000 	.word	0x40022000

08002a7c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b082      	sub	sp, #8
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002a84:	4b12      	ldr	r3, [pc, #72]	; (8002ad0 <HAL_InitTick+0x54>)
 8002a86:	681a      	ldr	r2, [r3, #0]
 8002a88:	4b12      	ldr	r3, [pc, #72]	; (8002ad4 <HAL_InitTick+0x58>)
 8002a8a:	781b      	ldrb	r3, [r3, #0]
 8002a8c:	4619      	mov	r1, r3
 8002a8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a92:	fbb3 f3f1 	udiv	r3, r3, r1
 8002a96:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	f000 f93b 	bl	8002d16 <HAL_SYSTICK_Config>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d001      	beq.n	8002aaa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	e00e      	b.n	8002ac8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2b0f      	cmp	r3, #15
 8002aae:	d80a      	bhi.n	8002ac6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	6879      	ldr	r1, [r7, #4]
 8002ab4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002ab8:	f000 f911 	bl	8002cde <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002abc:	4a06      	ldr	r2, [pc, #24]	; (8002ad8 <HAL_InitTick+0x5c>)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	e000      	b.n	8002ac8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002ac6:	2301      	movs	r3, #1
}
 8002ac8:	4618      	mov	r0, r3
 8002aca:	3708      	adds	r7, #8
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bd80      	pop	{r7, pc}
 8002ad0:	20000000 	.word	0x20000000
 8002ad4:	200000d8 	.word	0x200000d8
 8002ad8:	200000d4 	.word	0x200000d4

08002adc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002adc:	b480      	push	{r7}
 8002ade:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002ae0:	4b06      	ldr	r3, [pc, #24]	; (8002afc <HAL_IncTick+0x20>)
 8002ae2:	781b      	ldrb	r3, [r3, #0]
 8002ae4:	461a      	mov	r2, r3
 8002ae6:	4b06      	ldr	r3, [pc, #24]	; (8002b00 <HAL_IncTick+0x24>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4413      	add	r3, r2
 8002aec:	4a04      	ldr	r2, [pc, #16]	; (8002b00 <HAL_IncTick+0x24>)
 8002aee:	6013      	str	r3, [r2, #0]
}
 8002af0:	bf00      	nop
 8002af2:	46bd      	mov	sp, r7
 8002af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af8:	4770      	bx	lr
 8002afa:	bf00      	nop
 8002afc:	200000d8 	.word	0x200000d8
 8002b00:	2000023c 	.word	0x2000023c

08002b04 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b04:	b480      	push	{r7}
 8002b06:	af00      	add	r7, sp, #0
  return uwTick;  
 8002b08:	4b03      	ldr	r3, [pc, #12]	; (8002b18 <HAL_GetTick+0x14>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
}
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b14:	4770      	bx	lr
 8002b16:	bf00      	nop
 8002b18:	2000023c 	.word	0x2000023c

08002b1c <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b084      	sub	sp, #16
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002b24:	f7ff ffee 	bl	8002b04 <HAL_GetTick>
 8002b28:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002b34:	d005      	beq.n	8002b42 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002b36:	4b0a      	ldr	r3, [pc, #40]	; (8002b60 <HAL_Delay+0x44>)
 8002b38:	781b      	ldrb	r3, [r3, #0]
 8002b3a:	461a      	mov	r2, r3
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	4413      	add	r3, r2
 8002b40:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8002b42:	bf00      	nop
 8002b44:	f7ff ffde 	bl	8002b04 <HAL_GetTick>
 8002b48:	4602      	mov	r2, r0
 8002b4a:	68bb      	ldr	r3, [r7, #8]
 8002b4c:	1ad3      	subs	r3, r2, r3
 8002b4e:	68fa      	ldr	r2, [r7, #12]
 8002b50:	429a      	cmp	r2, r3
 8002b52:	d8f7      	bhi.n	8002b44 <HAL_Delay+0x28>
  {
  }
}
 8002b54:	bf00      	nop
 8002b56:	bf00      	nop
 8002b58:	3710      	adds	r7, #16
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd80      	pop	{r7, pc}
 8002b5e:	bf00      	nop
 8002b60:	200000d8 	.word	0x200000d8

08002b64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b64:	b480      	push	{r7}
 8002b66:	b085      	sub	sp, #20
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	f003 0307 	and.w	r3, r3, #7
 8002b72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b74:	4b0c      	ldr	r3, [pc, #48]	; (8002ba8 <__NVIC_SetPriorityGrouping+0x44>)
 8002b76:	68db      	ldr	r3, [r3, #12]
 8002b78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b7a:	68ba      	ldr	r2, [r7, #8]
 8002b7c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002b80:	4013      	ands	r3, r2
 8002b82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b88:	68bb      	ldr	r3, [r7, #8]
 8002b8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b8c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002b90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b96:	4a04      	ldr	r2, [pc, #16]	; (8002ba8 <__NVIC_SetPriorityGrouping+0x44>)
 8002b98:	68bb      	ldr	r3, [r7, #8]
 8002b9a:	60d3      	str	r3, [r2, #12]
}
 8002b9c:	bf00      	nop
 8002b9e:	3714      	adds	r7, #20
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba6:	4770      	bx	lr
 8002ba8:	e000ed00 	.word	0xe000ed00

08002bac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002bac:	b480      	push	{r7}
 8002bae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002bb0:	4b04      	ldr	r3, [pc, #16]	; (8002bc4 <__NVIC_GetPriorityGrouping+0x18>)
 8002bb2:	68db      	ldr	r3, [r3, #12]
 8002bb4:	0a1b      	lsrs	r3, r3, #8
 8002bb6:	f003 0307 	and.w	r3, r3, #7
}
 8002bba:	4618      	mov	r0, r3
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc2:	4770      	bx	lr
 8002bc4:	e000ed00 	.word	0xe000ed00

08002bc8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	b083      	sub	sp, #12
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	4603      	mov	r3, r0
 8002bd0:	6039      	str	r1, [r7, #0]
 8002bd2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	db0a      	blt.n	8002bf2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	b2da      	uxtb	r2, r3
 8002be0:	490c      	ldr	r1, [pc, #48]	; (8002c14 <__NVIC_SetPriority+0x4c>)
 8002be2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002be6:	0112      	lsls	r2, r2, #4
 8002be8:	b2d2      	uxtb	r2, r2
 8002bea:	440b      	add	r3, r1
 8002bec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002bf0:	e00a      	b.n	8002c08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	b2da      	uxtb	r2, r3
 8002bf6:	4908      	ldr	r1, [pc, #32]	; (8002c18 <__NVIC_SetPriority+0x50>)
 8002bf8:	79fb      	ldrb	r3, [r7, #7]
 8002bfa:	f003 030f 	and.w	r3, r3, #15
 8002bfe:	3b04      	subs	r3, #4
 8002c00:	0112      	lsls	r2, r2, #4
 8002c02:	b2d2      	uxtb	r2, r2
 8002c04:	440b      	add	r3, r1
 8002c06:	761a      	strb	r2, [r3, #24]
}
 8002c08:	bf00      	nop
 8002c0a:	370c      	adds	r7, #12
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c12:	4770      	bx	lr
 8002c14:	e000e100 	.word	0xe000e100
 8002c18:	e000ed00 	.word	0xe000ed00

08002c1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	b089      	sub	sp, #36	; 0x24
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	60f8      	str	r0, [r7, #12]
 8002c24:	60b9      	str	r1, [r7, #8]
 8002c26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	f003 0307 	and.w	r3, r3, #7
 8002c2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c30:	69fb      	ldr	r3, [r7, #28]
 8002c32:	f1c3 0307 	rsb	r3, r3, #7
 8002c36:	2b04      	cmp	r3, #4
 8002c38:	bf28      	it	cs
 8002c3a:	2304      	movcs	r3, #4
 8002c3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c3e:	69fb      	ldr	r3, [r7, #28]
 8002c40:	3304      	adds	r3, #4
 8002c42:	2b06      	cmp	r3, #6
 8002c44:	d902      	bls.n	8002c4c <NVIC_EncodePriority+0x30>
 8002c46:	69fb      	ldr	r3, [r7, #28]
 8002c48:	3b03      	subs	r3, #3
 8002c4a:	e000      	b.n	8002c4e <NVIC_EncodePriority+0x32>
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c50:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002c54:	69bb      	ldr	r3, [r7, #24]
 8002c56:	fa02 f303 	lsl.w	r3, r2, r3
 8002c5a:	43da      	mvns	r2, r3
 8002c5c:	68bb      	ldr	r3, [r7, #8]
 8002c5e:	401a      	ands	r2, r3
 8002c60:	697b      	ldr	r3, [r7, #20]
 8002c62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c64:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002c68:	697b      	ldr	r3, [r7, #20]
 8002c6a:	fa01 f303 	lsl.w	r3, r1, r3
 8002c6e:	43d9      	mvns	r1, r3
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c74:	4313      	orrs	r3, r2
         );
}
 8002c76:	4618      	mov	r0, r3
 8002c78:	3724      	adds	r7, #36	; 0x24
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c80:	4770      	bx	lr
	...

08002c84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b082      	sub	sp, #8
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	3b01      	subs	r3, #1
 8002c90:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c94:	d301      	bcc.n	8002c9a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c96:	2301      	movs	r3, #1
 8002c98:	e00f      	b.n	8002cba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c9a:	4a0a      	ldr	r2, [pc, #40]	; (8002cc4 <SysTick_Config+0x40>)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	3b01      	subs	r3, #1
 8002ca0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002ca2:	210f      	movs	r1, #15
 8002ca4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002ca8:	f7ff ff8e 	bl	8002bc8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002cac:	4b05      	ldr	r3, [pc, #20]	; (8002cc4 <SysTick_Config+0x40>)
 8002cae:	2200      	movs	r2, #0
 8002cb0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002cb2:	4b04      	ldr	r3, [pc, #16]	; (8002cc4 <SysTick_Config+0x40>)
 8002cb4:	2207      	movs	r2, #7
 8002cb6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002cb8:	2300      	movs	r3, #0
}
 8002cba:	4618      	mov	r0, r3
 8002cbc:	3708      	adds	r7, #8
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bd80      	pop	{r7, pc}
 8002cc2:	bf00      	nop
 8002cc4:	e000e010 	.word	0xe000e010

08002cc8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b082      	sub	sp, #8
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002cd0:	6878      	ldr	r0, [r7, #4]
 8002cd2:	f7ff ff47 	bl	8002b64 <__NVIC_SetPriorityGrouping>
}
 8002cd6:	bf00      	nop
 8002cd8:	3708      	adds	r7, #8
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bd80      	pop	{r7, pc}

08002cde <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002cde:	b580      	push	{r7, lr}
 8002ce0:	b086      	sub	sp, #24
 8002ce2:	af00      	add	r7, sp, #0
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	60b9      	str	r1, [r7, #8]
 8002ce8:	607a      	str	r2, [r7, #4]
 8002cea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002cec:	2300      	movs	r3, #0
 8002cee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002cf0:	f7ff ff5c 	bl	8002bac <__NVIC_GetPriorityGrouping>
 8002cf4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002cf6:	687a      	ldr	r2, [r7, #4]
 8002cf8:	68b9      	ldr	r1, [r7, #8]
 8002cfa:	6978      	ldr	r0, [r7, #20]
 8002cfc:	f7ff ff8e 	bl	8002c1c <NVIC_EncodePriority>
 8002d00:	4602      	mov	r2, r0
 8002d02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d06:	4611      	mov	r1, r2
 8002d08:	4618      	mov	r0, r3
 8002d0a:	f7ff ff5d 	bl	8002bc8 <__NVIC_SetPriority>
}
 8002d0e:	bf00      	nop
 8002d10:	3718      	adds	r7, #24
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bd80      	pop	{r7, pc}

08002d16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d16:	b580      	push	{r7, lr}
 8002d18:	b082      	sub	sp, #8
 8002d1a:	af00      	add	r7, sp, #0
 8002d1c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d1e:	6878      	ldr	r0, [r7, #4]
 8002d20:	f7ff ffb0 	bl	8002c84 <SysTick_Config>
 8002d24:	4603      	mov	r3, r0
}
 8002d26:	4618      	mov	r0, r3
 8002d28:	3708      	adds	r7, #8
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bd80      	pop	{r7, pc}
	...

08002d30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b087      	sub	sp, #28
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
 8002d38:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d3e:	e14e      	b.n	8002fde <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	681a      	ldr	r2, [r3, #0]
 8002d44:	2101      	movs	r1, #1
 8002d46:	697b      	ldr	r3, [r7, #20]
 8002d48:	fa01 f303 	lsl.w	r3, r1, r3
 8002d4c:	4013      	ands	r3, r2
 8002d4e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	f000 8140 	beq.w	8002fd8 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	f003 0303 	and.w	r3, r3, #3
 8002d60:	2b01      	cmp	r3, #1
 8002d62:	d005      	beq.n	8002d70 <HAL_GPIO_Init+0x40>
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	f003 0303 	and.w	r3, r3, #3
 8002d6c:	2b02      	cmp	r3, #2
 8002d6e:	d130      	bne.n	8002dd2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	689b      	ldr	r3, [r3, #8]
 8002d74:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002d76:	697b      	ldr	r3, [r7, #20]
 8002d78:	005b      	lsls	r3, r3, #1
 8002d7a:	2203      	movs	r2, #3
 8002d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d80:	43db      	mvns	r3, r3
 8002d82:	693a      	ldr	r2, [r7, #16]
 8002d84:	4013      	ands	r3, r2
 8002d86:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	68da      	ldr	r2, [r3, #12]
 8002d8c:	697b      	ldr	r3, [r7, #20]
 8002d8e:	005b      	lsls	r3, r3, #1
 8002d90:	fa02 f303 	lsl.w	r3, r2, r3
 8002d94:	693a      	ldr	r2, [r7, #16]
 8002d96:	4313      	orrs	r3, r2
 8002d98:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	693a      	ldr	r2, [r7, #16]
 8002d9e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002da6:	2201      	movs	r2, #1
 8002da8:	697b      	ldr	r3, [r7, #20]
 8002daa:	fa02 f303 	lsl.w	r3, r2, r3
 8002dae:	43db      	mvns	r3, r3
 8002db0:	693a      	ldr	r2, [r7, #16]
 8002db2:	4013      	ands	r3, r2
 8002db4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	091b      	lsrs	r3, r3, #4
 8002dbc:	f003 0201 	and.w	r2, r3, #1
 8002dc0:	697b      	ldr	r3, [r7, #20]
 8002dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc6:	693a      	ldr	r2, [r7, #16]
 8002dc8:	4313      	orrs	r3, r2
 8002dca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	693a      	ldr	r2, [r7, #16]
 8002dd0:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	f003 0303 	and.w	r3, r3, #3
 8002dda:	2b03      	cmp	r3, #3
 8002ddc:	d017      	beq.n	8002e0e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	68db      	ldr	r3, [r3, #12]
 8002de2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002de4:	697b      	ldr	r3, [r7, #20]
 8002de6:	005b      	lsls	r3, r3, #1
 8002de8:	2203      	movs	r2, #3
 8002dea:	fa02 f303 	lsl.w	r3, r2, r3
 8002dee:	43db      	mvns	r3, r3
 8002df0:	693a      	ldr	r2, [r7, #16]
 8002df2:	4013      	ands	r3, r2
 8002df4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	689a      	ldr	r2, [r3, #8]
 8002dfa:	697b      	ldr	r3, [r7, #20]
 8002dfc:	005b      	lsls	r3, r3, #1
 8002dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8002e02:	693a      	ldr	r2, [r7, #16]
 8002e04:	4313      	orrs	r3, r2
 8002e06:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	693a      	ldr	r2, [r7, #16]
 8002e0c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	f003 0303 	and.w	r3, r3, #3
 8002e16:	2b02      	cmp	r3, #2
 8002e18:	d123      	bne.n	8002e62 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002e1a:	697b      	ldr	r3, [r7, #20]
 8002e1c:	08da      	lsrs	r2, r3, #3
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	3208      	adds	r2, #8
 8002e22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e26:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002e28:	697b      	ldr	r3, [r7, #20]
 8002e2a:	f003 0307 	and.w	r3, r3, #7
 8002e2e:	009b      	lsls	r3, r3, #2
 8002e30:	220f      	movs	r2, #15
 8002e32:	fa02 f303 	lsl.w	r3, r2, r3
 8002e36:	43db      	mvns	r3, r3
 8002e38:	693a      	ldr	r2, [r7, #16]
 8002e3a:	4013      	ands	r3, r2
 8002e3c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	691a      	ldr	r2, [r3, #16]
 8002e42:	697b      	ldr	r3, [r7, #20]
 8002e44:	f003 0307 	and.w	r3, r3, #7
 8002e48:	009b      	lsls	r3, r3, #2
 8002e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e4e:	693a      	ldr	r2, [r7, #16]
 8002e50:	4313      	orrs	r3, r2
 8002e52:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002e54:	697b      	ldr	r3, [r7, #20]
 8002e56:	08da      	lsrs	r2, r3, #3
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	3208      	adds	r2, #8
 8002e5c:	6939      	ldr	r1, [r7, #16]
 8002e5e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002e68:	697b      	ldr	r3, [r7, #20]
 8002e6a:	005b      	lsls	r3, r3, #1
 8002e6c:	2203      	movs	r2, #3
 8002e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e72:	43db      	mvns	r3, r3
 8002e74:	693a      	ldr	r2, [r7, #16]
 8002e76:	4013      	ands	r3, r2
 8002e78:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	f003 0203 	and.w	r2, r3, #3
 8002e82:	697b      	ldr	r3, [r7, #20]
 8002e84:	005b      	lsls	r3, r3, #1
 8002e86:	fa02 f303 	lsl.w	r3, r2, r3
 8002e8a:	693a      	ldr	r2, [r7, #16]
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	693a      	ldr	r2, [r7, #16]
 8002e94:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	f000 809a 	beq.w	8002fd8 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ea4:	4b55      	ldr	r3, [pc, #340]	; (8002ffc <HAL_GPIO_Init+0x2cc>)
 8002ea6:	699b      	ldr	r3, [r3, #24]
 8002ea8:	4a54      	ldr	r2, [pc, #336]	; (8002ffc <HAL_GPIO_Init+0x2cc>)
 8002eaa:	f043 0301 	orr.w	r3, r3, #1
 8002eae:	6193      	str	r3, [r2, #24]
 8002eb0:	4b52      	ldr	r3, [pc, #328]	; (8002ffc <HAL_GPIO_Init+0x2cc>)
 8002eb2:	699b      	ldr	r3, [r3, #24]
 8002eb4:	f003 0301 	and.w	r3, r3, #1
 8002eb8:	60bb      	str	r3, [r7, #8]
 8002eba:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002ebc:	4a50      	ldr	r2, [pc, #320]	; (8003000 <HAL_GPIO_Init+0x2d0>)
 8002ebe:	697b      	ldr	r3, [r7, #20]
 8002ec0:	089b      	lsrs	r3, r3, #2
 8002ec2:	3302      	adds	r3, #2
 8002ec4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ec8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002eca:	697b      	ldr	r3, [r7, #20]
 8002ecc:	f003 0303 	and.w	r3, r3, #3
 8002ed0:	009b      	lsls	r3, r3, #2
 8002ed2:	220f      	movs	r2, #15
 8002ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed8:	43db      	mvns	r3, r3
 8002eda:	693a      	ldr	r2, [r7, #16]
 8002edc:	4013      	ands	r3, r2
 8002ede:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002ee6:	d013      	beq.n	8002f10 <HAL_GPIO_Init+0x1e0>
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	4a46      	ldr	r2, [pc, #280]	; (8003004 <HAL_GPIO_Init+0x2d4>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d00d      	beq.n	8002f0c <HAL_GPIO_Init+0x1dc>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	4a45      	ldr	r2, [pc, #276]	; (8003008 <HAL_GPIO_Init+0x2d8>)
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d007      	beq.n	8002f08 <HAL_GPIO_Init+0x1d8>
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	4a44      	ldr	r2, [pc, #272]	; (800300c <HAL_GPIO_Init+0x2dc>)
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d101      	bne.n	8002f04 <HAL_GPIO_Init+0x1d4>
 8002f00:	2303      	movs	r3, #3
 8002f02:	e006      	b.n	8002f12 <HAL_GPIO_Init+0x1e2>
 8002f04:	2305      	movs	r3, #5
 8002f06:	e004      	b.n	8002f12 <HAL_GPIO_Init+0x1e2>
 8002f08:	2302      	movs	r3, #2
 8002f0a:	e002      	b.n	8002f12 <HAL_GPIO_Init+0x1e2>
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	e000      	b.n	8002f12 <HAL_GPIO_Init+0x1e2>
 8002f10:	2300      	movs	r3, #0
 8002f12:	697a      	ldr	r2, [r7, #20]
 8002f14:	f002 0203 	and.w	r2, r2, #3
 8002f18:	0092      	lsls	r2, r2, #2
 8002f1a:	4093      	lsls	r3, r2
 8002f1c:	693a      	ldr	r2, [r7, #16]
 8002f1e:	4313      	orrs	r3, r2
 8002f20:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002f22:	4937      	ldr	r1, [pc, #220]	; (8003000 <HAL_GPIO_Init+0x2d0>)
 8002f24:	697b      	ldr	r3, [r7, #20]
 8002f26:	089b      	lsrs	r3, r3, #2
 8002f28:	3302      	adds	r3, #2
 8002f2a:	693a      	ldr	r2, [r7, #16]
 8002f2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002f30:	4b37      	ldr	r3, [pc, #220]	; (8003010 <HAL_GPIO_Init+0x2e0>)
 8002f32:	689b      	ldr	r3, [r3, #8]
 8002f34:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	43db      	mvns	r3, r3
 8002f3a:	693a      	ldr	r2, [r7, #16]
 8002f3c:	4013      	ands	r3, r2
 8002f3e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d003      	beq.n	8002f54 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8002f4c:	693a      	ldr	r2, [r7, #16]
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	4313      	orrs	r3, r2
 8002f52:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002f54:	4a2e      	ldr	r2, [pc, #184]	; (8003010 <HAL_GPIO_Init+0x2e0>)
 8002f56:	693b      	ldr	r3, [r7, #16]
 8002f58:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002f5a:	4b2d      	ldr	r3, [pc, #180]	; (8003010 <HAL_GPIO_Init+0x2e0>)
 8002f5c:	68db      	ldr	r3, [r3, #12]
 8002f5e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	43db      	mvns	r3, r3
 8002f64:	693a      	ldr	r2, [r7, #16]
 8002f66:	4013      	ands	r3, r2
 8002f68:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d003      	beq.n	8002f7e <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8002f76:	693a      	ldr	r2, [r7, #16]
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	4313      	orrs	r3, r2
 8002f7c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002f7e:	4a24      	ldr	r2, [pc, #144]	; (8003010 <HAL_GPIO_Init+0x2e0>)
 8002f80:	693b      	ldr	r3, [r7, #16]
 8002f82:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002f84:	4b22      	ldr	r3, [pc, #136]	; (8003010 <HAL_GPIO_Init+0x2e0>)
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	43db      	mvns	r3, r3
 8002f8e:	693a      	ldr	r2, [r7, #16]
 8002f90:	4013      	ands	r3, r2
 8002f92:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d003      	beq.n	8002fa8 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8002fa0:	693a      	ldr	r2, [r7, #16]
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	4313      	orrs	r3, r2
 8002fa6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002fa8:	4a19      	ldr	r2, [pc, #100]	; (8003010 <HAL_GPIO_Init+0x2e0>)
 8002faa:	693b      	ldr	r3, [r7, #16]
 8002fac:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002fae:	4b18      	ldr	r3, [pc, #96]	; (8003010 <HAL_GPIO_Init+0x2e0>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	43db      	mvns	r3, r3
 8002fb8:	693a      	ldr	r2, [r7, #16]
 8002fba:	4013      	ands	r3, r2
 8002fbc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d003      	beq.n	8002fd2 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8002fca:	693a      	ldr	r2, [r7, #16]
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	4313      	orrs	r3, r2
 8002fd0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002fd2:	4a0f      	ldr	r2, [pc, #60]	; (8003010 <HAL_GPIO_Init+0x2e0>)
 8002fd4:	693b      	ldr	r3, [r7, #16]
 8002fd6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002fd8:	697b      	ldr	r3, [r7, #20]
 8002fda:	3301      	adds	r3, #1
 8002fdc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	681a      	ldr	r2, [r3, #0]
 8002fe2:	697b      	ldr	r3, [r7, #20]
 8002fe4:	fa22 f303 	lsr.w	r3, r2, r3
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	f47f aea9 	bne.w	8002d40 <HAL_GPIO_Init+0x10>
  }
}
 8002fee:	bf00      	nop
 8002ff0:	bf00      	nop
 8002ff2:	371c      	adds	r7, #28
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffa:	4770      	bx	lr
 8002ffc:	40021000 	.word	0x40021000
 8003000:	40010000 	.word	0x40010000
 8003004:	48000400 	.word	0x48000400
 8003008:	48000800 	.word	0x48000800
 800300c:	48000c00 	.word	0x48000c00
 8003010:	40010400 	.word	0x40010400

08003014 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003014:	b480      	push	{r7}
 8003016:	b083      	sub	sp, #12
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
 800301c:	460b      	mov	r3, r1
 800301e:	807b      	strh	r3, [r7, #2]
 8003020:	4613      	mov	r3, r2
 8003022:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003024:	787b      	ldrb	r3, [r7, #1]
 8003026:	2b00      	cmp	r3, #0
 8003028:	d003      	beq.n	8003032 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800302a:	887a      	ldrh	r2, [r7, #2]
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003030:	e002      	b.n	8003038 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003032:	887a      	ldrh	r2, [r7, #2]
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003038:	bf00      	nop
 800303a:	370c      	adds	r7, #12
 800303c:	46bd      	mov	sp, r7
 800303e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003042:	4770      	bx	lr

08003044 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003044:	b480      	push	{r7}
 8003046:	b085      	sub	sp, #20
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
 800304c:	460b      	mov	r3, r1
 800304e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	695b      	ldr	r3, [r3, #20]
 8003054:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003056:	887a      	ldrh	r2, [r7, #2]
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	4013      	ands	r3, r2
 800305c:	041a      	lsls	r2, r3, #16
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	43d9      	mvns	r1, r3
 8003062:	887b      	ldrh	r3, [r7, #2]
 8003064:	400b      	ands	r3, r1
 8003066:	431a      	orrs	r2, r3
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	619a      	str	r2, [r3, #24]
}
 800306c:	bf00      	nop
 800306e:	3714      	adds	r7, #20
 8003070:	46bd      	mov	sp, r7
 8003072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003076:	4770      	bx	lr

08003078 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b082      	sub	sp, #8
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d101      	bne.n	800308a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003086:	2301      	movs	r3, #1
 8003088:	e081      	b.n	800318e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003090:	b2db      	uxtb	r3, r3
 8003092:	2b00      	cmp	r3, #0
 8003094:	d106      	bne.n	80030a4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2200      	movs	r2, #0
 800309a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800309e:	6878      	ldr	r0, [r7, #4]
 80030a0:	f7fd faf4 	bl	800068c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2224      	movs	r2, #36	; 0x24
 80030a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	681a      	ldr	r2, [r3, #0]
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f022 0201 	bic.w	r2, r2, #1
 80030ba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	685a      	ldr	r2, [r3, #4]
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80030c8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	689a      	ldr	r2, [r3, #8]
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80030d8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	68db      	ldr	r3, [r3, #12]
 80030de:	2b01      	cmp	r3, #1
 80030e0:	d107      	bne.n	80030f2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	689a      	ldr	r2, [r3, #8]
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80030ee:	609a      	str	r2, [r3, #8]
 80030f0:	e006      	b.n	8003100 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	689a      	ldr	r2, [r3, #8]
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80030fe:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	68db      	ldr	r3, [r3, #12]
 8003104:	2b02      	cmp	r3, #2
 8003106:	d104      	bne.n	8003112 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003110:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	687a      	ldr	r2, [r7, #4]
 800311a:	6812      	ldr	r2, [r2, #0]
 800311c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003120:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003124:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	68da      	ldr	r2, [r3, #12]
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003134:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	691a      	ldr	r2, [r3, #16]
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	695b      	ldr	r3, [r3, #20]
 800313e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	699b      	ldr	r3, [r3, #24]
 8003146:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	430a      	orrs	r2, r1
 800314e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	69d9      	ldr	r1, [r3, #28]
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6a1a      	ldr	r2, [r3, #32]
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	430a      	orrs	r2, r1
 800315e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	681a      	ldr	r2, [r3, #0]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f042 0201 	orr.w	r2, r2, #1
 800316e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2200      	movs	r2, #0
 8003174:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2220      	movs	r2, #32
 800317a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2200      	movs	r2, #0
 8003182:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2200      	movs	r2, #0
 8003188:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800318c:	2300      	movs	r3, #0
}
 800318e:	4618      	mov	r0, r3
 8003190:	3708      	adds	r7, #8
 8003192:	46bd      	mov	sp, r7
 8003194:	bd80      	pop	{r7, pc}
	...

08003198 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b088      	sub	sp, #32
 800319c:	af02      	add	r7, sp, #8
 800319e:	60f8      	str	r0, [r7, #12]
 80031a0:	607a      	str	r2, [r7, #4]
 80031a2:	461a      	mov	r2, r3
 80031a4:	460b      	mov	r3, r1
 80031a6:	817b      	strh	r3, [r7, #10]
 80031a8:	4613      	mov	r3, r2
 80031aa:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80031b2:	b2db      	uxtb	r3, r3
 80031b4:	2b20      	cmp	r3, #32
 80031b6:	f040 80da 	bne.w	800336e <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80031c0:	2b01      	cmp	r3, #1
 80031c2:	d101      	bne.n	80031c8 <HAL_I2C_Master_Transmit+0x30>
 80031c4:	2302      	movs	r3, #2
 80031c6:	e0d3      	b.n	8003370 <HAL_I2C_Master_Transmit+0x1d8>
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	2201      	movs	r2, #1
 80031cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80031d0:	f7ff fc98 	bl	8002b04 <HAL_GetTick>
 80031d4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80031d6:	697b      	ldr	r3, [r7, #20]
 80031d8:	9300      	str	r3, [sp, #0]
 80031da:	2319      	movs	r3, #25
 80031dc:	2201      	movs	r2, #1
 80031de:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80031e2:	68f8      	ldr	r0, [r7, #12]
 80031e4:	f000 f9e6 	bl	80035b4 <I2C_WaitOnFlagUntilTimeout>
 80031e8:	4603      	mov	r3, r0
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d001      	beq.n	80031f2 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80031ee:	2301      	movs	r3, #1
 80031f0:	e0be      	b.n	8003370 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	2221      	movs	r2, #33	; 0x21
 80031f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	2210      	movs	r2, #16
 80031fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	2200      	movs	r2, #0
 8003206:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	687a      	ldr	r2, [r7, #4]
 800320c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	893a      	ldrh	r2, [r7, #8]
 8003212:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	2200      	movs	r2, #0
 8003218:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800321e:	b29b      	uxth	r3, r3
 8003220:	2bff      	cmp	r3, #255	; 0xff
 8003222:	d90e      	bls.n	8003242 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	22ff      	movs	r2, #255	; 0xff
 8003228:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800322e:	b2da      	uxtb	r2, r3
 8003230:	8979      	ldrh	r1, [r7, #10]
 8003232:	4b51      	ldr	r3, [pc, #324]	; (8003378 <HAL_I2C_Master_Transmit+0x1e0>)
 8003234:	9300      	str	r3, [sp, #0]
 8003236:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800323a:	68f8      	ldr	r0, [r7, #12]
 800323c:	f000 fbf6 	bl	8003a2c <I2C_TransferConfig>
 8003240:	e06c      	b.n	800331c <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003246:	b29a      	uxth	r2, r3
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003250:	b2da      	uxtb	r2, r3
 8003252:	8979      	ldrh	r1, [r7, #10]
 8003254:	4b48      	ldr	r3, [pc, #288]	; (8003378 <HAL_I2C_Master_Transmit+0x1e0>)
 8003256:	9300      	str	r3, [sp, #0]
 8003258:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800325c:	68f8      	ldr	r0, [r7, #12]
 800325e:	f000 fbe5 	bl	8003a2c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8003262:	e05b      	b.n	800331c <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003264:	697a      	ldr	r2, [r7, #20]
 8003266:	6a39      	ldr	r1, [r7, #32]
 8003268:	68f8      	ldr	r0, [r7, #12]
 800326a:	f000 f9f2 	bl	8003652 <I2C_WaitOnTXISFlagUntilTimeout>
 800326e:	4603      	mov	r3, r0
 8003270:	2b00      	cmp	r3, #0
 8003272:	d001      	beq.n	8003278 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8003274:	2301      	movs	r3, #1
 8003276:	e07b      	b.n	8003370 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800327c:	781a      	ldrb	r2, [r3, #0]
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003288:	1c5a      	adds	r2, r3, #1
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003292:	b29b      	uxth	r3, r3
 8003294:	3b01      	subs	r3, #1
 8003296:	b29a      	uxth	r2, r3
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032a0:	3b01      	subs	r3, #1
 80032a2:	b29a      	uxth	r2, r3
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032ac:	b29b      	uxth	r3, r3
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d034      	beq.n	800331c <HAL_I2C_Master_Transmit+0x184>
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d130      	bne.n	800331c <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80032ba:	697b      	ldr	r3, [r7, #20]
 80032bc:	9300      	str	r3, [sp, #0]
 80032be:	6a3b      	ldr	r3, [r7, #32]
 80032c0:	2200      	movs	r2, #0
 80032c2:	2180      	movs	r1, #128	; 0x80
 80032c4:	68f8      	ldr	r0, [r7, #12]
 80032c6:	f000 f975 	bl	80035b4 <I2C_WaitOnFlagUntilTimeout>
 80032ca:	4603      	mov	r3, r0
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d001      	beq.n	80032d4 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80032d0:	2301      	movs	r3, #1
 80032d2:	e04d      	b.n	8003370 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032d8:	b29b      	uxth	r3, r3
 80032da:	2bff      	cmp	r3, #255	; 0xff
 80032dc:	d90e      	bls.n	80032fc <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	22ff      	movs	r2, #255	; 0xff
 80032e2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032e8:	b2da      	uxtb	r2, r3
 80032ea:	8979      	ldrh	r1, [r7, #10]
 80032ec:	2300      	movs	r3, #0
 80032ee:	9300      	str	r3, [sp, #0]
 80032f0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80032f4:	68f8      	ldr	r0, [r7, #12]
 80032f6:	f000 fb99 	bl	8003a2c <I2C_TransferConfig>
 80032fa:	e00f      	b.n	800331c <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003300:	b29a      	uxth	r2, r3
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800330a:	b2da      	uxtb	r2, r3
 800330c:	8979      	ldrh	r1, [r7, #10]
 800330e:	2300      	movs	r3, #0
 8003310:	9300      	str	r3, [sp, #0]
 8003312:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003316:	68f8      	ldr	r0, [r7, #12]
 8003318:	f000 fb88 	bl	8003a2c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003320:	b29b      	uxth	r3, r3
 8003322:	2b00      	cmp	r3, #0
 8003324:	d19e      	bne.n	8003264 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003326:	697a      	ldr	r2, [r7, #20]
 8003328:	6a39      	ldr	r1, [r7, #32]
 800332a:	68f8      	ldr	r0, [r7, #12]
 800332c:	f000 f9d8 	bl	80036e0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003330:	4603      	mov	r3, r0
 8003332:	2b00      	cmp	r3, #0
 8003334:	d001      	beq.n	800333a <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8003336:	2301      	movs	r3, #1
 8003338:	e01a      	b.n	8003370 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	2220      	movs	r2, #32
 8003340:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	6859      	ldr	r1, [r3, #4]
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681a      	ldr	r2, [r3, #0]
 800334c:	4b0b      	ldr	r3, [pc, #44]	; (800337c <HAL_I2C_Master_Transmit+0x1e4>)
 800334e:	400b      	ands	r3, r1
 8003350:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	2220      	movs	r2, #32
 8003356:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	2200      	movs	r2, #0
 800335e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	2200      	movs	r2, #0
 8003366:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800336a:	2300      	movs	r3, #0
 800336c:	e000      	b.n	8003370 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800336e:	2302      	movs	r3, #2
  }
}
 8003370:	4618      	mov	r0, r3
 8003372:	3718      	adds	r7, #24
 8003374:	46bd      	mov	sp, r7
 8003376:	bd80      	pop	{r7, pc}
 8003378:	80002000 	.word	0x80002000
 800337c:	fe00e800 	.word	0xfe00e800

08003380 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b088      	sub	sp, #32
 8003384:	af02      	add	r7, sp, #8
 8003386:	60f8      	str	r0, [r7, #12]
 8003388:	607a      	str	r2, [r7, #4]
 800338a:	461a      	mov	r2, r3
 800338c:	460b      	mov	r3, r1
 800338e:	817b      	strh	r3, [r7, #10]
 8003390:	4613      	mov	r3, r2
 8003392:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800339a:	b2db      	uxtb	r3, r3
 800339c:	2b20      	cmp	r3, #32
 800339e:	f040 80db 	bne.w	8003558 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80033a8:	2b01      	cmp	r3, #1
 80033aa:	d101      	bne.n	80033b0 <HAL_I2C_Master_Receive+0x30>
 80033ac:	2302      	movs	r3, #2
 80033ae:	e0d4      	b.n	800355a <HAL_I2C_Master_Receive+0x1da>
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	2201      	movs	r2, #1
 80033b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80033b8:	f7ff fba4 	bl	8002b04 <HAL_GetTick>
 80033bc:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80033be:	697b      	ldr	r3, [r7, #20]
 80033c0:	9300      	str	r3, [sp, #0]
 80033c2:	2319      	movs	r3, #25
 80033c4:	2201      	movs	r2, #1
 80033c6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80033ca:	68f8      	ldr	r0, [r7, #12]
 80033cc:	f000 f8f2 	bl	80035b4 <I2C_WaitOnFlagUntilTimeout>
 80033d0:	4603      	mov	r3, r0
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d001      	beq.n	80033da <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80033d6:	2301      	movs	r3, #1
 80033d8:	e0bf      	b.n	800355a <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	2222      	movs	r2, #34	; 0x22
 80033de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	2210      	movs	r2, #16
 80033e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	2200      	movs	r2, #0
 80033ee:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	687a      	ldr	r2, [r7, #4]
 80033f4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	893a      	ldrh	r2, [r7, #8]
 80033fa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	2200      	movs	r2, #0
 8003400:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003406:	b29b      	uxth	r3, r3
 8003408:	2bff      	cmp	r3, #255	; 0xff
 800340a:	d90e      	bls.n	800342a <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	22ff      	movs	r2, #255	; 0xff
 8003410:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003416:	b2da      	uxtb	r2, r3
 8003418:	8979      	ldrh	r1, [r7, #10]
 800341a:	4b52      	ldr	r3, [pc, #328]	; (8003564 <HAL_I2C_Master_Receive+0x1e4>)
 800341c:	9300      	str	r3, [sp, #0]
 800341e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003422:	68f8      	ldr	r0, [r7, #12]
 8003424:	f000 fb02 	bl	8003a2c <I2C_TransferConfig>
 8003428:	e06d      	b.n	8003506 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800342e:	b29a      	uxth	r2, r3
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003438:	b2da      	uxtb	r2, r3
 800343a:	8979      	ldrh	r1, [r7, #10]
 800343c:	4b49      	ldr	r3, [pc, #292]	; (8003564 <HAL_I2C_Master_Receive+0x1e4>)
 800343e:	9300      	str	r3, [sp, #0]
 8003440:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003444:	68f8      	ldr	r0, [r7, #12]
 8003446:	f000 faf1 	bl	8003a2c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800344a:	e05c      	b.n	8003506 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800344c:	697a      	ldr	r2, [r7, #20]
 800344e:	6a39      	ldr	r1, [r7, #32]
 8003450:	68f8      	ldr	r0, [r7, #12]
 8003452:	f000 f989 	bl	8003768 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003456:	4603      	mov	r3, r0
 8003458:	2b00      	cmp	r3, #0
 800345a:	d001      	beq.n	8003460 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 800345c:	2301      	movs	r3, #1
 800345e:	e07c      	b.n	800355a <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800346a:	b2d2      	uxtb	r2, r2
 800346c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003472:	1c5a      	adds	r2, r3, #1
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800347c:	3b01      	subs	r3, #1
 800347e:	b29a      	uxth	r2, r3
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003488:	b29b      	uxth	r3, r3
 800348a:	3b01      	subs	r3, #1
 800348c:	b29a      	uxth	r2, r3
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003496:	b29b      	uxth	r3, r3
 8003498:	2b00      	cmp	r3, #0
 800349a:	d034      	beq.n	8003506 <HAL_I2C_Master_Receive+0x186>
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d130      	bne.n	8003506 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80034a4:	697b      	ldr	r3, [r7, #20]
 80034a6:	9300      	str	r3, [sp, #0]
 80034a8:	6a3b      	ldr	r3, [r7, #32]
 80034aa:	2200      	movs	r2, #0
 80034ac:	2180      	movs	r1, #128	; 0x80
 80034ae:	68f8      	ldr	r0, [r7, #12]
 80034b0:	f000 f880 	bl	80035b4 <I2C_WaitOnFlagUntilTimeout>
 80034b4:	4603      	mov	r3, r0
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d001      	beq.n	80034be <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80034ba:	2301      	movs	r3, #1
 80034bc:	e04d      	b.n	800355a <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034c2:	b29b      	uxth	r3, r3
 80034c4:	2bff      	cmp	r3, #255	; 0xff
 80034c6:	d90e      	bls.n	80034e6 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	22ff      	movs	r2, #255	; 0xff
 80034cc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034d2:	b2da      	uxtb	r2, r3
 80034d4:	8979      	ldrh	r1, [r7, #10]
 80034d6:	2300      	movs	r3, #0
 80034d8:	9300      	str	r3, [sp, #0]
 80034da:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80034de:	68f8      	ldr	r0, [r7, #12]
 80034e0:	f000 faa4 	bl	8003a2c <I2C_TransferConfig>
 80034e4:	e00f      	b.n	8003506 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034ea:	b29a      	uxth	r2, r3
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034f4:	b2da      	uxtb	r2, r3
 80034f6:	8979      	ldrh	r1, [r7, #10]
 80034f8:	2300      	movs	r3, #0
 80034fa:	9300      	str	r3, [sp, #0]
 80034fc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003500:	68f8      	ldr	r0, [r7, #12]
 8003502:	f000 fa93 	bl	8003a2c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800350a:	b29b      	uxth	r3, r3
 800350c:	2b00      	cmp	r3, #0
 800350e:	d19d      	bne.n	800344c <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003510:	697a      	ldr	r2, [r7, #20]
 8003512:	6a39      	ldr	r1, [r7, #32]
 8003514:	68f8      	ldr	r0, [r7, #12]
 8003516:	f000 f8e3 	bl	80036e0 <I2C_WaitOnSTOPFlagUntilTimeout>
 800351a:	4603      	mov	r3, r0
 800351c:	2b00      	cmp	r3, #0
 800351e:	d001      	beq.n	8003524 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8003520:	2301      	movs	r3, #1
 8003522:	e01a      	b.n	800355a <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	2220      	movs	r2, #32
 800352a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	6859      	ldr	r1, [r3, #4]
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681a      	ldr	r2, [r3, #0]
 8003536:	4b0c      	ldr	r3, [pc, #48]	; (8003568 <HAL_I2C_Master_Receive+0x1e8>)
 8003538:	400b      	ands	r3, r1
 800353a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	2220      	movs	r2, #32
 8003540:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	2200      	movs	r2, #0
 8003548:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	2200      	movs	r2, #0
 8003550:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003554:	2300      	movs	r3, #0
 8003556:	e000      	b.n	800355a <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8003558:	2302      	movs	r3, #2
  }
}
 800355a:	4618      	mov	r0, r3
 800355c:	3718      	adds	r7, #24
 800355e:	46bd      	mov	sp, r7
 8003560:	bd80      	pop	{r7, pc}
 8003562:	bf00      	nop
 8003564:	80002400 	.word	0x80002400
 8003568:	fe00e800 	.word	0xfe00e800

0800356c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800356c:	b480      	push	{r7}
 800356e:	b083      	sub	sp, #12
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	699b      	ldr	r3, [r3, #24]
 800357a:	f003 0302 	and.w	r3, r3, #2
 800357e:	2b02      	cmp	r3, #2
 8003580:	d103      	bne.n	800358a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	2200      	movs	r2, #0
 8003588:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	699b      	ldr	r3, [r3, #24]
 8003590:	f003 0301 	and.w	r3, r3, #1
 8003594:	2b01      	cmp	r3, #1
 8003596:	d007      	beq.n	80035a8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	699a      	ldr	r2, [r3, #24]
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f042 0201 	orr.w	r2, r2, #1
 80035a6:	619a      	str	r2, [r3, #24]
  }
}
 80035a8:	bf00      	nop
 80035aa:	370c      	adds	r7, #12
 80035ac:	46bd      	mov	sp, r7
 80035ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b2:	4770      	bx	lr

080035b4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b084      	sub	sp, #16
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	60f8      	str	r0, [r7, #12]
 80035bc:	60b9      	str	r1, [r7, #8]
 80035be:	603b      	str	r3, [r7, #0]
 80035c0:	4613      	mov	r3, r2
 80035c2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80035c4:	e031      	b.n	800362a <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80035cc:	d02d      	beq.n	800362a <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035ce:	f7ff fa99 	bl	8002b04 <HAL_GetTick>
 80035d2:	4602      	mov	r2, r0
 80035d4:	69bb      	ldr	r3, [r7, #24]
 80035d6:	1ad3      	subs	r3, r2, r3
 80035d8:	683a      	ldr	r2, [r7, #0]
 80035da:	429a      	cmp	r2, r3
 80035dc:	d302      	bcc.n	80035e4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d122      	bne.n	800362a <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	699a      	ldr	r2, [r3, #24]
 80035ea:	68bb      	ldr	r3, [r7, #8]
 80035ec:	4013      	ands	r3, r2
 80035ee:	68ba      	ldr	r2, [r7, #8]
 80035f0:	429a      	cmp	r2, r3
 80035f2:	bf0c      	ite	eq
 80035f4:	2301      	moveq	r3, #1
 80035f6:	2300      	movne	r3, #0
 80035f8:	b2db      	uxtb	r3, r3
 80035fa:	461a      	mov	r2, r3
 80035fc:	79fb      	ldrb	r3, [r7, #7]
 80035fe:	429a      	cmp	r2, r3
 8003600:	d113      	bne.n	800362a <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003606:	f043 0220 	orr.w	r2, r3, #32
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	2220      	movs	r2, #32
 8003612:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	2200      	movs	r2, #0
 800361a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	2200      	movs	r2, #0
 8003622:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8003626:	2301      	movs	r3, #1
 8003628:	e00f      	b.n	800364a <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	699a      	ldr	r2, [r3, #24]
 8003630:	68bb      	ldr	r3, [r7, #8]
 8003632:	4013      	ands	r3, r2
 8003634:	68ba      	ldr	r2, [r7, #8]
 8003636:	429a      	cmp	r2, r3
 8003638:	bf0c      	ite	eq
 800363a:	2301      	moveq	r3, #1
 800363c:	2300      	movne	r3, #0
 800363e:	b2db      	uxtb	r3, r3
 8003640:	461a      	mov	r2, r3
 8003642:	79fb      	ldrb	r3, [r7, #7]
 8003644:	429a      	cmp	r2, r3
 8003646:	d0be      	beq.n	80035c6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003648:	2300      	movs	r3, #0
}
 800364a:	4618      	mov	r0, r3
 800364c:	3710      	adds	r7, #16
 800364e:	46bd      	mov	sp, r7
 8003650:	bd80      	pop	{r7, pc}

08003652 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003652:	b580      	push	{r7, lr}
 8003654:	b084      	sub	sp, #16
 8003656:	af00      	add	r7, sp, #0
 8003658:	60f8      	str	r0, [r7, #12]
 800365a:	60b9      	str	r1, [r7, #8]
 800365c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800365e:	e033      	b.n	80036c8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003660:	687a      	ldr	r2, [r7, #4]
 8003662:	68b9      	ldr	r1, [r7, #8]
 8003664:	68f8      	ldr	r0, [r7, #12]
 8003666:	f000 f901 	bl	800386c <I2C_IsErrorOccurred>
 800366a:	4603      	mov	r3, r0
 800366c:	2b00      	cmp	r3, #0
 800366e:	d001      	beq.n	8003674 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003670:	2301      	movs	r3, #1
 8003672:	e031      	b.n	80036d8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003674:	68bb      	ldr	r3, [r7, #8]
 8003676:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800367a:	d025      	beq.n	80036c8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800367c:	f7ff fa42 	bl	8002b04 <HAL_GetTick>
 8003680:	4602      	mov	r2, r0
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	1ad3      	subs	r3, r2, r3
 8003686:	68ba      	ldr	r2, [r7, #8]
 8003688:	429a      	cmp	r2, r3
 800368a:	d302      	bcc.n	8003692 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800368c:	68bb      	ldr	r3, [r7, #8]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d11a      	bne.n	80036c8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	699b      	ldr	r3, [r3, #24]
 8003698:	f003 0302 	and.w	r3, r3, #2
 800369c:	2b02      	cmp	r3, #2
 800369e:	d013      	beq.n	80036c8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036a4:	f043 0220 	orr.w	r2, r3, #32
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	2220      	movs	r2, #32
 80036b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	2200      	movs	r2, #0
 80036b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	2200      	movs	r2, #0
 80036c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80036c4:	2301      	movs	r3, #1
 80036c6:	e007      	b.n	80036d8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	699b      	ldr	r3, [r3, #24]
 80036ce:	f003 0302 	and.w	r3, r3, #2
 80036d2:	2b02      	cmp	r3, #2
 80036d4:	d1c4      	bne.n	8003660 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80036d6:	2300      	movs	r3, #0
}
 80036d8:	4618      	mov	r0, r3
 80036da:	3710      	adds	r7, #16
 80036dc:	46bd      	mov	sp, r7
 80036de:	bd80      	pop	{r7, pc}

080036e0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b084      	sub	sp, #16
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	60f8      	str	r0, [r7, #12]
 80036e8:	60b9      	str	r1, [r7, #8]
 80036ea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80036ec:	e02f      	b.n	800374e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80036ee:	687a      	ldr	r2, [r7, #4]
 80036f0:	68b9      	ldr	r1, [r7, #8]
 80036f2:	68f8      	ldr	r0, [r7, #12]
 80036f4:	f000 f8ba 	bl	800386c <I2C_IsErrorOccurred>
 80036f8:	4603      	mov	r3, r0
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d001      	beq.n	8003702 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80036fe:	2301      	movs	r3, #1
 8003700:	e02d      	b.n	800375e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003702:	f7ff f9ff 	bl	8002b04 <HAL_GetTick>
 8003706:	4602      	mov	r2, r0
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	1ad3      	subs	r3, r2, r3
 800370c:	68ba      	ldr	r2, [r7, #8]
 800370e:	429a      	cmp	r2, r3
 8003710:	d302      	bcc.n	8003718 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003712:	68bb      	ldr	r3, [r7, #8]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d11a      	bne.n	800374e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	699b      	ldr	r3, [r3, #24]
 800371e:	f003 0320 	and.w	r3, r3, #32
 8003722:	2b20      	cmp	r3, #32
 8003724:	d013      	beq.n	800374e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800372a:	f043 0220 	orr.w	r2, r3, #32
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	2220      	movs	r2, #32
 8003736:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	2200      	movs	r2, #0
 800373e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	2200      	movs	r2, #0
 8003746:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800374a:	2301      	movs	r3, #1
 800374c:	e007      	b.n	800375e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	699b      	ldr	r3, [r3, #24]
 8003754:	f003 0320 	and.w	r3, r3, #32
 8003758:	2b20      	cmp	r3, #32
 800375a:	d1c8      	bne.n	80036ee <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800375c:	2300      	movs	r3, #0
}
 800375e:	4618      	mov	r0, r3
 8003760:	3710      	adds	r7, #16
 8003762:	46bd      	mov	sp, r7
 8003764:	bd80      	pop	{r7, pc}
	...

08003768 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b084      	sub	sp, #16
 800376c:	af00      	add	r7, sp, #0
 800376e:	60f8      	str	r0, [r7, #12]
 8003770:	60b9      	str	r1, [r7, #8]
 8003772:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003774:	e06b      	b.n	800384e <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003776:	687a      	ldr	r2, [r7, #4]
 8003778:	68b9      	ldr	r1, [r7, #8]
 800377a:	68f8      	ldr	r0, [r7, #12]
 800377c:	f000 f876 	bl	800386c <I2C_IsErrorOccurred>
 8003780:	4603      	mov	r3, r0
 8003782:	2b00      	cmp	r3, #0
 8003784:	d001      	beq.n	800378a <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003786:	2301      	movs	r3, #1
 8003788:	e069      	b.n	800385e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	699b      	ldr	r3, [r3, #24]
 8003790:	f003 0320 	and.w	r3, r3, #32
 8003794:	2b20      	cmp	r3, #32
 8003796:	d138      	bne.n	800380a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	699b      	ldr	r3, [r3, #24]
 800379e:	f003 0304 	and.w	r3, r3, #4
 80037a2:	2b04      	cmp	r3, #4
 80037a4:	d105      	bne.n	80037b2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d001      	beq.n	80037b2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80037ae:	2300      	movs	r3, #0
 80037b0:	e055      	b.n	800385e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	699b      	ldr	r3, [r3, #24]
 80037b8:	f003 0310 	and.w	r3, r3, #16
 80037bc:	2b10      	cmp	r3, #16
 80037be:	d107      	bne.n	80037d0 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	2210      	movs	r2, #16
 80037c6:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	2204      	movs	r2, #4
 80037cc:	645a      	str	r2, [r3, #68]	; 0x44
 80037ce:	e002      	b.n	80037d6 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	2200      	movs	r2, #0
 80037d4:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	2220      	movs	r2, #32
 80037dc:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	6859      	ldr	r1, [r3, #4]
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681a      	ldr	r2, [r3, #0]
 80037e8:	4b1f      	ldr	r3, [pc, #124]	; (8003868 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 80037ea:	400b      	ands	r3, r1
 80037ec:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	2220      	movs	r2, #32
 80037f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	2200      	movs	r2, #0
 80037fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	2200      	movs	r2, #0
 8003802:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003806:	2301      	movs	r3, #1
 8003808:	e029      	b.n	800385e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800380a:	f7ff f97b 	bl	8002b04 <HAL_GetTick>
 800380e:	4602      	mov	r2, r0
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	1ad3      	subs	r3, r2, r3
 8003814:	68ba      	ldr	r2, [r7, #8]
 8003816:	429a      	cmp	r2, r3
 8003818:	d302      	bcc.n	8003820 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 800381a:	68bb      	ldr	r3, [r7, #8]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d116      	bne.n	800384e <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	699b      	ldr	r3, [r3, #24]
 8003826:	f003 0304 	and.w	r3, r3, #4
 800382a:	2b04      	cmp	r3, #4
 800382c:	d00f      	beq.n	800384e <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003832:	f043 0220 	orr.w	r2, r3, #32
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	2220      	movs	r2, #32
 800383e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	2200      	movs	r2, #0
 8003846:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800384a:	2301      	movs	r3, #1
 800384c:	e007      	b.n	800385e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	699b      	ldr	r3, [r3, #24]
 8003854:	f003 0304 	and.w	r3, r3, #4
 8003858:	2b04      	cmp	r3, #4
 800385a:	d18c      	bne.n	8003776 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800385c:	2300      	movs	r3, #0
}
 800385e:	4618      	mov	r0, r3
 8003860:	3710      	adds	r7, #16
 8003862:	46bd      	mov	sp, r7
 8003864:	bd80      	pop	{r7, pc}
 8003866:	bf00      	nop
 8003868:	fe00e800 	.word	0xfe00e800

0800386c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b08a      	sub	sp, #40	; 0x28
 8003870:	af00      	add	r7, sp, #0
 8003872:	60f8      	str	r0, [r7, #12]
 8003874:	60b9      	str	r1, [r7, #8]
 8003876:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003878:	2300      	movs	r3, #0
 800387a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	699b      	ldr	r3, [r3, #24]
 8003884:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003886:	2300      	movs	r3, #0
 8003888:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800388e:	69bb      	ldr	r3, [r7, #24]
 8003890:	f003 0310 	and.w	r3, r3, #16
 8003894:	2b00      	cmp	r3, #0
 8003896:	d068      	beq.n	800396a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	2210      	movs	r2, #16
 800389e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80038a0:	e049      	b.n	8003936 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80038a2:	68bb      	ldr	r3, [r7, #8]
 80038a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80038a8:	d045      	beq.n	8003936 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80038aa:	f7ff f92b 	bl	8002b04 <HAL_GetTick>
 80038ae:	4602      	mov	r2, r0
 80038b0:	69fb      	ldr	r3, [r7, #28]
 80038b2:	1ad3      	subs	r3, r2, r3
 80038b4:	68ba      	ldr	r2, [r7, #8]
 80038b6:	429a      	cmp	r2, r3
 80038b8:	d302      	bcc.n	80038c0 <I2C_IsErrorOccurred+0x54>
 80038ba:	68bb      	ldr	r3, [r7, #8]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d13a      	bne.n	8003936 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	685b      	ldr	r3, [r3, #4]
 80038c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80038ca:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80038d2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	699b      	ldr	r3, [r3, #24]
 80038da:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80038de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80038e2:	d121      	bne.n	8003928 <I2C_IsErrorOccurred+0xbc>
 80038e4:	697b      	ldr	r3, [r7, #20]
 80038e6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80038ea:	d01d      	beq.n	8003928 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80038ec:	7cfb      	ldrb	r3, [r7, #19]
 80038ee:	2b20      	cmp	r3, #32
 80038f0:	d01a      	beq.n	8003928 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	685a      	ldr	r2, [r3, #4]
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003900:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003902:	f7ff f8ff 	bl	8002b04 <HAL_GetTick>
 8003906:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003908:	e00e      	b.n	8003928 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800390a:	f7ff f8fb 	bl	8002b04 <HAL_GetTick>
 800390e:	4602      	mov	r2, r0
 8003910:	69fb      	ldr	r3, [r7, #28]
 8003912:	1ad3      	subs	r3, r2, r3
 8003914:	2b19      	cmp	r3, #25
 8003916:	d907      	bls.n	8003928 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003918:	6a3b      	ldr	r3, [r7, #32]
 800391a:	f043 0320 	orr.w	r3, r3, #32
 800391e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003920:	2301      	movs	r3, #1
 8003922:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8003926:	e006      	b.n	8003936 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	699b      	ldr	r3, [r3, #24]
 800392e:	f003 0320 	and.w	r3, r3, #32
 8003932:	2b20      	cmp	r3, #32
 8003934:	d1e9      	bne.n	800390a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	699b      	ldr	r3, [r3, #24]
 800393c:	f003 0320 	and.w	r3, r3, #32
 8003940:	2b20      	cmp	r3, #32
 8003942:	d003      	beq.n	800394c <I2C_IsErrorOccurred+0xe0>
 8003944:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003948:	2b00      	cmp	r3, #0
 800394a:	d0aa      	beq.n	80038a2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800394c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003950:	2b00      	cmp	r3, #0
 8003952:	d103      	bne.n	800395c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	2220      	movs	r2, #32
 800395a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800395c:	6a3b      	ldr	r3, [r7, #32]
 800395e:	f043 0304 	orr.w	r3, r3, #4
 8003962:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003964:	2301      	movs	r3, #1
 8003966:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	699b      	ldr	r3, [r3, #24]
 8003970:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003972:	69bb      	ldr	r3, [r7, #24]
 8003974:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003978:	2b00      	cmp	r3, #0
 800397a:	d00b      	beq.n	8003994 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800397c:	6a3b      	ldr	r3, [r7, #32]
 800397e:	f043 0301 	orr.w	r3, r3, #1
 8003982:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f44f 7280 	mov.w	r2, #256	; 0x100
 800398c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800398e:	2301      	movs	r3, #1
 8003990:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003994:	69bb      	ldr	r3, [r7, #24]
 8003996:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800399a:	2b00      	cmp	r3, #0
 800399c:	d00b      	beq.n	80039b6 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800399e:	6a3b      	ldr	r3, [r7, #32]
 80039a0:	f043 0308 	orr.w	r3, r3, #8
 80039a4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80039ae:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80039b0:	2301      	movs	r3, #1
 80039b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80039b6:	69bb      	ldr	r3, [r7, #24]
 80039b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d00b      	beq.n	80039d8 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80039c0:	6a3b      	ldr	r3, [r7, #32]
 80039c2:	f043 0302 	orr.w	r3, r3, #2
 80039c6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80039d0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80039d2:	2301      	movs	r3, #1
 80039d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80039d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d01c      	beq.n	8003a1a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80039e0:	68f8      	ldr	r0, [r7, #12]
 80039e2:	f7ff fdc3 	bl	800356c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	6859      	ldr	r1, [r3, #4]
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681a      	ldr	r2, [r3, #0]
 80039f0:	4b0d      	ldr	r3, [pc, #52]	; (8003a28 <I2C_IsErrorOccurred+0x1bc>)
 80039f2:	400b      	ands	r3, r1
 80039f4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80039fa:	6a3b      	ldr	r3, [r7, #32]
 80039fc:	431a      	orrs	r2, r3
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	2220      	movs	r2, #32
 8003a06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	2200      	movs	r2, #0
 8003a16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8003a1a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003a1e:	4618      	mov	r0, r3
 8003a20:	3728      	adds	r7, #40	; 0x28
 8003a22:	46bd      	mov	sp, r7
 8003a24:	bd80      	pop	{r7, pc}
 8003a26:	bf00      	nop
 8003a28:	fe00e800 	.word	0xfe00e800

08003a2c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003a2c:	b480      	push	{r7}
 8003a2e:	b087      	sub	sp, #28
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	60f8      	str	r0, [r7, #12]
 8003a34:	607b      	str	r3, [r7, #4]
 8003a36:	460b      	mov	r3, r1
 8003a38:	817b      	strh	r3, [r7, #10]
 8003a3a:	4613      	mov	r3, r2
 8003a3c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003a3e:	897b      	ldrh	r3, [r7, #10]
 8003a40:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003a44:	7a7b      	ldrb	r3, [r7, #9]
 8003a46:	041b      	lsls	r3, r3, #16
 8003a48:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003a4c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003a52:	6a3b      	ldr	r3, [r7, #32]
 8003a54:	4313      	orrs	r3, r2
 8003a56:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003a5a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	685a      	ldr	r2, [r3, #4]
 8003a62:	6a3b      	ldr	r3, [r7, #32]
 8003a64:	0d5b      	lsrs	r3, r3, #21
 8003a66:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003a6a:	4b08      	ldr	r3, [pc, #32]	; (8003a8c <I2C_TransferConfig+0x60>)
 8003a6c:	430b      	orrs	r3, r1
 8003a6e:	43db      	mvns	r3, r3
 8003a70:	ea02 0103 	and.w	r1, r2, r3
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	697a      	ldr	r2, [r7, #20]
 8003a7a:	430a      	orrs	r2, r1
 8003a7c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003a7e:	bf00      	nop
 8003a80:	371c      	adds	r7, #28
 8003a82:	46bd      	mov	sp, r7
 8003a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a88:	4770      	bx	lr
 8003a8a:	bf00      	nop
 8003a8c:	03ff63ff 	.word	0x03ff63ff

08003a90 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003a90:	b480      	push	{r7}
 8003a92:	b083      	sub	sp, #12
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
 8003a98:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003aa0:	b2db      	uxtb	r3, r3
 8003aa2:	2b20      	cmp	r3, #32
 8003aa4:	d138      	bne.n	8003b18 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003aac:	2b01      	cmp	r3, #1
 8003aae:	d101      	bne.n	8003ab4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003ab0:	2302      	movs	r3, #2
 8003ab2:	e032      	b.n	8003b1a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2201      	movs	r2, #1
 8003ab8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2224      	movs	r2, #36	; 0x24
 8003ac0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	681a      	ldr	r2, [r3, #0]
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f022 0201 	bic.w	r2, r2, #1
 8003ad2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	681a      	ldr	r2, [r3, #0]
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003ae2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	6819      	ldr	r1, [r3, #0]
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	683a      	ldr	r2, [r7, #0]
 8003af0:	430a      	orrs	r2, r1
 8003af2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	681a      	ldr	r2, [r3, #0]
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f042 0201 	orr.w	r2, r2, #1
 8003b02:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2220      	movs	r2, #32
 8003b08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2200      	movs	r2, #0
 8003b10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003b14:	2300      	movs	r3, #0
 8003b16:	e000      	b.n	8003b1a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003b18:	2302      	movs	r3, #2
  }
}
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	370c      	adds	r7, #12
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b24:	4770      	bx	lr

08003b26 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003b26:	b480      	push	{r7}
 8003b28:	b085      	sub	sp, #20
 8003b2a:	af00      	add	r7, sp, #0
 8003b2c:	6078      	str	r0, [r7, #4]
 8003b2e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b36:	b2db      	uxtb	r3, r3
 8003b38:	2b20      	cmp	r3, #32
 8003b3a:	d139      	bne.n	8003bb0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003b42:	2b01      	cmp	r3, #1
 8003b44:	d101      	bne.n	8003b4a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003b46:	2302      	movs	r3, #2
 8003b48:	e033      	b.n	8003bb2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2201      	movs	r2, #1
 8003b4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2224      	movs	r2, #36	; 0x24
 8003b56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	681a      	ldr	r2, [r3, #0]
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f022 0201 	bic.w	r2, r2, #1
 8003b68:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003b78:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	021b      	lsls	r3, r3, #8
 8003b7e:	68fa      	ldr	r2, [r7, #12]
 8003b80:	4313      	orrs	r3, r2
 8003b82:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	68fa      	ldr	r2, [r7, #12]
 8003b8a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	681a      	ldr	r2, [r3, #0]
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f042 0201 	orr.w	r2, r2, #1
 8003b9a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2220      	movs	r2, #32
 8003ba0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003bac:	2300      	movs	r3, #0
 8003bae:	e000      	b.n	8003bb2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003bb0:	2302      	movs	r3, #2
  }
}
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	3714      	adds	r7, #20
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbc:	4770      	bx	lr
	...

08003bc0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8003bc6:	af00      	add	r7, sp, #0
 8003bc8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bcc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003bd0:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003bd2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bd6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d102      	bne.n	8003be6 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8003be0:	2301      	movs	r3, #1
 8003be2:	f001 b823 	b.w	8004c2c <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003be6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bea:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f003 0301 	and.w	r3, r3, #1
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	f000 817d 	beq.w	8003ef6 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003bfc:	4bbc      	ldr	r3, [pc, #752]	; (8003ef0 <HAL_RCC_OscConfig+0x330>)
 8003bfe:	685b      	ldr	r3, [r3, #4]
 8003c00:	f003 030c 	and.w	r3, r3, #12
 8003c04:	2b04      	cmp	r3, #4
 8003c06:	d00c      	beq.n	8003c22 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003c08:	4bb9      	ldr	r3, [pc, #740]	; (8003ef0 <HAL_RCC_OscConfig+0x330>)
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	f003 030c 	and.w	r3, r3, #12
 8003c10:	2b08      	cmp	r3, #8
 8003c12:	d15c      	bne.n	8003cce <HAL_RCC_OscConfig+0x10e>
 8003c14:	4bb6      	ldr	r3, [pc, #728]	; (8003ef0 <HAL_RCC_OscConfig+0x330>)
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c20:	d155      	bne.n	8003cce <HAL_RCC_OscConfig+0x10e>
 8003c22:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003c26:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c2a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8003c2e:	fa93 f3a3 	rbit	r3, r3
 8003c32:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003c36:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c3a:	fab3 f383 	clz	r3, r3
 8003c3e:	b2db      	uxtb	r3, r3
 8003c40:	095b      	lsrs	r3, r3, #5
 8003c42:	b2db      	uxtb	r3, r3
 8003c44:	f043 0301 	orr.w	r3, r3, #1
 8003c48:	b2db      	uxtb	r3, r3
 8003c4a:	2b01      	cmp	r3, #1
 8003c4c:	d102      	bne.n	8003c54 <HAL_RCC_OscConfig+0x94>
 8003c4e:	4ba8      	ldr	r3, [pc, #672]	; (8003ef0 <HAL_RCC_OscConfig+0x330>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	e015      	b.n	8003c80 <HAL_RCC_OscConfig+0xc0>
 8003c54:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003c58:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c5c:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8003c60:	fa93 f3a3 	rbit	r3, r3
 8003c64:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8003c68:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003c6c:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8003c70:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8003c74:	fa93 f3a3 	rbit	r3, r3
 8003c78:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8003c7c:	4b9c      	ldr	r3, [pc, #624]	; (8003ef0 <HAL_RCC_OscConfig+0x330>)
 8003c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c80:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003c84:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8003c88:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8003c8c:	fa92 f2a2 	rbit	r2, r2
 8003c90:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8003c94:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8003c98:	fab2 f282 	clz	r2, r2
 8003c9c:	b2d2      	uxtb	r2, r2
 8003c9e:	f042 0220 	orr.w	r2, r2, #32
 8003ca2:	b2d2      	uxtb	r2, r2
 8003ca4:	f002 021f 	and.w	r2, r2, #31
 8003ca8:	2101      	movs	r1, #1
 8003caa:	fa01 f202 	lsl.w	r2, r1, r2
 8003cae:	4013      	ands	r3, r2
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	f000 811f 	beq.w	8003ef4 <HAL_RCC_OscConfig+0x334>
 8003cb6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cba:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	f040 8116 	bne.w	8003ef4 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8003cc8:	2301      	movs	r3, #1
 8003cca:	f000 bfaf 	b.w	8004c2c <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003cce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cd2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	685b      	ldr	r3, [r3, #4]
 8003cda:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cde:	d106      	bne.n	8003cee <HAL_RCC_OscConfig+0x12e>
 8003ce0:	4b83      	ldr	r3, [pc, #524]	; (8003ef0 <HAL_RCC_OscConfig+0x330>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	4a82      	ldr	r2, [pc, #520]	; (8003ef0 <HAL_RCC_OscConfig+0x330>)
 8003ce6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003cea:	6013      	str	r3, [r2, #0]
 8003cec:	e036      	b.n	8003d5c <HAL_RCC_OscConfig+0x19c>
 8003cee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cf2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	685b      	ldr	r3, [r3, #4]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d10c      	bne.n	8003d18 <HAL_RCC_OscConfig+0x158>
 8003cfe:	4b7c      	ldr	r3, [pc, #496]	; (8003ef0 <HAL_RCC_OscConfig+0x330>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	4a7b      	ldr	r2, [pc, #492]	; (8003ef0 <HAL_RCC_OscConfig+0x330>)
 8003d04:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d08:	6013      	str	r3, [r2, #0]
 8003d0a:	4b79      	ldr	r3, [pc, #484]	; (8003ef0 <HAL_RCC_OscConfig+0x330>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4a78      	ldr	r2, [pc, #480]	; (8003ef0 <HAL_RCC_OscConfig+0x330>)
 8003d10:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d14:	6013      	str	r3, [r2, #0]
 8003d16:	e021      	b.n	8003d5c <HAL_RCC_OscConfig+0x19c>
 8003d18:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d1c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	685b      	ldr	r3, [r3, #4]
 8003d24:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003d28:	d10c      	bne.n	8003d44 <HAL_RCC_OscConfig+0x184>
 8003d2a:	4b71      	ldr	r3, [pc, #452]	; (8003ef0 <HAL_RCC_OscConfig+0x330>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4a70      	ldr	r2, [pc, #448]	; (8003ef0 <HAL_RCC_OscConfig+0x330>)
 8003d30:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003d34:	6013      	str	r3, [r2, #0]
 8003d36:	4b6e      	ldr	r3, [pc, #440]	; (8003ef0 <HAL_RCC_OscConfig+0x330>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	4a6d      	ldr	r2, [pc, #436]	; (8003ef0 <HAL_RCC_OscConfig+0x330>)
 8003d3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d40:	6013      	str	r3, [r2, #0]
 8003d42:	e00b      	b.n	8003d5c <HAL_RCC_OscConfig+0x19c>
 8003d44:	4b6a      	ldr	r3, [pc, #424]	; (8003ef0 <HAL_RCC_OscConfig+0x330>)
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4a69      	ldr	r2, [pc, #420]	; (8003ef0 <HAL_RCC_OscConfig+0x330>)
 8003d4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d4e:	6013      	str	r3, [r2, #0]
 8003d50:	4b67      	ldr	r3, [pc, #412]	; (8003ef0 <HAL_RCC_OscConfig+0x330>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4a66      	ldr	r2, [pc, #408]	; (8003ef0 <HAL_RCC_OscConfig+0x330>)
 8003d56:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d5a:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003d5c:	4b64      	ldr	r3, [pc, #400]	; (8003ef0 <HAL_RCC_OscConfig+0x330>)
 8003d5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d60:	f023 020f 	bic.w	r2, r3, #15
 8003d64:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d68:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	689b      	ldr	r3, [r3, #8]
 8003d70:	495f      	ldr	r1, [pc, #380]	; (8003ef0 <HAL_RCC_OscConfig+0x330>)
 8003d72:	4313      	orrs	r3, r2
 8003d74:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003d76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d7a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d059      	beq.n	8003e3a <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d86:	f7fe febd 	bl	8002b04 <HAL_GetTick>
 8003d8a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d8e:	e00a      	b.n	8003da6 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d90:	f7fe feb8 	bl	8002b04 <HAL_GetTick>
 8003d94:	4602      	mov	r2, r0
 8003d96:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003d9a:	1ad3      	subs	r3, r2, r3
 8003d9c:	2b64      	cmp	r3, #100	; 0x64
 8003d9e:	d902      	bls.n	8003da6 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8003da0:	2303      	movs	r3, #3
 8003da2:	f000 bf43 	b.w	8004c2c <HAL_RCC_OscConfig+0x106c>
 8003da6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003daa:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dae:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8003db2:	fa93 f3a3 	rbit	r3, r3
 8003db6:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8003dba:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dbe:	fab3 f383 	clz	r3, r3
 8003dc2:	b2db      	uxtb	r3, r3
 8003dc4:	095b      	lsrs	r3, r3, #5
 8003dc6:	b2db      	uxtb	r3, r3
 8003dc8:	f043 0301 	orr.w	r3, r3, #1
 8003dcc:	b2db      	uxtb	r3, r3
 8003dce:	2b01      	cmp	r3, #1
 8003dd0:	d102      	bne.n	8003dd8 <HAL_RCC_OscConfig+0x218>
 8003dd2:	4b47      	ldr	r3, [pc, #284]	; (8003ef0 <HAL_RCC_OscConfig+0x330>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	e015      	b.n	8003e04 <HAL_RCC_OscConfig+0x244>
 8003dd8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003ddc:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003de0:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8003de4:	fa93 f3a3 	rbit	r3, r3
 8003de8:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8003dec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003df0:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8003df4:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8003df8:	fa93 f3a3 	rbit	r3, r3
 8003dfc:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8003e00:	4b3b      	ldr	r3, [pc, #236]	; (8003ef0 <HAL_RCC_OscConfig+0x330>)
 8003e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e04:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003e08:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8003e0c:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8003e10:	fa92 f2a2 	rbit	r2, r2
 8003e14:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8003e18:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8003e1c:	fab2 f282 	clz	r2, r2
 8003e20:	b2d2      	uxtb	r2, r2
 8003e22:	f042 0220 	orr.w	r2, r2, #32
 8003e26:	b2d2      	uxtb	r2, r2
 8003e28:	f002 021f 	and.w	r2, r2, #31
 8003e2c:	2101      	movs	r1, #1
 8003e2e:	fa01 f202 	lsl.w	r2, r1, r2
 8003e32:	4013      	ands	r3, r2
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d0ab      	beq.n	8003d90 <HAL_RCC_OscConfig+0x1d0>
 8003e38:	e05d      	b.n	8003ef6 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e3a:	f7fe fe63 	bl	8002b04 <HAL_GetTick>
 8003e3e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e42:	e00a      	b.n	8003e5a <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e44:	f7fe fe5e 	bl	8002b04 <HAL_GetTick>
 8003e48:	4602      	mov	r2, r0
 8003e4a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003e4e:	1ad3      	subs	r3, r2, r3
 8003e50:	2b64      	cmp	r3, #100	; 0x64
 8003e52:	d902      	bls.n	8003e5a <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8003e54:	2303      	movs	r3, #3
 8003e56:	f000 bee9 	b.w	8004c2c <HAL_RCC_OscConfig+0x106c>
 8003e5a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003e5e:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e62:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8003e66:	fa93 f3a3 	rbit	r3, r3
 8003e6a:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8003e6e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e72:	fab3 f383 	clz	r3, r3
 8003e76:	b2db      	uxtb	r3, r3
 8003e78:	095b      	lsrs	r3, r3, #5
 8003e7a:	b2db      	uxtb	r3, r3
 8003e7c:	f043 0301 	orr.w	r3, r3, #1
 8003e80:	b2db      	uxtb	r3, r3
 8003e82:	2b01      	cmp	r3, #1
 8003e84:	d102      	bne.n	8003e8c <HAL_RCC_OscConfig+0x2cc>
 8003e86:	4b1a      	ldr	r3, [pc, #104]	; (8003ef0 <HAL_RCC_OscConfig+0x330>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	e015      	b.n	8003eb8 <HAL_RCC_OscConfig+0x2f8>
 8003e8c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003e90:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e94:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8003e98:	fa93 f3a3 	rbit	r3, r3
 8003e9c:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8003ea0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003ea4:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8003ea8:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8003eac:	fa93 f3a3 	rbit	r3, r3
 8003eb0:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8003eb4:	4b0e      	ldr	r3, [pc, #56]	; (8003ef0 <HAL_RCC_OscConfig+0x330>)
 8003eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eb8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003ebc:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8003ec0:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8003ec4:	fa92 f2a2 	rbit	r2, r2
 8003ec8:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8003ecc:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8003ed0:	fab2 f282 	clz	r2, r2
 8003ed4:	b2d2      	uxtb	r2, r2
 8003ed6:	f042 0220 	orr.w	r2, r2, #32
 8003eda:	b2d2      	uxtb	r2, r2
 8003edc:	f002 021f 	and.w	r2, r2, #31
 8003ee0:	2101      	movs	r1, #1
 8003ee2:	fa01 f202 	lsl.w	r2, r1, r2
 8003ee6:	4013      	ands	r3, r2
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d1ab      	bne.n	8003e44 <HAL_RCC_OscConfig+0x284>
 8003eec:	e003      	b.n	8003ef6 <HAL_RCC_OscConfig+0x336>
 8003eee:	bf00      	nop
 8003ef0:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ef4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ef6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003efa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f003 0302 	and.w	r3, r3, #2
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	f000 817d 	beq.w	8004206 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003f0c:	4ba6      	ldr	r3, [pc, #664]	; (80041a8 <HAL_RCC_OscConfig+0x5e8>)
 8003f0e:	685b      	ldr	r3, [r3, #4]
 8003f10:	f003 030c 	and.w	r3, r3, #12
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d00b      	beq.n	8003f30 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003f18:	4ba3      	ldr	r3, [pc, #652]	; (80041a8 <HAL_RCC_OscConfig+0x5e8>)
 8003f1a:	685b      	ldr	r3, [r3, #4]
 8003f1c:	f003 030c 	and.w	r3, r3, #12
 8003f20:	2b08      	cmp	r3, #8
 8003f22:	d172      	bne.n	800400a <HAL_RCC_OscConfig+0x44a>
 8003f24:	4ba0      	ldr	r3, [pc, #640]	; (80041a8 <HAL_RCC_OscConfig+0x5e8>)
 8003f26:	685b      	ldr	r3, [r3, #4]
 8003f28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d16c      	bne.n	800400a <HAL_RCC_OscConfig+0x44a>
 8003f30:	2302      	movs	r3, #2
 8003f32:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f36:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8003f3a:	fa93 f3a3 	rbit	r3, r3
 8003f3e:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8003f42:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f46:	fab3 f383 	clz	r3, r3
 8003f4a:	b2db      	uxtb	r3, r3
 8003f4c:	095b      	lsrs	r3, r3, #5
 8003f4e:	b2db      	uxtb	r3, r3
 8003f50:	f043 0301 	orr.w	r3, r3, #1
 8003f54:	b2db      	uxtb	r3, r3
 8003f56:	2b01      	cmp	r3, #1
 8003f58:	d102      	bne.n	8003f60 <HAL_RCC_OscConfig+0x3a0>
 8003f5a:	4b93      	ldr	r3, [pc, #588]	; (80041a8 <HAL_RCC_OscConfig+0x5e8>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	e013      	b.n	8003f88 <HAL_RCC_OscConfig+0x3c8>
 8003f60:	2302      	movs	r3, #2
 8003f62:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f66:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8003f6a:	fa93 f3a3 	rbit	r3, r3
 8003f6e:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8003f72:	2302      	movs	r3, #2
 8003f74:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8003f78:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003f7c:	fa93 f3a3 	rbit	r3, r3
 8003f80:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8003f84:	4b88      	ldr	r3, [pc, #544]	; (80041a8 <HAL_RCC_OscConfig+0x5e8>)
 8003f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f88:	2202      	movs	r2, #2
 8003f8a:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8003f8e:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8003f92:	fa92 f2a2 	rbit	r2, r2
 8003f96:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8003f9a:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8003f9e:	fab2 f282 	clz	r2, r2
 8003fa2:	b2d2      	uxtb	r2, r2
 8003fa4:	f042 0220 	orr.w	r2, r2, #32
 8003fa8:	b2d2      	uxtb	r2, r2
 8003faa:	f002 021f 	and.w	r2, r2, #31
 8003fae:	2101      	movs	r1, #1
 8003fb0:	fa01 f202 	lsl.w	r2, r1, r2
 8003fb4:	4013      	ands	r3, r2
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d00a      	beq.n	8003fd0 <HAL_RCC_OscConfig+0x410>
 8003fba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fbe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	691b      	ldr	r3, [r3, #16]
 8003fc6:	2b01      	cmp	r3, #1
 8003fc8:	d002      	beq.n	8003fd0 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8003fca:	2301      	movs	r3, #1
 8003fcc:	f000 be2e 	b.w	8004c2c <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fd0:	4b75      	ldr	r3, [pc, #468]	; (80041a8 <HAL_RCC_OscConfig+0x5e8>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003fd8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fdc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	695b      	ldr	r3, [r3, #20]
 8003fe4:	21f8      	movs	r1, #248	; 0xf8
 8003fe6:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fea:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8003fee:	fa91 f1a1 	rbit	r1, r1
 8003ff2:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8003ff6:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8003ffa:	fab1 f181 	clz	r1, r1
 8003ffe:	b2c9      	uxtb	r1, r1
 8004000:	408b      	lsls	r3, r1
 8004002:	4969      	ldr	r1, [pc, #420]	; (80041a8 <HAL_RCC_OscConfig+0x5e8>)
 8004004:	4313      	orrs	r3, r2
 8004006:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004008:	e0fd      	b.n	8004206 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800400a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800400e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	691b      	ldr	r3, [r3, #16]
 8004016:	2b00      	cmp	r3, #0
 8004018:	f000 8088 	beq.w	800412c <HAL_RCC_OscConfig+0x56c>
 800401c:	2301      	movs	r3, #1
 800401e:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004022:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8004026:	fa93 f3a3 	rbit	r3, r3
 800402a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 800402e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004032:	fab3 f383 	clz	r3, r3
 8004036:	b2db      	uxtb	r3, r3
 8004038:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800403c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004040:	009b      	lsls	r3, r3, #2
 8004042:	461a      	mov	r2, r3
 8004044:	2301      	movs	r3, #1
 8004046:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004048:	f7fe fd5c 	bl	8002b04 <HAL_GetTick>
 800404c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004050:	e00a      	b.n	8004068 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004052:	f7fe fd57 	bl	8002b04 <HAL_GetTick>
 8004056:	4602      	mov	r2, r0
 8004058:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800405c:	1ad3      	subs	r3, r2, r3
 800405e:	2b02      	cmp	r3, #2
 8004060:	d902      	bls.n	8004068 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8004062:	2303      	movs	r3, #3
 8004064:	f000 bde2 	b.w	8004c2c <HAL_RCC_OscConfig+0x106c>
 8004068:	2302      	movs	r3, #2
 800406a:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800406e:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8004072:	fa93 f3a3 	rbit	r3, r3
 8004076:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 800407a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800407e:	fab3 f383 	clz	r3, r3
 8004082:	b2db      	uxtb	r3, r3
 8004084:	095b      	lsrs	r3, r3, #5
 8004086:	b2db      	uxtb	r3, r3
 8004088:	f043 0301 	orr.w	r3, r3, #1
 800408c:	b2db      	uxtb	r3, r3
 800408e:	2b01      	cmp	r3, #1
 8004090:	d102      	bne.n	8004098 <HAL_RCC_OscConfig+0x4d8>
 8004092:	4b45      	ldr	r3, [pc, #276]	; (80041a8 <HAL_RCC_OscConfig+0x5e8>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	e013      	b.n	80040c0 <HAL_RCC_OscConfig+0x500>
 8004098:	2302      	movs	r3, #2
 800409a:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800409e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80040a2:	fa93 f3a3 	rbit	r3, r3
 80040a6:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80040aa:	2302      	movs	r3, #2
 80040ac:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80040b0:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80040b4:	fa93 f3a3 	rbit	r3, r3
 80040b8:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80040bc:	4b3a      	ldr	r3, [pc, #232]	; (80041a8 <HAL_RCC_OscConfig+0x5e8>)
 80040be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040c0:	2202      	movs	r2, #2
 80040c2:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80040c6:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80040ca:	fa92 f2a2 	rbit	r2, r2
 80040ce:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80040d2:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80040d6:	fab2 f282 	clz	r2, r2
 80040da:	b2d2      	uxtb	r2, r2
 80040dc:	f042 0220 	orr.w	r2, r2, #32
 80040e0:	b2d2      	uxtb	r2, r2
 80040e2:	f002 021f 	and.w	r2, r2, #31
 80040e6:	2101      	movs	r1, #1
 80040e8:	fa01 f202 	lsl.w	r2, r1, r2
 80040ec:	4013      	ands	r3, r2
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d0af      	beq.n	8004052 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040f2:	4b2d      	ldr	r3, [pc, #180]	; (80041a8 <HAL_RCC_OscConfig+0x5e8>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80040fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040fe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	695b      	ldr	r3, [r3, #20]
 8004106:	21f8      	movs	r1, #248	; 0xf8
 8004108:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800410c:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8004110:	fa91 f1a1 	rbit	r1, r1
 8004114:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8004118:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 800411c:	fab1 f181 	clz	r1, r1
 8004120:	b2c9      	uxtb	r1, r1
 8004122:	408b      	lsls	r3, r1
 8004124:	4920      	ldr	r1, [pc, #128]	; (80041a8 <HAL_RCC_OscConfig+0x5e8>)
 8004126:	4313      	orrs	r3, r2
 8004128:	600b      	str	r3, [r1, #0]
 800412a:	e06c      	b.n	8004206 <HAL_RCC_OscConfig+0x646>
 800412c:	2301      	movs	r3, #1
 800412e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004132:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004136:	fa93 f3a3 	rbit	r3, r3
 800413a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 800413e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004142:	fab3 f383 	clz	r3, r3
 8004146:	b2db      	uxtb	r3, r3
 8004148:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800414c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004150:	009b      	lsls	r3, r3, #2
 8004152:	461a      	mov	r2, r3
 8004154:	2300      	movs	r3, #0
 8004156:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004158:	f7fe fcd4 	bl	8002b04 <HAL_GetTick>
 800415c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004160:	e00a      	b.n	8004178 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004162:	f7fe fccf 	bl	8002b04 <HAL_GetTick>
 8004166:	4602      	mov	r2, r0
 8004168:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800416c:	1ad3      	subs	r3, r2, r3
 800416e:	2b02      	cmp	r3, #2
 8004170:	d902      	bls.n	8004178 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8004172:	2303      	movs	r3, #3
 8004174:	f000 bd5a 	b.w	8004c2c <HAL_RCC_OscConfig+0x106c>
 8004178:	2302      	movs	r3, #2
 800417a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800417e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004182:	fa93 f3a3 	rbit	r3, r3
 8004186:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 800418a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800418e:	fab3 f383 	clz	r3, r3
 8004192:	b2db      	uxtb	r3, r3
 8004194:	095b      	lsrs	r3, r3, #5
 8004196:	b2db      	uxtb	r3, r3
 8004198:	f043 0301 	orr.w	r3, r3, #1
 800419c:	b2db      	uxtb	r3, r3
 800419e:	2b01      	cmp	r3, #1
 80041a0:	d104      	bne.n	80041ac <HAL_RCC_OscConfig+0x5ec>
 80041a2:	4b01      	ldr	r3, [pc, #4]	; (80041a8 <HAL_RCC_OscConfig+0x5e8>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	e015      	b.n	80041d4 <HAL_RCC_OscConfig+0x614>
 80041a8:	40021000 	.word	0x40021000
 80041ac:	2302      	movs	r3, #2
 80041ae:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041b2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80041b6:	fa93 f3a3 	rbit	r3, r3
 80041ba:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80041be:	2302      	movs	r3, #2
 80041c0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80041c4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80041c8:	fa93 f3a3 	rbit	r3, r3
 80041cc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80041d0:	4bc8      	ldr	r3, [pc, #800]	; (80044f4 <HAL_RCC_OscConfig+0x934>)
 80041d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041d4:	2202      	movs	r2, #2
 80041d6:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80041da:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80041de:	fa92 f2a2 	rbit	r2, r2
 80041e2:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80041e6:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80041ea:	fab2 f282 	clz	r2, r2
 80041ee:	b2d2      	uxtb	r2, r2
 80041f0:	f042 0220 	orr.w	r2, r2, #32
 80041f4:	b2d2      	uxtb	r2, r2
 80041f6:	f002 021f 	and.w	r2, r2, #31
 80041fa:	2101      	movs	r1, #1
 80041fc:	fa01 f202 	lsl.w	r2, r1, r2
 8004200:	4013      	ands	r3, r2
 8004202:	2b00      	cmp	r3, #0
 8004204:	d1ad      	bne.n	8004162 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004206:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800420a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f003 0308 	and.w	r3, r3, #8
 8004216:	2b00      	cmp	r3, #0
 8004218:	f000 8110 	beq.w	800443c <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800421c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004220:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	699b      	ldr	r3, [r3, #24]
 8004228:	2b00      	cmp	r3, #0
 800422a:	d079      	beq.n	8004320 <HAL_RCC_OscConfig+0x760>
 800422c:	2301      	movs	r3, #1
 800422e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004232:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004236:	fa93 f3a3 	rbit	r3, r3
 800423a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 800423e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004242:	fab3 f383 	clz	r3, r3
 8004246:	b2db      	uxtb	r3, r3
 8004248:	461a      	mov	r2, r3
 800424a:	4bab      	ldr	r3, [pc, #684]	; (80044f8 <HAL_RCC_OscConfig+0x938>)
 800424c:	4413      	add	r3, r2
 800424e:	009b      	lsls	r3, r3, #2
 8004250:	461a      	mov	r2, r3
 8004252:	2301      	movs	r3, #1
 8004254:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004256:	f7fe fc55 	bl	8002b04 <HAL_GetTick>
 800425a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800425e:	e00a      	b.n	8004276 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004260:	f7fe fc50 	bl	8002b04 <HAL_GetTick>
 8004264:	4602      	mov	r2, r0
 8004266:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800426a:	1ad3      	subs	r3, r2, r3
 800426c:	2b02      	cmp	r3, #2
 800426e:	d902      	bls.n	8004276 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8004270:	2303      	movs	r3, #3
 8004272:	f000 bcdb 	b.w	8004c2c <HAL_RCC_OscConfig+0x106c>
 8004276:	2302      	movs	r3, #2
 8004278:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800427c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004280:	fa93 f3a3 	rbit	r3, r3
 8004284:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004288:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800428c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004290:	2202      	movs	r2, #2
 8004292:	601a      	str	r2, [r3, #0]
 8004294:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004298:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	fa93 f2a3 	rbit	r2, r3
 80042a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042a6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80042aa:	601a      	str	r2, [r3, #0]
 80042ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80042b4:	2202      	movs	r2, #2
 80042b6:	601a      	str	r2, [r3, #0]
 80042b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	fa93 f2a3 	rbit	r2, r3
 80042c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042ca:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80042ce:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80042d0:	4b88      	ldr	r3, [pc, #544]	; (80044f4 <HAL_RCC_OscConfig+0x934>)
 80042d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80042d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042d8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80042dc:	2102      	movs	r1, #2
 80042de:	6019      	str	r1, [r3, #0]
 80042e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042e4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	fa93 f1a3 	rbit	r1, r3
 80042ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042f2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80042f6:	6019      	str	r1, [r3, #0]
  return result;
 80042f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042fc:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	fab3 f383 	clz	r3, r3
 8004306:	b2db      	uxtb	r3, r3
 8004308:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800430c:	b2db      	uxtb	r3, r3
 800430e:	f003 031f 	and.w	r3, r3, #31
 8004312:	2101      	movs	r1, #1
 8004314:	fa01 f303 	lsl.w	r3, r1, r3
 8004318:	4013      	ands	r3, r2
 800431a:	2b00      	cmp	r3, #0
 800431c:	d0a0      	beq.n	8004260 <HAL_RCC_OscConfig+0x6a0>
 800431e:	e08d      	b.n	800443c <HAL_RCC_OscConfig+0x87c>
 8004320:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004324:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004328:	2201      	movs	r2, #1
 800432a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800432c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004330:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	fa93 f2a3 	rbit	r2, r3
 800433a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800433e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004342:	601a      	str	r2, [r3, #0]
  return result;
 8004344:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004348:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800434c:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800434e:	fab3 f383 	clz	r3, r3
 8004352:	b2db      	uxtb	r3, r3
 8004354:	461a      	mov	r2, r3
 8004356:	4b68      	ldr	r3, [pc, #416]	; (80044f8 <HAL_RCC_OscConfig+0x938>)
 8004358:	4413      	add	r3, r2
 800435a:	009b      	lsls	r3, r3, #2
 800435c:	461a      	mov	r2, r3
 800435e:	2300      	movs	r3, #0
 8004360:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004362:	f7fe fbcf 	bl	8002b04 <HAL_GetTick>
 8004366:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800436a:	e00a      	b.n	8004382 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800436c:	f7fe fbca 	bl	8002b04 <HAL_GetTick>
 8004370:	4602      	mov	r2, r0
 8004372:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004376:	1ad3      	subs	r3, r2, r3
 8004378:	2b02      	cmp	r3, #2
 800437a:	d902      	bls.n	8004382 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 800437c:	2303      	movs	r3, #3
 800437e:	f000 bc55 	b.w	8004c2c <HAL_RCC_OscConfig+0x106c>
 8004382:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004386:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800438a:	2202      	movs	r2, #2
 800438c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800438e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004392:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	fa93 f2a3 	rbit	r2, r3
 800439c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043a0:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80043a4:	601a      	str	r2, [r3, #0]
 80043a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043aa:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80043ae:	2202      	movs	r2, #2
 80043b0:	601a      	str	r2, [r3, #0]
 80043b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043b6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	fa93 f2a3 	rbit	r2, r3
 80043c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043c4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80043c8:	601a      	str	r2, [r3, #0]
 80043ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043ce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80043d2:	2202      	movs	r2, #2
 80043d4:	601a      	str	r2, [r3, #0]
 80043d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043da:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	fa93 f2a3 	rbit	r2, r3
 80043e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043e8:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80043ec:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043ee:	4b41      	ldr	r3, [pc, #260]	; (80044f4 <HAL_RCC_OscConfig+0x934>)
 80043f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80043f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043f6:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80043fa:	2102      	movs	r1, #2
 80043fc:	6019      	str	r1, [r3, #0]
 80043fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004402:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	fa93 f1a3 	rbit	r1, r3
 800440c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004410:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8004414:	6019      	str	r1, [r3, #0]
  return result;
 8004416:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800441a:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	fab3 f383 	clz	r3, r3
 8004424:	b2db      	uxtb	r3, r3
 8004426:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800442a:	b2db      	uxtb	r3, r3
 800442c:	f003 031f 	and.w	r3, r3, #31
 8004430:	2101      	movs	r1, #1
 8004432:	fa01 f303 	lsl.w	r3, r1, r3
 8004436:	4013      	ands	r3, r2
 8004438:	2b00      	cmp	r3, #0
 800443a:	d197      	bne.n	800436c <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800443c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004440:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f003 0304 	and.w	r3, r3, #4
 800444c:	2b00      	cmp	r3, #0
 800444e:	f000 81a1 	beq.w	8004794 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004452:	2300      	movs	r3, #0
 8004454:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004458:	4b26      	ldr	r3, [pc, #152]	; (80044f4 <HAL_RCC_OscConfig+0x934>)
 800445a:	69db      	ldr	r3, [r3, #28]
 800445c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004460:	2b00      	cmp	r3, #0
 8004462:	d116      	bne.n	8004492 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004464:	4b23      	ldr	r3, [pc, #140]	; (80044f4 <HAL_RCC_OscConfig+0x934>)
 8004466:	69db      	ldr	r3, [r3, #28]
 8004468:	4a22      	ldr	r2, [pc, #136]	; (80044f4 <HAL_RCC_OscConfig+0x934>)
 800446a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800446e:	61d3      	str	r3, [r2, #28]
 8004470:	4b20      	ldr	r3, [pc, #128]	; (80044f4 <HAL_RCC_OscConfig+0x934>)
 8004472:	69db      	ldr	r3, [r3, #28]
 8004474:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8004478:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800447c:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8004480:	601a      	str	r2, [r3, #0]
 8004482:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004486:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800448a:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800448c:	2301      	movs	r3, #1
 800448e:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004492:	4b1a      	ldr	r3, [pc, #104]	; (80044fc <HAL_RCC_OscConfig+0x93c>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800449a:	2b00      	cmp	r3, #0
 800449c:	d11a      	bne.n	80044d4 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800449e:	4b17      	ldr	r3, [pc, #92]	; (80044fc <HAL_RCC_OscConfig+0x93c>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	4a16      	ldr	r2, [pc, #88]	; (80044fc <HAL_RCC_OscConfig+0x93c>)
 80044a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044a8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80044aa:	f7fe fb2b 	bl	8002b04 <HAL_GetTick>
 80044ae:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044b2:	e009      	b.n	80044c8 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044b4:	f7fe fb26 	bl	8002b04 <HAL_GetTick>
 80044b8:	4602      	mov	r2, r0
 80044ba:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80044be:	1ad3      	subs	r3, r2, r3
 80044c0:	2b64      	cmp	r3, #100	; 0x64
 80044c2:	d901      	bls.n	80044c8 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80044c4:	2303      	movs	r3, #3
 80044c6:	e3b1      	b.n	8004c2c <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044c8:	4b0c      	ldr	r3, [pc, #48]	; (80044fc <HAL_RCC_OscConfig+0x93c>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d0ef      	beq.n	80044b4 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80044d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80044d8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	68db      	ldr	r3, [r3, #12]
 80044e0:	2b01      	cmp	r3, #1
 80044e2:	d10d      	bne.n	8004500 <HAL_RCC_OscConfig+0x940>
 80044e4:	4b03      	ldr	r3, [pc, #12]	; (80044f4 <HAL_RCC_OscConfig+0x934>)
 80044e6:	6a1b      	ldr	r3, [r3, #32]
 80044e8:	4a02      	ldr	r2, [pc, #8]	; (80044f4 <HAL_RCC_OscConfig+0x934>)
 80044ea:	f043 0301 	orr.w	r3, r3, #1
 80044ee:	6213      	str	r3, [r2, #32]
 80044f0:	e03c      	b.n	800456c <HAL_RCC_OscConfig+0x9ac>
 80044f2:	bf00      	nop
 80044f4:	40021000 	.word	0x40021000
 80044f8:	10908120 	.word	0x10908120
 80044fc:	40007000 	.word	0x40007000
 8004500:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004504:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	68db      	ldr	r3, [r3, #12]
 800450c:	2b00      	cmp	r3, #0
 800450e:	d10c      	bne.n	800452a <HAL_RCC_OscConfig+0x96a>
 8004510:	4bc1      	ldr	r3, [pc, #772]	; (8004818 <HAL_RCC_OscConfig+0xc58>)
 8004512:	6a1b      	ldr	r3, [r3, #32]
 8004514:	4ac0      	ldr	r2, [pc, #768]	; (8004818 <HAL_RCC_OscConfig+0xc58>)
 8004516:	f023 0301 	bic.w	r3, r3, #1
 800451a:	6213      	str	r3, [r2, #32]
 800451c:	4bbe      	ldr	r3, [pc, #760]	; (8004818 <HAL_RCC_OscConfig+0xc58>)
 800451e:	6a1b      	ldr	r3, [r3, #32]
 8004520:	4abd      	ldr	r2, [pc, #756]	; (8004818 <HAL_RCC_OscConfig+0xc58>)
 8004522:	f023 0304 	bic.w	r3, r3, #4
 8004526:	6213      	str	r3, [r2, #32]
 8004528:	e020      	b.n	800456c <HAL_RCC_OscConfig+0x9ac>
 800452a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800452e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	68db      	ldr	r3, [r3, #12]
 8004536:	2b05      	cmp	r3, #5
 8004538:	d10c      	bne.n	8004554 <HAL_RCC_OscConfig+0x994>
 800453a:	4bb7      	ldr	r3, [pc, #732]	; (8004818 <HAL_RCC_OscConfig+0xc58>)
 800453c:	6a1b      	ldr	r3, [r3, #32]
 800453e:	4ab6      	ldr	r2, [pc, #728]	; (8004818 <HAL_RCC_OscConfig+0xc58>)
 8004540:	f043 0304 	orr.w	r3, r3, #4
 8004544:	6213      	str	r3, [r2, #32]
 8004546:	4bb4      	ldr	r3, [pc, #720]	; (8004818 <HAL_RCC_OscConfig+0xc58>)
 8004548:	6a1b      	ldr	r3, [r3, #32]
 800454a:	4ab3      	ldr	r2, [pc, #716]	; (8004818 <HAL_RCC_OscConfig+0xc58>)
 800454c:	f043 0301 	orr.w	r3, r3, #1
 8004550:	6213      	str	r3, [r2, #32]
 8004552:	e00b      	b.n	800456c <HAL_RCC_OscConfig+0x9ac>
 8004554:	4bb0      	ldr	r3, [pc, #704]	; (8004818 <HAL_RCC_OscConfig+0xc58>)
 8004556:	6a1b      	ldr	r3, [r3, #32]
 8004558:	4aaf      	ldr	r2, [pc, #700]	; (8004818 <HAL_RCC_OscConfig+0xc58>)
 800455a:	f023 0301 	bic.w	r3, r3, #1
 800455e:	6213      	str	r3, [r2, #32]
 8004560:	4bad      	ldr	r3, [pc, #692]	; (8004818 <HAL_RCC_OscConfig+0xc58>)
 8004562:	6a1b      	ldr	r3, [r3, #32]
 8004564:	4aac      	ldr	r2, [pc, #688]	; (8004818 <HAL_RCC_OscConfig+0xc58>)
 8004566:	f023 0304 	bic.w	r3, r3, #4
 800456a:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800456c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004570:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	68db      	ldr	r3, [r3, #12]
 8004578:	2b00      	cmp	r3, #0
 800457a:	f000 8081 	beq.w	8004680 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800457e:	f7fe fac1 	bl	8002b04 <HAL_GetTick>
 8004582:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004586:	e00b      	b.n	80045a0 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004588:	f7fe fabc 	bl	8002b04 <HAL_GetTick>
 800458c:	4602      	mov	r2, r0
 800458e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004592:	1ad3      	subs	r3, r2, r3
 8004594:	f241 3288 	movw	r2, #5000	; 0x1388
 8004598:	4293      	cmp	r3, r2
 800459a:	d901      	bls.n	80045a0 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 800459c:	2303      	movs	r3, #3
 800459e:	e345      	b.n	8004c2c <HAL_RCC_OscConfig+0x106c>
 80045a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80045a4:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80045a8:	2202      	movs	r2, #2
 80045aa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80045b0:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	fa93 f2a3 	rbit	r2, r3
 80045ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80045be:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80045c2:	601a      	str	r2, [r3, #0]
 80045c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80045c8:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80045cc:	2202      	movs	r2, #2
 80045ce:	601a      	str	r2, [r3, #0]
 80045d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80045d4:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	fa93 f2a3 	rbit	r2, r3
 80045de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80045e2:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80045e6:	601a      	str	r2, [r3, #0]
  return result;
 80045e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80045ec:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80045f0:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045f2:	fab3 f383 	clz	r3, r3
 80045f6:	b2db      	uxtb	r3, r3
 80045f8:	095b      	lsrs	r3, r3, #5
 80045fa:	b2db      	uxtb	r3, r3
 80045fc:	f043 0302 	orr.w	r3, r3, #2
 8004600:	b2db      	uxtb	r3, r3
 8004602:	2b02      	cmp	r3, #2
 8004604:	d102      	bne.n	800460c <HAL_RCC_OscConfig+0xa4c>
 8004606:	4b84      	ldr	r3, [pc, #528]	; (8004818 <HAL_RCC_OscConfig+0xc58>)
 8004608:	6a1b      	ldr	r3, [r3, #32]
 800460a:	e013      	b.n	8004634 <HAL_RCC_OscConfig+0xa74>
 800460c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004610:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8004614:	2202      	movs	r2, #2
 8004616:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004618:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800461c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	fa93 f2a3 	rbit	r2, r3
 8004626:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800462a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800462e:	601a      	str	r2, [r3, #0]
 8004630:	4b79      	ldr	r3, [pc, #484]	; (8004818 <HAL_RCC_OscConfig+0xc58>)
 8004632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004634:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004638:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 800463c:	2102      	movs	r1, #2
 800463e:	6011      	str	r1, [r2, #0]
 8004640:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004644:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8004648:	6812      	ldr	r2, [r2, #0]
 800464a:	fa92 f1a2 	rbit	r1, r2
 800464e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004652:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8004656:	6011      	str	r1, [r2, #0]
  return result;
 8004658:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800465c:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8004660:	6812      	ldr	r2, [r2, #0]
 8004662:	fab2 f282 	clz	r2, r2
 8004666:	b2d2      	uxtb	r2, r2
 8004668:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800466c:	b2d2      	uxtb	r2, r2
 800466e:	f002 021f 	and.w	r2, r2, #31
 8004672:	2101      	movs	r1, #1
 8004674:	fa01 f202 	lsl.w	r2, r1, r2
 8004678:	4013      	ands	r3, r2
 800467a:	2b00      	cmp	r3, #0
 800467c:	d084      	beq.n	8004588 <HAL_RCC_OscConfig+0x9c8>
 800467e:	e07f      	b.n	8004780 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004680:	f7fe fa40 	bl	8002b04 <HAL_GetTick>
 8004684:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004688:	e00b      	b.n	80046a2 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800468a:	f7fe fa3b 	bl	8002b04 <HAL_GetTick>
 800468e:	4602      	mov	r2, r0
 8004690:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004694:	1ad3      	subs	r3, r2, r3
 8004696:	f241 3288 	movw	r2, #5000	; 0x1388
 800469a:	4293      	cmp	r3, r2
 800469c:	d901      	bls.n	80046a2 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 800469e:	2303      	movs	r3, #3
 80046a0:	e2c4      	b.n	8004c2c <HAL_RCC_OscConfig+0x106c>
 80046a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046a6:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80046aa:	2202      	movs	r2, #2
 80046ac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046b2:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	fa93 f2a3 	rbit	r2, r3
 80046bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046c0:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80046c4:	601a      	str	r2, [r3, #0]
 80046c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046ca:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80046ce:	2202      	movs	r2, #2
 80046d0:	601a      	str	r2, [r3, #0]
 80046d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046d6:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	fa93 f2a3 	rbit	r2, r3
 80046e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046e4:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80046e8:	601a      	str	r2, [r3, #0]
  return result;
 80046ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046ee:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80046f2:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046f4:	fab3 f383 	clz	r3, r3
 80046f8:	b2db      	uxtb	r3, r3
 80046fa:	095b      	lsrs	r3, r3, #5
 80046fc:	b2db      	uxtb	r3, r3
 80046fe:	f043 0302 	orr.w	r3, r3, #2
 8004702:	b2db      	uxtb	r3, r3
 8004704:	2b02      	cmp	r3, #2
 8004706:	d102      	bne.n	800470e <HAL_RCC_OscConfig+0xb4e>
 8004708:	4b43      	ldr	r3, [pc, #268]	; (8004818 <HAL_RCC_OscConfig+0xc58>)
 800470a:	6a1b      	ldr	r3, [r3, #32]
 800470c:	e013      	b.n	8004736 <HAL_RCC_OscConfig+0xb76>
 800470e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004712:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8004716:	2202      	movs	r2, #2
 8004718:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800471a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800471e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	fa93 f2a3 	rbit	r2, r3
 8004728:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800472c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8004730:	601a      	str	r2, [r3, #0]
 8004732:	4b39      	ldr	r3, [pc, #228]	; (8004818 <HAL_RCC_OscConfig+0xc58>)
 8004734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004736:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800473a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800473e:	2102      	movs	r1, #2
 8004740:	6011      	str	r1, [r2, #0]
 8004742:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004746:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800474a:	6812      	ldr	r2, [r2, #0]
 800474c:	fa92 f1a2 	rbit	r1, r2
 8004750:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004754:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8004758:	6011      	str	r1, [r2, #0]
  return result;
 800475a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800475e:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8004762:	6812      	ldr	r2, [r2, #0]
 8004764:	fab2 f282 	clz	r2, r2
 8004768:	b2d2      	uxtb	r2, r2
 800476a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800476e:	b2d2      	uxtb	r2, r2
 8004770:	f002 021f 	and.w	r2, r2, #31
 8004774:	2101      	movs	r1, #1
 8004776:	fa01 f202 	lsl.w	r2, r1, r2
 800477a:	4013      	ands	r3, r2
 800477c:	2b00      	cmp	r3, #0
 800477e:	d184      	bne.n	800468a <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004780:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8004784:	2b01      	cmp	r3, #1
 8004786:	d105      	bne.n	8004794 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004788:	4b23      	ldr	r3, [pc, #140]	; (8004818 <HAL_RCC_OscConfig+0xc58>)
 800478a:	69db      	ldr	r3, [r3, #28]
 800478c:	4a22      	ldr	r2, [pc, #136]	; (8004818 <HAL_RCC_OscConfig+0xc58>)
 800478e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004792:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004794:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004798:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	69db      	ldr	r3, [r3, #28]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	f000 8242 	beq.w	8004c2a <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80047a6:	4b1c      	ldr	r3, [pc, #112]	; (8004818 <HAL_RCC_OscConfig+0xc58>)
 80047a8:	685b      	ldr	r3, [r3, #4]
 80047aa:	f003 030c 	and.w	r3, r3, #12
 80047ae:	2b08      	cmp	r3, #8
 80047b0:	f000 8213 	beq.w	8004bda <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80047b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80047b8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	69db      	ldr	r3, [r3, #28]
 80047c0:	2b02      	cmp	r3, #2
 80047c2:	f040 8162 	bne.w	8004a8a <HAL_RCC_OscConfig+0xeca>
 80047c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80047ca:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80047ce:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80047d2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80047d8:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	fa93 f2a3 	rbit	r2, r3
 80047e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80047e6:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80047ea:	601a      	str	r2, [r3, #0]
  return result;
 80047ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80047f0:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80047f4:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047f6:	fab3 f383 	clz	r3, r3
 80047fa:	b2db      	uxtb	r3, r3
 80047fc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004800:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004804:	009b      	lsls	r3, r3, #2
 8004806:	461a      	mov	r2, r3
 8004808:	2300      	movs	r3, #0
 800480a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800480c:	f7fe f97a 	bl	8002b04 <HAL_GetTick>
 8004810:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004814:	e00c      	b.n	8004830 <HAL_RCC_OscConfig+0xc70>
 8004816:	bf00      	nop
 8004818:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800481c:	f7fe f972 	bl	8002b04 <HAL_GetTick>
 8004820:	4602      	mov	r2, r0
 8004822:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004826:	1ad3      	subs	r3, r2, r3
 8004828:	2b02      	cmp	r3, #2
 800482a:	d901      	bls.n	8004830 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 800482c:	2303      	movs	r3, #3
 800482e:	e1fd      	b.n	8004c2c <HAL_RCC_OscConfig+0x106c>
 8004830:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004834:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8004838:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800483c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800483e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004842:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	fa93 f2a3 	rbit	r2, r3
 800484c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004850:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8004854:	601a      	str	r2, [r3, #0]
  return result;
 8004856:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800485a:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800485e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004860:	fab3 f383 	clz	r3, r3
 8004864:	b2db      	uxtb	r3, r3
 8004866:	095b      	lsrs	r3, r3, #5
 8004868:	b2db      	uxtb	r3, r3
 800486a:	f043 0301 	orr.w	r3, r3, #1
 800486e:	b2db      	uxtb	r3, r3
 8004870:	2b01      	cmp	r3, #1
 8004872:	d102      	bne.n	800487a <HAL_RCC_OscConfig+0xcba>
 8004874:	4bb0      	ldr	r3, [pc, #704]	; (8004b38 <HAL_RCC_OscConfig+0xf78>)
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	e027      	b.n	80048ca <HAL_RCC_OscConfig+0xd0a>
 800487a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800487e:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8004882:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004886:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004888:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800488c:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	fa93 f2a3 	rbit	r2, r3
 8004896:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800489a:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800489e:	601a      	str	r2, [r3, #0]
 80048a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80048a4:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80048a8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80048ac:	601a      	str	r2, [r3, #0]
 80048ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80048b2:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	fa93 f2a3 	rbit	r2, r3
 80048bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80048c0:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80048c4:	601a      	str	r2, [r3, #0]
 80048c6:	4b9c      	ldr	r3, [pc, #624]	; (8004b38 <HAL_RCC_OscConfig+0xf78>)
 80048c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ca:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80048ce:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80048d2:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80048d6:	6011      	str	r1, [r2, #0]
 80048d8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80048dc:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80048e0:	6812      	ldr	r2, [r2, #0]
 80048e2:	fa92 f1a2 	rbit	r1, r2
 80048e6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80048ea:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80048ee:	6011      	str	r1, [r2, #0]
  return result;
 80048f0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80048f4:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80048f8:	6812      	ldr	r2, [r2, #0]
 80048fa:	fab2 f282 	clz	r2, r2
 80048fe:	b2d2      	uxtb	r2, r2
 8004900:	f042 0220 	orr.w	r2, r2, #32
 8004904:	b2d2      	uxtb	r2, r2
 8004906:	f002 021f 	and.w	r2, r2, #31
 800490a:	2101      	movs	r1, #1
 800490c:	fa01 f202 	lsl.w	r2, r1, r2
 8004910:	4013      	ands	r3, r2
 8004912:	2b00      	cmp	r3, #0
 8004914:	d182      	bne.n	800481c <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004916:	4b88      	ldr	r3, [pc, #544]	; (8004b38 <HAL_RCC_OscConfig+0xf78>)
 8004918:	685b      	ldr	r3, [r3, #4]
 800491a:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800491e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004922:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800492a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800492e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	6a1b      	ldr	r3, [r3, #32]
 8004936:	430b      	orrs	r3, r1
 8004938:	497f      	ldr	r1, [pc, #508]	; (8004b38 <HAL_RCC_OscConfig+0xf78>)
 800493a:	4313      	orrs	r3, r2
 800493c:	604b      	str	r3, [r1, #4]
 800493e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004942:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8004946:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800494a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800494c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004950:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	fa93 f2a3 	rbit	r2, r3
 800495a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800495e:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8004962:	601a      	str	r2, [r3, #0]
  return result;
 8004964:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004968:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800496c:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800496e:	fab3 f383 	clz	r3, r3
 8004972:	b2db      	uxtb	r3, r3
 8004974:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004978:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800497c:	009b      	lsls	r3, r3, #2
 800497e:	461a      	mov	r2, r3
 8004980:	2301      	movs	r3, #1
 8004982:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004984:	f7fe f8be 	bl	8002b04 <HAL_GetTick>
 8004988:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800498c:	e009      	b.n	80049a2 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800498e:	f7fe f8b9 	bl	8002b04 <HAL_GetTick>
 8004992:	4602      	mov	r2, r0
 8004994:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004998:	1ad3      	subs	r3, r2, r3
 800499a:	2b02      	cmp	r3, #2
 800499c:	d901      	bls.n	80049a2 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 800499e:	2303      	movs	r3, #3
 80049a0:	e144      	b.n	8004c2c <HAL_RCC_OscConfig+0x106c>
 80049a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80049a6:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80049aa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80049ae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80049b4:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	fa93 f2a3 	rbit	r2, r3
 80049be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80049c2:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80049c6:	601a      	str	r2, [r3, #0]
  return result;
 80049c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80049cc:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80049d0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80049d2:	fab3 f383 	clz	r3, r3
 80049d6:	b2db      	uxtb	r3, r3
 80049d8:	095b      	lsrs	r3, r3, #5
 80049da:	b2db      	uxtb	r3, r3
 80049dc:	f043 0301 	orr.w	r3, r3, #1
 80049e0:	b2db      	uxtb	r3, r3
 80049e2:	2b01      	cmp	r3, #1
 80049e4:	d102      	bne.n	80049ec <HAL_RCC_OscConfig+0xe2c>
 80049e6:	4b54      	ldr	r3, [pc, #336]	; (8004b38 <HAL_RCC_OscConfig+0xf78>)
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	e027      	b.n	8004a3c <HAL_RCC_OscConfig+0xe7c>
 80049ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80049f0:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80049f4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80049f8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80049fe:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	fa93 f2a3 	rbit	r2, r3
 8004a08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a0c:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8004a10:	601a      	str	r2, [r3, #0]
 8004a12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a16:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8004a1a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004a1e:	601a      	str	r2, [r3, #0]
 8004a20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a24:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	fa93 f2a3 	rbit	r2, r3
 8004a2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a32:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8004a36:	601a      	str	r2, [r3, #0]
 8004a38:	4b3f      	ldr	r3, [pc, #252]	; (8004b38 <HAL_RCC_OscConfig+0xf78>)
 8004a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a3c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004a40:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8004a44:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004a48:	6011      	str	r1, [r2, #0]
 8004a4a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004a4e:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8004a52:	6812      	ldr	r2, [r2, #0]
 8004a54:	fa92 f1a2 	rbit	r1, r2
 8004a58:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004a5c:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8004a60:	6011      	str	r1, [r2, #0]
  return result;
 8004a62:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004a66:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8004a6a:	6812      	ldr	r2, [r2, #0]
 8004a6c:	fab2 f282 	clz	r2, r2
 8004a70:	b2d2      	uxtb	r2, r2
 8004a72:	f042 0220 	orr.w	r2, r2, #32
 8004a76:	b2d2      	uxtb	r2, r2
 8004a78:	f002 021f 	and.w	r2, r2, #31
 8004a7c:	2101      	movs	r1, #1
 8004a7e:	fa01 f202 	lsl.w	r2, r1, r2
 8004a82:	4013      	ands	r3, r2
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d082      	beq.n	800498e <HAL_RCC_OscConfig+0xdce>
 8004a88:	e0cf      	b.n	8004c2a <HAL_RCC_OscConfig+0x106a>
 8004a8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a8e:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8004a92:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004a96:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a9c:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	fa93 f2a3 	rbit	r2, r3
 8004aa6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004aaa:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8004aae:	601a      	str	r2, [r3, #0]
  return result;
 8004ab0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ab4:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8004ab8:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004aba:	fab3 f383 	clz	r3, r3
 8004abe:	b2db      	uxtb	r3, r3
 8004ac0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004ac4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004ac8:	009b      	lsls	r3, r3, #2
 8004aca:	461a      	mov	r2, r3
 8004acc:	2300      	movs	r3, #0
 8004ace:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ad0:	f7fe f818 	bl	8002b04 <HAL_GetTick>
 8004ad4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004ad8:	e009      	b.n	8004aee <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ada:	f7fe f813 	bl	8002b04 <HAL_GetTick>
 8004ade:	4602      	mov	r2, r0
 8004ae0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004ae4:	1ad3      	subs	r3, r2, r3
 8004ae6:	2b02      	cmp	r3, #2
 8004ae8:	d901      	bls.n	8004aee <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8004aea:	2303      	movs	r3, #3
 8004aec:	e09e      	b.n	8004c2c <HAL_RCC_OscConfig+0x106c>
 8004aee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004af2:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8004af6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004afa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004afc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b00:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	fa93 f2a3 	rbit	r2, r3
 8004b0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b0e:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8004b12:	601a      	str	r2, [r3, #0]
  return result;
 8004b14:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b18:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8004b1c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004b1e:	fab3 f383 	clz	r3, r3
 8004b22:	b2db      	uxtb	r3, r3
 8004b24:	095b      	lsrs	r3, r3, #5
 8004b26:	b2db      	uxtb	r3, r3
 8004b28:	f043 0301 	orr.w	r3, r3, #1
 8004b2c:	b2db      	uxtb	r3, r3
 8004b2e:	2b01      	cmp	r3, #1
 8004b30:	d104      	bne.n	8004b3c <HAL_RCC_OscConfig+0xf7c>
 8004b32:	4b01      	ldr	r3, [pc, #4]	; (8004b38 <HAL_RCC_OscConfig+0xf78>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	e029      	b.n	8004b8c <HAL_RCC_OscConfig+0xfcc>
 8004b38:	40021000 	.word	0x40021000
 8004b3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b40:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8004b44:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004b48:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b4e:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	fa93 f2a3 	rbit	r2, r3
 8004b58:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b5c:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8004b60:	601a      	str	r2, [r3, #0]
 8004b62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b66:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8004b6a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004b6e:	601a      	str	r2, [r3, #0]
 8004b70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b74:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	fa93 f2a3 	rbit	r2, r3
 8004b7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b82:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8004b86:	601a      	str	r2, [r3, #0]
 8004b88:	4b2b      	ldr	r3, [pc, #172]	; (8004c38 <HAL_RCC_OscConfig+0x1078>)
 8004b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b8c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004b90:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8004b94:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004b98:	6011      	str	r1, [r2, #0]
 8004b9a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004b9e:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8004ba2:	6812      	ldr	r2, [r2, #0]
 8004ba4:	fa92 f1a2 	rbit	r1, r2
 8004ba8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004bac:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8004bb0:	6011      	str	r1, [r2, #0]
  return result;
 8004bb2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004bb6:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8004bba:	6812      	ldr	r2, [r2, #0]
 8004bbc:	fab2 f282 	clz	r2, r2
 8004bc0:	b2d2      	uxtb	r2, r2
 8004bc2:	f042 0220 	orr.w	r2, r2, #32
 8004bc6:	b2d2      	uxtb	r2, r2
 8004bc8:	f002 021f 	and.w	r2, r2, #31
 8004bcc:	2101      	movs	r1, #1
 8004bce:	fa01 f202 	lsl.w	r2, r1, r2
 8004bd2:	4013      	ands	r3, r2
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d180      	bne.n	8004ada <HAL_RCC_OscConfig+0xf1a>
 8004bd8:	e027      	b.n	8004c2a <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004bda:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004bde:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	69db      	ldr	r3, [r3, #28]
 8004be6:	2b01      	cmp	r3, #1
 8004be8:	d101      	bne.n	8004bee <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8004bea:	2301      	movs	r3, #1
 8004bec:	e01e      	b.n	8004c2c <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004bee:	4b12      	ldr	r3, [pc, #72]	; (8004c38 <HAL_RCC_OscConfig+0x1078>)
 8004bf0:	685b      	ldr	r3, [r3, #4]
 8004bf2:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004bf6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8004bfa:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004bfe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c02:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	6a1b      	ldr	r3, [r3, #32]
 8004c0a:	429a      	cmp	r2, r3
 8004c0c:	d10b      	bne.n	8004c26 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8004c0e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8004c12:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004c16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c1a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004c22:	429a      	cmp	r2, r3
 8004c24:	d001      	beq.n	8004c2a <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8004c26:	2301      	movs	r3, #1
 8004c28:	e000      	b.n	8004c2c <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8004c2a:	2300      	movs	r3, #0
}
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8004c32:	46bd      	mov	sp, r7
 8004c34:	bd80      	pop	{r7, pc}
 8004c36:	bf00      	nop
 8004c38:	40021000 	.word	0x40021000

08004c3c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b09e      	sub	sp, #120	; 0x78
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
 8004c44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004c46:	2300      	movs	r3, #0
 8004c48:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d101      	bne.n	8004c54 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004c50:	2301      	movs	r3, #1
 8004c52:	e162      	b.n	8004f1a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004c54:	4b90      	ldr	r3, [pc, #576]	; (8004e98 <HAL_RCC_ClockConfig+0x25c>)
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f003 0307 	and.w	r3, r3, #7
 8004c5c:	683a      	ldr	r2, [r7, #0]
 8004c5e:	429a      	cmp	r2, r3
 8004c60:	d910      	bls.n	8004c84 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c62:	4b8d      	ldr	r3, [pc, #564]	; (8004e98 <HAL_RCC_ClockConfig+0x25c>)
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f023 0207 	bic.w	r2, r3, #7
 8004c6a:	498b      	ldr	r1, [pc, #556]	; (8004e98 <HAL_RCC_ClockConfig+0x25c>)
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	4313      	orrs	r3, r2
 8004c70:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c72:	4b89      	ldr	r3, [pc, #548]	; (8004e98 <HAL_RCC_ClockConfig+0x25c>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f003 0307 	and.w	r3, r3, #7
 8004c7a:	683a      	ldr	r2, [r7, #0]
 8004c7c:	429a      	cmp	r2, r3
 8004c7e:	d001      	beq.n	8004c84 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004c80:	2301      	movs	r3, #1
 8004c82:	e14a      	b.n	8004f1a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f003 0302 	and.w	r3, r3, #2
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d008      	beq.n	8004ca2 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c90:	4b82      	ldr	r3, [pc, #520]	; (8004e9c <HAL_RCC_ClockConfig+0x260>)
 8004c92:	685b      	ldr	r3, [r3, #4]
 8004c94:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	689b      	ldr	r3, [r3, #8]
 8004c9c:	497f      	ldr	r1, [pc, #508]	; (8004e9c <HAL_RCC_ClockConfig+0x260>)
 8004c9e:	4313      	orrs	r3, r2
 8004ca0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f003 0301 	and.w	r3, r3, #1
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	f000 80dc 	beq.w	8004e68 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	685b      	ldr	r3, [r3, #4]
 8004cb4:	2b01      	cmp	r3, #1
 8004cb6:	d13c      	bne.n	8004d32 <HAL_RCC_ClockConfig+0xf6>
 8004cb8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004cbc:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cbe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004cc0:	fa93 f3a3 	rbit	r3, r3
 8004cc4:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8004cc6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004cc8:	fab3 f383 	clz	r3, r3
 8004ccc:	b2db      	uxtb	r3, r3
 8004cce:	095b      	lsrs	r3, r3, #5
 8004cd0:	b2db      	uxtb	r3, r3
 8004cd2:	f043 0301 	orr.w	r3, r3, #1
 8004cd6:	b2db      	uxtb	r3, r3
 8004cd8:	2b01      	cmp	r3, #1
 8004cda:	d102      	bne.n	8004ce2 <HAL_RCC_ClockConfig+0xa6>
 8004cdc:	4b6f      	ldr	r3, [pc, #444]	; (8004e9c <HAL_RCC_ClockConfig+0x260>)
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	e00f      	b.n	8004d02 <HAL_RCC_ClockConfig+0xc6>
 8004ce2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004ce6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ce8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004cea:	fa93 f3a3 	rbit	r3, r3
 8004cee:	667b      	str	r3, [r7, #100]	; 0x64
 8004cf0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004cf4:	663b      	str	r3, [r7, #96]	; 0x60
 8004cf6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004cf8:	fa93 f3a3 	rbit	r3, r3
 8004cfc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004cfe:	4b67      	ldr	r3, [pc, #412]	; (8004e9c <HAL_RCC_ClockConfig+0x260>)
 8004d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d02:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004d06:	65ba      	str	r2, [r7, #88]	; 0x58
 8004d08:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004d0a:	fa92 f2a2 	rbit	r2, r2
 8004d0e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8004d10:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004d12:	fab2 f282 	clz	r2, r2
 8004d16:	b2d2      	uxtb	r2, r2
 8004d18:	f042 0220 	orr.w	r2, r2, #32
 8004d1c:	b2d2      	uxtb	r2, r2
 8004d1e:	f002 021f 	and.w	r2, r2, #31
 8004d22:	2101      	movs	r1, #1
 8004d24:	fa01 f202 	lsl.w	r2, r1, r2
 8004d28:	4013      	ands	r3, r2
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d17b      	bne.n	8004e26 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004d2e:	2301      	movs	r3, #1
 8004d30:	e0f3      	b.n	8004f1a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	685b      	ldr	r3, [r3, #4]
 8004d36:	2b02      	cmp	r3, #2
 8004d38:	d13c      	bne.n	8004db4 <HAL_RCC_ClockConfig+0x178>
 8004d3a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004d3e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d40:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d42:	fa93 f3a3 	rbit	r3, r3
 8004d46:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8004d48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d4a:	fab3 f383 	clz	r3, r3
 8004d4e:	b2db      	uxtb	r3, r3
 8004d50:	095b      	lsrs	r3, r3, #5
 8004d52:	b2db      	uxtb	r3, r3
 8004d54:	f043 0301 	orr.w	r3, r3, #1
 8004d58:	b2db      	uxtb	r3, r3
 8004d5a:	2b01      	cmp	r3, #1
 8004d5c:	d102      	bne.n	8004d64 <HAL_RCC_ClockConfig+0x128>
 8004d5e:	4b4f      	ldr	r3, [pc, #316]	; (8004e9c <HAL_RCC_ClockConfig+0x260>)
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	e00f      	b.n	8004d84 <HAL_RCC_ClockConfig+0x148>
 8004d64:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004d68:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d6c:	fa93 f3a3 	rbit	r3, r3
 8004d70:	647b      	str	r3, [r7, #68]	; 0x44
 8004d72:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004d76:	643b      	str	r3, [r7, #64]	; 0x40
 8004d78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d7a:	fa93 f3a3 	rbit	r3, r3
 8004d7e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d80:	4b46      	ldr	r3, [pc, #280]	; (8004e9c <HAL_RCC_ClockConfig+0x260>)
 8004d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d84:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004d88:	63ba      	str	r2, [r7, #56]	; 0x38
 8004d8a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004d8c:	fa92 f2a2 	rbit	r2, r2
 8004d90:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8004d92:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004d94:	fab2 f282 	clz	r2, r2
 8004d98:	b2d2      	uxtb	r2, r2
 8004d9a:	f042 0220 	orr.w	r2, r2, #32
 8004d9e:	b2d2      	uxtb	r2, r2
 8004da0:	f002 021f 	and.w	r2, r2, #31
 8004da4:	2101      	movs	r1, #1
 8004da6:	fa01 f202 	lsl.w	r2, r1, r2
 8004daa:	4013      	ands	r3, r2
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d13a      	bne.n	8004e26 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004db0:	2301      	movs	r3, #1
 8004db2:	e0b2      	b.n	8004f1a <HAL_RCC_ClockConfig+0x2de>
 8004db4:	2302      	movs	r3, #2
 8004db6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004db8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dba:	fa93 f3a3 	rbit	r3, r3
 8004dbe:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004dc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004dc2:	fab3 f383 	clz	r3, r3
 8004dc6:	b2db      	uxtb	r3, r3
 8004dc8:	095b      	lsrs	r3, r3, #5
 8004dca:	b2db      	uxtb	r3, r3
 8004dcc:	f043 0301 	orr.w	r3, r3, #1
 8004dd0:	b2db      	uxtb	r3, r3
 8004dd2:	2b01      	cmp	r3, #1
 8004dd4:	d102      	bne.n	8004ddc <HAL_RCC_ClockConfig+0x1a0>
 8004dd6:	4b31      	ldr	r3, [pc, #196]	; (8004e9c <HAL_RCC_ClockConfig+0x260>)
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	e00d      	b.n	8004df8 <HAL_RCC_ClockConfig+0x1bc>
 8004ddc:	2302      	movs	r3, #2
 8004dde:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004de0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004de2:	fa93 f3a3 	rbit	r3, r3
 8004de6:	627b      	str	r3, [r7, #36]	; 0x24
 8004de8:	2302      	movs	r3, #2
 8004dea:	623b      	str	r3, [r7, #32]
 8004dec:	6a3b      	ldr	r3, [r7, #32]
 8004dee:	fa93 f3a3 	rbit	r3, r3
 8004df2:	61fb      	str	r3, [r7, #28]
 8004df4:	4b29      	ldr	r3, [pc, #164]	; (8004e9c <HAL_RCC_ClockConfig+0x260>)
 8004df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004df8:	2202      	movs	r2, #2
 8004dfa:	61ba      	str	r2, [r7, #24]
 8004dfc:	69ba      	ldr	r2, [r7, #24]
 8004dfe:	fa92 f2a2 	rbit	r2, r2
 8004e02:	617a      	str	r2, [r7, #20]
  return result;
 8004e04:	697a      	ldr	r2, [r7, #20]
 8004e06:	fab2 f282 	clz	r2, r2
 8004e0a:	b2d2      	uxtb	r2, r2
 8004e0c:	f042 0220 	orr.w	r2, r2, #32
 8004e10:	b2d2      	uxtb	r2, r2
 8004e12:	f002 021f 	and.w	r2, r2, #31
 8004e16:	2101      	movs	r1, #1
 8004e18:	fa01 f202 	lsl.w	r2, r1, r2
 8004e1c:	4013      	ands	r3, r2
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d101      	bne.n	8004e26 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004e22:	2301      	movs	r3, #1
 8004e24:	e079      	b.n	8004f1a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004e26:	4b1d      	ldr	r3, [pc, #116]	; (8004e9c <HAL_RCC_ClockConfig+0x260>)
 8004e28:	685b      	ldr	r3, [r3, #4]
 8004e2a:	f023 0203 	bic.w	r2, r3, #3
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	685b      	ldr	r3, [r3, #4]
 8004e32:	491a      	ldr	r1, [pc, #104]	; (8004e9c <HAL_RCC_ClockConfig+0x260>)
 8004e34:	4313      	orrs	r3, r2
 8004e36:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004e38:	f7fd fe64 	bl	8002b04 <HAL_GetTick>
 8004e3c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e3e:	e00a      	b.n	8004e56 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e40:	f7fd fe60 	bl	8002b04 <HAL_GetTick>
 8004e44:	4602      	mov	r2, r0
 8004e46:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004e48:	1ad3      	subs	r3, r2, r3
 8004e4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d901      	bls.n	8004e56 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8004e52:	2303      	movs	r3, #3
 8004e54:	e061      	b.n	8004f1a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e56:	4b11      	ldr	r3, [pc, #68]	; (8004e9c <HAL_RCC_ClockConfig+0x260>)
 8004e58:	685b      	ldr	r3, [r3, #4]
 8004e5a:	f003 020c 	and.w	r2, r3, #12
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	685b      	ldr	r3, [r3, #4]
 8004e62:	009b      	lsls	r3, r3, #2
 8004e64:	429a      	cmp	r2, r3
 8004e66:	d1eb      	bne.n	8004e40 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004e68:	4b0b      	ldr	r3, [pc, #44]	; (8004e98 <HAL_RCC_ClockConfig+0x25c>)
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f003 0307 	and.w	r3, r3, #7
 8004e70:	683a      	ldr	r2, [r7, #0]
 8004e72:	429a      	cmp	r2, r3
 8004e74:	d214      	bcs.n	8004ea0 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e76:	4b08      	ldr	r3, [pc, #32]	; (8004e98 <HAL_RCC_ClockConfig+0x25c>)
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f023 0207 	bic.w	r2, r3, #7
 8004e7e:	4906      	ldr	r1, [pc, #24]	; (8004e98 <HAL_RCC_ClockConfig+0x25c>)
 8004e80:	683b      	ldr	r3, [r7, #0]
 8004e82:	4313      	orrs	r3, r2
 8004e84:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e86:	4b04      	ldr	r3, [pc, #16]	; (8004e98 <HAL_RCC_ClockConfig+0x25c>)
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f003 0307 	and.w	r3, r3, #7
 8004e8e:	683a      	ldr	r2, [r7, #0]
 8004e90:	429a      	cmp	r2, r3
 8004e92:	d005      	beq.n	8004ea0 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8004e94:	2301      	movs	r3, #1
 8004e96:	e040      	b.n	8004f1a <HAL_RCC_ClockConfig+0x2de>
 8004e98:	40022000 	.word	0x40022000
 8004e9c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f003 0304 	and.w	r3, r3, #4
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d008      	beq.n	8004ebe <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004eac:	4b1d      	ldr	r3, [pc, #116]	; (8004f24 <HAL_RCC_ClockConfig+0x2e8>)
 8004eae:	685b      	ldr	r3, [r3, #4]
 8004eb0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	68db      	ldr	r3, [r3, #12]
 8004eb8:	491a      	ldr	r1, [pc, #104]	; (8004f24 <HAL_RCC_ClockConfig+0x2e8>)
 8004eba:	4313      	orrs	r3, r2
 8004ebc:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f003 0308 	and.w	r3, r3, #8
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d009      	beq.n	8004ede <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004eca:	4b16      	ldr	r3, [pc, #88]	; (8004f24 <HAL_RCC_ClockConfig+0x2e8>)
 8004ecc:	685b      	ldr	r3, [r3, #4]
 8004ece:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	691b      	ldr	r3, [r3, #16]
 8004ed6:	00db      	lsls	r3, r3, #3
 8004ed8:	4912      	ldr	r1, [pc, #72]	; (8004f24 <HAL_RCC_ClockConfig+0x2e8>)
 8004eda:	4313      	orrs	r3, r2
 8004edc:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004ede:	f000 f829 	bl	8004f34 <HAL_RCC_GetSysClockFreq>
 8004ee2:	4601      	mov	r1, r0
 8004ee4:	4b0f      	ldr	r3, [pc, #60]	; (8004f24 <HAL_RCC_ClockConfig+0x2e8>)
 8004ee6:	685b      	ldr	r3, [r3, #4]
 8004ee8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004eec:	22f0      	movs	r2, #240	; 0xf0
 8004eee:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ef0:	693a      	ldr	r2, [r7, #16]
 8004ef2:	fa92 f2a2 	rbit	r2, r2
 8004ef6:	60fa      	str	r2, [r7, #12]
  return result;
 8004ef8:	68fa      	ldr	r2, [r7, #12]
 8004efa:	fab2 f282 	clz	r2, r2
 8004efe:	b2d2      	uxtb	r2, r2
 8004f00:	40d3      	lsrs	r3, r2
 8004f02:	4a09      	ldr	r2, [pc, #36]	; (8004f28 <HAL_RCC_ClockConfig+0x2ec>)
 8004f04:	5cd3      	ldrb	r3, [r2, r3]
 8004f06:	fa21 f303 	lsr.w	r3, r1, r3
 8004f0a:	4a08      	ldr	r2, [pc, #32]	; (8004f2c <HAL_RCC_ClockConfig+0x2f0>)
 8004f0c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8004f0e:	4b08      	ldr	r3, [pc, #32]	; (8004f30 <HAL_RCC_ClockConfig+0x2f4>)
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	4618      	mov	r0, r3
 8004f14:	f7fd fdb2 	bl	8002a7c <HAL_InitTick>
  
  return HAL_OK;
 8004f18:	2300      	movs	r3, #0
}
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	3778      	adds	r7, #120	; 0x78
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	bd80      	pop	{r7, pc}
 8004f22:	bf00      	nop
 8004f24:	40021000 	.word	0x40021000
 8004f28:	08006e04 	.word	0x08006e04
 8004f2c:	20000000 	.word	0x20000000
 8004f30:	200000d4 	.word	0x200000d4

08004f34 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004f34:	b480      	push	{r7}
 8004f36:	b08b      	sub	sp, #44	; 0x2c
 8004f38:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	61fb      	str	r3, [r7, #28]
 8004f3e:	2300      	movs	r3, #0
 8004f40:	61bb      	str	r3, [r7, #24]
 8004f42:	2300      	movs	r3, #0
 8004f44:	627b      	str	r3, [r7, #36]	; 0x24
 8004f46:	2300      	movs	r3, #0
 8004f48:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8004f4e:	4b29      	ldr	r3, [pc, #164]	; (8004ff4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004f50:	685b      	ldr	r3, [r3, #4]
 8004f52:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004f54:	69fb      	ldr	r3, [r7, #28]
 8004f56:	f003 030c 	and.w	r3, r3, #12
 8004f5a:	2b04      	cmp	r3, #4
 8004f5c:	d002      	beq.n	8004f64 <HAL_RCC_GetSysClockFreq+0x30>
 8004f5e:	2b08      	cmp	r3, #8
 8004f60:	d003      	beq.n	8004f6a <HAL_RCC_GetSysClockFreq+0x36>
 8004f62:	e03c      	b.n	8004fde <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004f64:	4b24      	ldr	r3, [pc, #144]	; (8004ff8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004f66:	623b      	str	r3, [r7, #32]
      break;
 8004f68:	e03c      	b.n	8004fe4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8004f6a:	69fb      	ldr	r3, [r7, #28]
 8004f6c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8004f70:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8004f74:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f76:	68ba      	ldr	r2, [r7, #8]
 8004f78:	fa92 f2a2 	rbit	r2, r2
 8004f7c:	607a      	str	r2, [r7, #4]
  return result;
 8004f7e:	687a      	ldr	r2, [r7, #4]
 8004f80:	fab2 f282 	clz	r2, r2
 8004f84:	b2d2      	uxtb	r2, r2
 8004f86:	40d3      	lsrs	r3, r2
 8004f88:	4a1c      	ldr	r2, [pc, #112]	; (8004ffc <HAL_RCC_GetSysClockFreq+0xc8>)
 8004f8a:	5cd3      	ldrb	r3, [r2, r3]
 8004f8c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8004f8e:	4b19      	ldr	r3, [pc, #100]	; (8004ff4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004f90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f92:	f003 030f 	and.w	r3, r3, #15
 8004f96:	220f      	movs	r2, #15
 8004f98:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f9a:	693a      	ldr	r2, [r7, #16]
 8004f9c:	fa92 f2a2 	rbit	r2, r2
 8004fa0:	60fa      	str	r2, [r7, #12]
  return result;
 8004fa2:	68fa      	ldr	r2, [r7, #12]
 8004fa4:	fab2 f282 	clz	r2, r2
 8004fa8:	b2d2      	uxtb	r2, r2
 8004faa:	40d3      	lsrs	r3, r2
 8004fac:	4a14      	ldr	r2, [pc, #80]	; (8005000 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004fae:	5cd3      	ldrb	r3, [r2, r3]
 8004fb0:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8004fb2:	69fb      	ldr	r3, [r7, #28]
 8004fb4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d008      	beq.n	8004fce <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004fbc:	4a0e      	ldr	r2, [pc, #56]	; (8004ff8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004fbe:	69bb      	ldr	r3, [r7, #24]
 8004fc0:	fbb2 f2f3 	udiv	r2, r2, r3
 8004fc4:	697b      	ldr	r3, [r7, #20]
 8004fc6:	fb02 f303 	mul.w	r3, r2, r3
 8004fca:	627b      	str	r3, [r7, #36]	; 0x24
 8004fcc:	e004      	b.n	8004fd8 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8004fce:	697b      	ldr	r3, [r7, #20]
 8004fd0:	4a0c      	ldr	r2, [pc, #48]	; (8005004 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004fd2:	fb02 f303 	mul.w	r3, r2, r3
 8004fd6:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8004fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fda:	623b      	str	r3, [r7, #32]
      break;
 8004fdc:	e002      	b.n	8004fe4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004fde:	4b06      	ldr	r3, [pc, #24]	; (8004ff8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004fe0:	623b      	str	r3, [r7, #32]
      break;
 8004fe2:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004fe4:	6a3b      	ldr	r3, [r7, #32]
}
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	372c      	adds	r7, #44	; 0x2c
 8004fea:	46bd      	mov	sp, r7
 8004fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff0:	4770      	bx	lr
 8004ff2:	bf00      	nop
 8004ff4:	40021000 	.word	0x40021000
 8004ff8:	007a1200 	.word	0x007a1200
 8004ffc:	08006e90 	.word	0x08006e90
 8005000:	08006ea0 	.word	0x08006ea0
 8005004:	003d0900 	.word	0x003d0900

08005008 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005008:	b480      	push	{r7}
 800500a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800500c:	4b03      	ldr	r3, [pc, #12]	; (800501c <HAL_RCC_GetHCLKFreq+0x14>)
 800500e:	681b      	ldr	r3, [r3, #0]
}
 8005010:	4618      	mov	r0, r3
 8005012:	46bd      	mov	sp, r7
 8005014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005018:	4770      	bx	lr
 800501a:	bf00      	nop
 800501c:	20000000 	.word	0x20000000

08005020 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005020:	b580      	push	{r7, lr}
 8005022:	b082      	sub	sp, #8
 8005024:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8005026:	f7ff ffef 	bl	8005008 <HAL_RCC_GetHCLKFreq>
 800502a:	4601      	mov	r1, r0
 800502c:	4b0b      	ldr	r3, [pc, #44]	; (800505c <HAL_RCC_GetPCLK1Freq+0x3c>)
 800502e:	685b      	ldr	r3, [r3, #4]
 8005030:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005034:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8005038:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800503a:	687a      	ldr	r2, [r7, #4]
 800503c:	fa92 f2a2 	rbit	r2, r2
 8005040:	603a      	str	r2, [r7, #0]
  return result;
 8005042:	683a      	ldr	r2, [r7, #0]
 8005044:	fab2 f282 	clz	r2, r2
 8005048:	b2d2      	uxtb	r2, r2
 800504a:	40d3      	lsrs	r3, r2
 800504c:	4a04      	ldr	r2, [pc, #16]	; (8005060 <HAL_RCC_GetPCLK1Freq+0x40>)
 800504e:	5cd3      	ldrb	r3, [r2, r3]
 8005050:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8005054:	4618      	mov	r0, r3
 8005056:	3708      	adds	r7, #8
 8005058:	46bd      	mov	sp, r7
 800505a:	bd80      	pop	{r7, pc}
 800505c:	40021000 	.word	0x40021000
 8005060:	08006e14 	.word	0x08006e14

08005064 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005064:	b580      	push	{r7, lr}
 8005066:	b082      	sub	sp, #8
 8005068:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800506a:	f7ff ffcd 	bl	8005008 <HAL_RCC_GetHCLKFreq>
 800506e:	4601      	mov	r1, r0
 8005070:	4b0b      	ldr	r3, [pc, #44]	; (80050a0 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8005072:	685b      	ldr	r3, [r3, #4]
 8005074:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8005078:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800507c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800507e:	687a      	ldr	r2, [r7, #4]
 8005080:	fa92 f2a2 	rbit	r2, r2
 8005084:	603a      	str	r2, [r7, #0]
  return result;
 8005086:	683a      	ldr	r2, [r7, #0]
 8005088:	fab2 f282 	clz	r2, r2
 800508c:	b2d2      	uxtb	r2, r2
 800508e:	40d3      	lsrs	r3, r2
 8005090:	4a04      	ldr	r2, [pc, #16]	; (80050a4 <HAL_RCC_GetPCLK2Freq+0x40>)
 8005092:	5cd3      	ldrb	r3, [r2, r3]
 8005094:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8005098:	4618      	mov	r0, r3
 800509a:	3708      	adds	r7, #8
 800509c:	46bd      	mov	sp, r7
 800509e:	bd80      	pop	{r7, pc}
 80050a0:	40021000 	.word	0x40021000
 80050a4:	08006e14 	.word	0x08006e14

080050a8 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b092      	sub	sp, #72	; 0x48
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80050b0:	2300      	movs	r3, #0
 80050b2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80050b4:	2300      	movs	r3, #0
 80050b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80050b8:	2300      	movs	r3, #0
 80050ba:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	f000 80cd 	beq.w	8005266 <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80050cc:	4b86      	ldr	r3, [pc, #536]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80050ce:	69db      	ldr	r3, [r3, #28]
 80050d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d10e      	bne.n	80050f6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80050d8:	4b83      	ldr	r3, [pc, #524]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80050da:	69db      	ldr	r3, [r3, #28]
 80050dc:	4a82      	ldr	r2, [pc, #520]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80050de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050e2:	61d3      	str	r3, [r2, #28]
 80050e4:	4b80      	ldr	r3, [pc, #512]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80050e6:	69db      	ldr	r3, [r3, #28]
 80050e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050ec:	60bb      	str	r3, [r7, #8]
 80050ee:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80050f0:	2301      	movs	r3, #1
 80050f2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050f6:	4b7d      	ldr	r3, [pc, #500]	; (80052ec <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d118      	bne.n	8005134 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005102:	4b7a      	ldr	r3, [pc, #488]	; (80052ec <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	4a79      	ldr	r2, [pc, #484]	; (80052ec <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8005108:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800510c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800510e:	f7fd fcf9 	bl	8002b04 <HAL_GetTick>
 8005112:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005114:	e008      	b.n	8005128 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005116:	f7fd fcf5 	bl	8002b04 <HAL_GetTick>
 800511a:	4602      	mov	r2, r0
 800511c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800511e:	1ad3      	subs	r3, r2, r3
 8005120:	2b64      	cmp	r3, #100	; 0x64
 8005122:	d901      	bls.n	8005128 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8005124:	2303      	movs	r3, #3
 8005126:	e0db      	b.n	80052e0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005128:	4b70      	ldr	r3, [pc, #448]	; (80052ec <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005130:	2b00      	cmp	r3, #0
 8005132:	d0f0      	beq.n	8005116 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005134:	4b6c      	ldr	r3, [pc, #432]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005136:	6a1b      	ldr	r3, [r3, #32]
 8005138:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800513c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800513e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005140:	2b00      	cmp	r3, #0
 8005142:	d07d      	beq.n	8005240 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	685b      	ldr	r3, [r3, #4]
 8005148:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800514c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800514e:	429a      	cmp	r2, r3
 8005150:	d076      	beq.n	8005240 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005152:	4b65      	ldr	r3, [pc, #404]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005154:	6a1b      	ldr	r3, [r3, #32]
 8005156:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800515a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800515c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005160:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005162:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005164:	fa93 f3a3 	rbit	r3, r3
 8005168:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800516a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800516c:	fab3 f383 	clz	r3, r3
 8005170:	b2db      	uxtb	r3, r3
 8005172:	461a      	mov	r2, r3
 8005174:	4b5e      	ldr	r3, [pc, #376]	; (80052f0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005176:	4413      	add	r3, r2
 8005178:	009b      	lsls	r3, r3, #2
 800517a:	461a      	mov	r2, r3
 800517c:	2301      	movs	r3, #1
 800517e:	6013      	str	r3, [r2, #0]
 8005180:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005184:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005186:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005188:	fa93 f3a3 	rbit	r3, r3
 800518c:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800518e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005190:	fab3 f383 	clz	r3, r3
 8005194:	b2db      	uxtb	r3, r3
 8005196:	461a      	mov	r2, r3
 8005198:	4b55      	ldr	r3, [pc, #340]	; (80052f0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800519a:	4413      	add	r3, r2
 800519c:	009b      	lsls	r3, r3, #2
 800519e:	461a      	mov	r2, r3
 80051a0:	2300      	movs	r3, #0
 80051a2:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80051a4:	4a50      	ldr	r2, [pc, #320]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80051a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051a8:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80051aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051ac:	f003 0301 	and.w	r3, r3, #1
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d045      	beq.n	8005240 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051b4:	f7fd fca6 	bl	8002b04 <HAL_GetTick>
 80051b8:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051ba:	e00a      	b.n	80051d2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80051bc:	f7fd fca2 	bl	8002b04 <HAL_GetTick>
 80051c0:	4602      	mov	r2, r0
 80051c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80051c4:	1ad3      	subs	r3, r2, r3
 80051c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80051ca:	4293      	cmp	r3, r2
 80051cc:	d901      	bls.n	80051d2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80051ce:	2303      	movs	r3, #3
 80051d0:	e086      	b.n	80052e0 <HAL_RCCEx_PeriphCLKConfig+0x238>
 80051d2:	2302      	movs	r3, #2
 80051d4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051d8:	fa93 f3a3 	rbit	r3, r3
 80051dc:	627b      	str	r3, [r7, #36]	; 0x24
 80051de:	2302      	movs	r3, #2
 80051e0:	623b      	str	r3, [r7, #32]
 80051e2:	6a3b      	ldr	r3, [r7, #32]
 80051e4:	fa93 f3a3 	rbit	r3, r3
 80051e8:	61fb      	str	r3, [r7, #28]
  return result;
 80051ea:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051ec:	fab3 f383 	clz	r3, r3
 80051f0:	b2db      	uxtb	r3, r3
 80051f2:	095b      	lsrs	r3, r3, #5
 80051f4:	b2db      	uxtb	r3, r3
 80051f6:	f043 0302 	orr.w	r3, r3, #2
 80051fa:	b2db      	uxtb	r3, r3
 80051fc:	2b02      	cmp	r3, #2
 80051fe:	d102      	bne.n	8005206 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8005200:	4b39      	ldr	r3, [pc, #228]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005202:	6a1b      	ldr	r3, [r3, #32]
 8005204:	e007      	b.n	8005216 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8005206:	2302      	movs	r3, #2
 8005208:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800520a:	69bb      	ldr	r3, [r7, #24]
 800520c:	fa93 f3a3 	rbit	r3, r3
 8005210:	617b      	str	r3, [r7, #20]
 8005212:	4b35      	ldr	r3, [pc, #212]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005216:	2202      	movs	r2, #2
 8005218:	613a      	str	r2, [r7, #16]
 800521a:	693a      	ldr	r2, [r7, #16]
 800521c:	fa92 f2a2 	rbit	r2, r2
 8005220:	60fa      	str	r2, [r7, #12]
  return result;
 8005222:	68fa      	ldr	r2, [r7, #12]
 8005224:	fab2 f282 	clz	r2, r2
 8005228:	b2d2      	uxtb	r2, r2
 800522a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800522e:	b2d2      	uxtb	r2, r2
 8005230:	f002 021f 	and.w	r2, r2, #31
 8005234:	2101      	movs	r1, #1
 8005236:	fa01 f202 	lsl.w	r2, r1, r2
 800523a:	4013      	ands	r3, r2
 800523c:	2b00      	cmp	r3, #0
 800523e:	d0bd      	beq.n	80051bc <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8005240:	4b29      	ldr	r3, [pc, #164]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005242:	6a1b      	ldr	r3, [r3, #32]
 8005244:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	685b      	ldr	r3, [r3, #4]
 800524c:	4926      	ldr	r1, [pc, #152]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800524e:	4313      	orrs	r3, r2
 8005250:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005252:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005256:	2b01      	cmp	r3, #1
 8005258:	d105      	bne.n	8005266 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800525a:	4b23      	ldr	r3, [pc, #140]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800525c:	69db      	ldr	r3, [r3, #28]
 800525e:	4a22      	ldr	r2, [pc, #136]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005260:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005264:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f003 0301 	and.w	r3, r3, #1
 800526e:	2b00      	cmp	r3, #0
 8005270:	d008      	beq.n	8005284 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005272:	4b1d      	ldr	r3, [pc, #116]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005276:	f023 0203 	bic.w	r2, r3, #3
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	689b      	ldr	r3, [r3, #8]
 800527e:	491a      	ldr	r1, [pc, #104]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005280:	4313      	orrs	r3, r2
 8005282:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f003 0320 	and.w	r3, r3, #32
 800528c:	2b00      	cmp	r3, #0
 800528e:	d008      	beq.n	80052a2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005290:	4b15      	ldr	r3, [pc, #84]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005292:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005294:	f023 0210 	bic.w	r2, r3, #16
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	68db      	ldr	r3, [r3, #12]
 800529c:	4912      	ldr	r1, [pc, #72]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800529e:	4313      	orrs	r3, r2
 80052a0:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d008      	beq.n	80052c0 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80052ae:	4b0e      	ldr	r3, [pc, #56]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80052b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052b2:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	691b      	ldr	r3, [r3, #16]
 80052ba:	490b      	ldr	r1, [pc, #44]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80052bc:	4313      	orrs	r3, r2
 80052be:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d008      	beq.n	80052de <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80052cc:	4b06      	ldr	r3, [pc, #24]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80052ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052d0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	695b      	ldr	r3, [r3, #20]
 80052d8:	4903      	ldr	r1, [pc, #12]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80052da:	4313      	orrs	r3, r2
 80052dc:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80052de:	2300      	movs	r3, #0
}
 80052e0:	4618      	mov	r0, r3
 80052e2:	3748      	adds	r7, #72	; 0x48
 80052e4:	46bd      	mov	sp, r7
 80052e6:	bd80      	pop	{r7, pc}
 80052e8:	40021000 	.word	0x40021000
 80052ec:	40007000 	.word	0x40007000
 80052f0:	10908100 	.word	0x10908100

080052f4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b082      	sub	sp, #8
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d101      	bne.n	8005306 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005302:	2301      	movs	r3, #1
 8005304:	e040      	b.n	8005388 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800530a:	2b00      	cmp	r3, #0
 800530c:	d106      	bne.n	800531c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	2200      	movs	r2, #0
 8005312:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005316:	6878      	ldr	r0, [r7, #4]
 8005318:	f7fb f9fc 	bl	8000714 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2224      	movs	r2, #36	; 0x24
 8005320:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	681a      	ldr	r2, [r3, #0]
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f022 0201 	bic.w	r2, r2, #1
 8005330:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005332:	6878      	ldr	r0, [r7, #4]
 8005334:	f000 f8b6 	bl	80054a4 <UART_SetConfig>
 8005338:	4603      	mov	r3, r0
 800533a:	2b01      	cmp	r3, #1
 800533c:	d101      	bne.n	8005342 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800533e:	2301      	movs	r3, #1
 8005340:	e022      	b.n	8005388 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005346:	2b00      	cmp	r3, #0
 8005348:	d002      	beq.n	8005350 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800534a:	6878      	ldr	r0, [r7, #4]
 800534c:	f000 f9e0 	bl	8005710 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	685a      	ldr	r2, [r3, #4]
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800535e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	689a      	ldr	r2, [r3, #8]
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800536e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	681a      	ldr	r2, [r3, #0]
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f042 0201 	orr.w	r2, r2, #1
 800537e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005380:	6878      	ldr	r0, [r7, #4]
 8005382:	f000 fa67 	bl	8005854 <UART_CheckIdleState>
 8005386:	4603      	mov	r3, r0
}
 8005388:	4618      	mov	r0, r3
 800538a:	3708      	adds	r7, #8
 800538c:	46bd      	mov	sp, r7
 800538e:	bd80      	pop	{r7, pc}

08005390 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005390:	b580      	push	{r7, lr}
 8005392:	b08a      	sub	sp, #40	; 0x28
 8005394:	af02      	add	r7, sp, #8
 8005396:	60f8      	str	r0, [r7, #12]
 8005398:	60b9      	str	r1, [r7, #8]
 800539a:	603b      	str	r3, [r7, #0]
 800539c:	4613      	mov	r3, r2
 800539e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80053a4:	2b20      	cmp	r3, #32
 80053a6:	d178      	bne.n	800549a <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 80053a8:	68bb      	ldr	r3, [r7, #8]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d002      	beq.n	80053b4 <HAL_UART_Transmit+0x24>
 80053ae:	88fb      	ldrh	r3, [r7, #6]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d101      	bne.n	80053b8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80053b4:	2301      	movs	r3, #1
 80053b6:	e071      	b.n	800549c <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	2200      	movs	r2, #0
 80053bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	2221      	movs	r2, #33	; 0x21
 80053c4:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80053c6:	f7fd fb9d 	bl	8002b04 <HAL_GetTick>
 80053ca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	88fa      	ldrh	r2, [r7, #6]
 80053d0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	88fa      	ldrh	r2, [r7, #6]
 80053d8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	689b      	ldr	r3, [r3, #8]
 80053e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053e4:	d108      	bne.n	80053f8 <HAL_UART_Transmit+0x68>
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	691b      	ldr	r3, [r3, #16]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d104      	bne.n	80053f8 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80053ee:	2300      	movs	r3, #0
 80053f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80053f2:	68bb      	ldr	r3, [r7, #8]
 80053f4:	61bb      	str	r3, [r7, #24]
 80053f6:	e003      	b.n	8005400 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80053f8:	68bb      	ldr	r3, [r7, #8]
 80053fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80053fc:	2300      	movs	r3, #0
 80053fe:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005400:	e030      	b.n	8005464 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005402:	683b      	ldr	r3, [r7, #0]
 8005404:	9300      	str	r3, [sp, #0]
 8005406:	697b      	ldr	r3, [r7, #20]
 8005408:	2200      	movs	r2, #0
 800540a:	2180      	movs	r1, #128	; 0x80
 800540c:	68f8      	ldr	r0, [r7, #12]
 800540e:	f000 fac9 	bl	80059a4 <UART_WaitOnFlagUntilTimeout>
 8005412:	4603      	mov	r3, r0
 8005414:	2b00      	cmp	r3, #0
 8005416:	d004      	beq.n	8005422 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	2220      	movs	r2, #32
 800541c:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800541e:	2303      	movs	r3, #3
 8005420:	e03c      	b.n	800549c <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8005422:	69fb      	ldr	r3, [r7, #28]
 8005424:	2b00      	cmp	r3, #0
 8005426:	d10b      	bne.n	8005440 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005428:	69bb      	ldr	r3, [r7, #24]
 800542a:	881a      	ldrh	r2, [r3, #0]
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005434:	b292      	uxth	r2, r2
 8005436:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005438:	69bb      	ldr	r3, [r7, #24]
 800543a:	3302      	adds	r3, #2
 800543c:	61bb      	str	r3, [r7, #24]
 800543e:	e008      	b.n	8005452 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005440:	69fb      	ldr	r3, [r7, #28]
 8005442:	781a      	ldrb	r2, [r3, #0]
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	b292      	uxth	r2, r2
 800544a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800544c:	69fb      	ldr	r3, [r7, #28]
 800544e:	3301      	adds	r3, #1
 8005450:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005458:	b29b      	uxth	r3, r3
 800545a:	3b01      	subs	r3, #1
 800545c:	b29a      	uxth	r2, r3
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800546a:	b29b      	uxth	r3, r3
 800546c:	2b00      	cmp	r3, #0
 800546e:	d1c8      	bne.n	8005402 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005470:	683b      	ldr	r3, [r7, #0]
 8005472:	9300      	str	r3, [sp, #0]
 8005474:	697b      	ldr	r3, [r7, #20]
 8005476:	2200      	movs	r2, #0
 8005478:	2140      	movs	r1, #64	; 0x40
 800547a:	68f8      	ldr	r0, [r7, #12]
 800547c:	f000 fa92 	bl	80059a4 <UART_WaitOnFlagUntilTimeout>
 8005480:	4603      	mov	r3, r0
 8005482:	2b00      	cmp	r3, #0
 8005484:	d004      	beq.n	8005490 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	2220      	movs	r2, #32
 800548a:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 800548c:	2303      	movs	r3, #3
 800548e:	e005      	b.n	800549c <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	2220      	movs	r2, #32
 8005494:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8005496:	2300      	movs	r3, #0
 8005498:	e000      	b.n	800549c <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 800549a:	2302      	movs	r3, #2
  }
}
 800549c:	4618      	mov	r0, r3
 800549e:	3720      	adds	r7, #32
 80054a0:	46bd      	mov	sp, r7
 80054a2:	bd80      	pop	{r7, pc}

080054a4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80054a4:	b580      	push	{r7, lr}
 80054a6:	b088      	sub	sp, #32
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80054ac:	2300      	movs	r3, #0
 80054ae:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	689a      	ldr	r2, [r3, #8]
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	691b      	ldr	r3, [r3, #16]
 80054b8:	431a      	orrs	r2, r3
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	695b      	ldr	r3, [r3, #20]
 80054be:	431a      	orrs	r2, r3
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	69db      	ldr	r3, [r3, #28]
 80054c4:	4313      	orrs	r3, r2
 80054c6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	681a      	ldr	r2, [r3, #0]
 80054ce:	4b8a      	ldr	r3, [pc, #552]	; (80056f8 <UART_SetConfig+0x254>)
 80054d0:	4013      	ands	r3, r2
 80054d2:	687a      	ldr	r2, [r7, #4]
 80054d4:	6812      	ldr	r2, [r2, #0]
 80054d6:	6979      	ldr	r1, [r7, #20]
 80054d8:	430b      	orrs	r3, r1
 80054da:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	685b      	ldr	r3, [r3, #4]
 80054e2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	68da      	ldr	r2, [r3, #12]
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	430a      	orrs	r2, r1
 80054f0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	699b      	ldr	r3, [r3, #24]
 80054f6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	6a1b      	ldr	r3, [r3, #32]
 80054fc:	697a      	ldr	r2, [r7, #20]
 80054fe:	4313      	orrs	r3, r2
 8005500:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	689b      	ldr	r3, [r3, #8]
 8005508:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	697a      	ldr	r2, [r7, #20]
 8005512:	430a      	orrs	r2, r1
 8005514:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	4a78      	ldr	r2, [pc, #480]	; (80056fc <UART_SetConfig+0x258>)
 800551c:	4293      	cmp	r3, r2
 800551e:	d120      	bne.n	8005562 <UART_SetConfig+0xbe>
 8005520:	4b77      	ldr	r3, [pc, #476]	; (8005700 <UART_SetConfig+0x25c>)
 8005522:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005524:	f003 0303 	and.w	r3, r3, #3
 8005528:	2b03      	cmp	r3, #3
 800552a:	d817      	bhi.n	800555c <UART_SetConfig+0xb8>
 800552c:	a201      	add	r2, pc, #4	; (adr r2, 8005534 <UART_SetConfig+0x90>)
 800552e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005532:	bf00      	nop
 8005534:	08005545 	.word	0x08005545
 8005538:	08005551 	.word	0x08005551
 800553c:	08005557 	.word	0x08005557
 8005540:	0800554b 	.word	0x0800554b
 8005544:	2300      	movs	r3, #0
 8005546:	77fb      	strb	r3, [r7, #31]
 8005548:	e01d      	b.n	8005586 <UART_SetConfig+0xe2>
 800554a:	2302      	movs	r3, #2
 800554c:	77fb      	strb	r3, [r7, #31]
 800554e:	e01a      	b.n	8005586 <UART_SetConfig+0xe2>
 8005550:	2304      	movs	r3, #4
 8005552:	77fb      	strb	r3, [r7, #31]
 8005554:	e017      	b.n	8005586 <UART_SetConfig+0xe2>
 8005556:	2308      	movs	r3, #8
 8005558:	77fb      	strb	r3, [r7, #31]
 800555a:	e014      	b.n	8005586 <UART_SetConfig+0xe2>
 800555c:	2310      	movs	r3, #16
 800555e:	77fb      	strb	r3, [r7, #31]
 8005560:	e011      	b.n	8005586 <UART_SetConfig+0xe2>
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	4a67      	ldr	r2, [pc, #412]	; (8005704 <UART_SetConfig+0x260>)
 8005568:	4293      	cmp	r3, r2
 800556a:	d102      	bne.n	8005572 <UART_SetConfig+0xce>
 800556c:	2300      	movs	r3, #0
 800556e:	77fb      	strb	r3, [r7, #31]
 8005570:	e009      	b.n	8005586 <UART_SetConfig+0xe2>
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	4a64      	ldr	r2, [pc, #400]	; (8005708 <UART_SetConfig+0x264>)
 8005578:	4293      	cmp	r3, r2
 800557a:	d102      	bne.n	8005582 <UART_SetConfig+0xde>
 800557c:	2300      	movs	r3, #0
 800557e:	77fb      	strb	r3, [r7, #31]
 8005580:	e001      	b.n	8005586 <UART_SetConfig+0xe2>
 8005582:	2310      	movs	r3, #16
 8005584:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	69db      	ldr	r3, [r3, #28]
 800558a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800558e:	d15a      	bne.n	8005646 <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8005590:	7ffb      	ldrb	r3, [r7, #31]
 8005592:	2b08      	cmp	r3, #8
 8005594:	d827      	bhi.n	80055e6 <UART_SetConfig+0x142>
 8005596:	a201      	add	r2, pc, #4	; (adr r2, 800559c <UART_SetConfig+0xf8>)
 8005598:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800559c:	080055c1 	.word	0x080055c1
 80055a0:	080055c9 	.word	0x080055c9
 80055a4:	080055d1 	.word	0x080055d1
 80055a8:	080055e7 	.word	0x080055e7
 80055ac:	080055d7 	.word	0x080055d7
 80055b0:	080055e7 	.word	0x080055e7
 80055b4:	080055e7 	.word	0x080055e7
 80055b8:	080055e7 	.word	0x080055e7
 80055bc:	080055df 	.word	0x080055df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80055c0:	f7ff fd2e 	bl	8005020 <HAL_RCC_GetPCLK1Freq>
 80055c4:	61b8      	str	r0, [r7, #24]
        break;
 80055c6:	e013      	b.n	80055f0 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80055c8:	f7ff fd4c 	bl	8005064 <HAL_RCC_GetPCLK2Freq>
 80055cc:	61b8      	str	r0, [r7, #24]
        break;
 80055ce:	e00f      	b.n	80055f0 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80055d0:	4b4e      	ldr	r3, [pc, #312]	; (800570c <UART_SetConfig+0x268>)
 80055d2:	61bb      	str	r3, [r7, #24]
        break;
 80055d4:	e00c      	b.n	80055f0 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80055d6:	f7ff fcad 	bl	8004f34 <HAL_RCC_GetSysClockFreq>
 80055da:	61b8      	str	r0, [r7, #24]
        break;
 80055dc:	e008      	b.n	80055f0 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80055de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80055e2:	61bb      	str	r3, [r7, #24]
        break;
 80055e4:	e004      	b.n	80055f0 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 80055e6:	2300      	movs	r3, #0
 80055e8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80055ea:	2301      	movs	r3, #1
 80055ec:	77bb      	strb	r3, [r7, #30]
        break;
 80055ee:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80055f0:	69bb      	ldr	r3, [r7, #24]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d074      	beq.n	80056e0 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80055f6:	69bb      	ldr	r3, [r7, #24]
 80055f8:	005a      	lsls	r2, r3, #1
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	685b      	ldr	r3, [r3, #4]
 80055fe:	085b      	lsrs	r3, r3, #1
 8005600:	441a      	add	r2, r3
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	685b      	ldr	r3, [r3, #4]
 8005606:	fbb2 f3f3 	udiv	r3, r2, r3
 800560a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800560c:	693b      	ldr	r3, [r7, #16]
 800560e:	2b0f      	cmp	r3, #15
 8005610:	d916      	bls.n	8005640 <UART_SetConfig+0x19c>
 8005612:	693b      	ldr	r3, [r7, #16]
 8005614:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005618:	d212      	bcs.n	8005640 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800561a:	693b      	ldr	r3, [r7, #16]
 800561c:	b29b      	uxth	r3, r3
 800561e:	f023 030f 	bic.w	r3, r3, #15
 8005622:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005624:	693b      	ldr	r3, [r7, #16]
 8005626:	085b      	lsrs	r3, r3, #1
 8005628:	b29b      	uxth	r3, r3
 800562a:	f003 0307 	and.w	r3, r3, #7
 800562e:	b29a      	uxth	r2, r3
 8005630:	89fb      	ldrh	r3, [r7, #14]
 8005632:	4313      	orrs	r3, r2
 8005634:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	89fa      	ldrh	r2, [r7, #14]
 800563c:	60da      	str	r2, [r3, #12]
 800563e:	e04f      	b.n	80056e0 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8005640:	2301      	movs	r3, #1
 8005642:	77bb      	strb	r3, [r7, #30]
 8005644:	e04c      	b.n	80056e0 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005646:	7ffb      	ldrb	r3, [r7, #31]
 8005648:	2b08      	cmp	r3, #8
 800564a:	d828      	bhi.n	800569e <UART_SetConfig+0x1fa>
 800564c:	a201      	add	r2, pc, #4	; (adr r2, 8005654 <UART_SetConfig+0x1b0>)
 800564e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005652:	bf00      	nop
 8005654:	08005679 	.word	0x08005679
 8005658:	08005681 	.word	0x08005681
 800565c:	08005689 	.word	0x08005689
 8005660:	0800569f 	.word	0x0800569f
 8005664:	0800568f 	.word	0x0800568f
 8005668:	0800569f 	.word	0x0800569f
 800566c:	0800569f 	.word	0x0800569f
 8005670:	0800569f 	.word	0x0800569f
 8005674:	08005697 	.word	0x08005697
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005678:	f7ff fcd2 	bl	8005020 <HAL_RCC_GetPCLK1Freq>
 800567c:	61b8      	str	r0, [r7, #24]
        break;
 800567e:	e013      	b.n	80056a8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005680:	f7ff fcf0 	bl	8005064 <HAL_RCC_GetPCLK2Freq>
 8005684:	61b8      	str	r0, [r7, #24]
        break;
 8005686:	e00f      	b.n	80056a8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005688:	4b20      	ldr	r3, [pc, #128]	; (800570c <UART_SetConfig+0x268>)
 800568a:	61bb      	str	r3, [r7, #24]
        break;
 800568c:	e00c      	b.n	80056a8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800568e:	f7ff fc51 	bl	8004f34 <HAL_RCC_GetSysClockFreq>
 8005692:	61b8      	str	r0, [r7, #24]
        break;
 8005694:	e008      	b.n	80056a8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005696:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800569a:	61bb      	str	r3, [r7, #24]
        break;
 800569c:	e004      	b.n	80056a8 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 800569e:	2300      	movs	r3, #0
 80056a0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80056a2:	2301      	movs	r3, #1
 80056a4:	77bb      	strb	r3, [r7, #30]
        break;
 80056a6:	bf00      	nop
    }

    if (pclk != 0U)
 80056a8:	69bb      	ldr	r3, [r7, #24]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d018      	beq.n	80056e0 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	685b      	ldr	r3, [r3, #4]
 80056b2:	085a      	lsrs	r2, r3, #1
 80056b4:	69bb      	ldr	r3, [r7, #24]
 80056b6:	441a      	add	r2, r3
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	685b      	ldr	r3, [r3, #4]
 80056bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80056c0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80056c2:	693b      	ldr	r3, [r7, #16]
 80056c4:	2b0f      	cmp	r3, #15
 80056c6:	d909      	bls.n	80056dc <UART_SetConfig+0x238>
 80056c8:	693b      	ldr	r3, [r7, #16]
 80056ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056ce:	d205      	bcs.n	80056dc <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80056d0:	693b      	ldr	r3, [r7, #16]
 80056d2:	b29a      	uxth	r2, r3
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	60da      	str	r2, [r3, #12]
 80056da:	e001      	b.n	80056e0 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80056dc:	2301      	movs	r3, #1
 80056de:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2200      	movs	r2, #0
 80056e4:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	2200      	movs	r2, #0
 80056ea:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80056ec:	7fbb      	ldrb	r3, [r7, #30]
}
 80056ee:	4618      	mov	r0, r3
 80056f0:	3720      	adds	r7, #32
 80056f2:	46bd      	mov	sp, r7
 80056f4:	bd80      	pop	{r7, pc}
 80056f6:	bf00      	nop
 80056f8:	efff69f3 	.word	0xefff69f3
 80056fc:	40013800 	.word	0x40013800
 8005700:	40021000 	.word	0x40021000
 8005704:	40004400 	.word	0x40004400
 8005708:	40004800 	.word	0x40004800
 800570c:	007a1200 	.word	0x007a1200

08005710 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005710:	b480      	push	{r7}
 8005712:	b083      	sub	sp, #12
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800571c:	f003 0301 	and.w	r3, r3, #1
 8005720:	2b00      	cmp	r3, #0
 8005722:	d00a      	beq.n	800573a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	685b      	ldr	r3, [r3, #4]
 800572a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	430a      	orrs	r2, r1
 8005738:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800573e:	f003 0302 	and.w	r3, r3, #2
 8005742:	2b00      	cmp	r3, #0
 8005744:	d00a      	beq.n	800575c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	685b      	ldr	r3, [r3, #4]
 800574c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	430a      	orrs	r2, r1
 800575a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005760:	f003 0304 	and.w	r3, r3, #4
 8005764:	2b00      	cmp	r3, #0
 8005766:	d00a      	beq.n	800577e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	685b      	ldr	r3, [r3, #4]
 800576e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	430a      	orrs	r2, r1
 800577c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005782:	f003 0308 	and.w	r3, r3, #8
 8005786:	2b00      	cmp	r3, #0
 8005788:	d00a      	beq.n	80057a0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	685b      	ldr	r3, [r3, #4]
 8005790:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	430a      	orrs	r2, r1
 800579e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057a4:	f003 0310 	and.w	r3, r3, #16
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d00a      	beq.n	80057c2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	689b      	ldr	r3, [r3, #8]
 80057b2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	430a      	orrs	r2, r1
 80057c0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057c6:	f003 0320 	and.w	r3, r3, #32
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d00a      	beq.n	80057e4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	689b      	ldr	r3, [r3, #8]
 80057d4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	430a      	orrs	r2, r1
 80057e2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d01a      	beq.n	8005826 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	685b      	ldr	r3, [r3, #4]
 80057f6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	430a      	orrs	r2, r1
 8005804:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800580a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800580e:	d10a      	bne.n	8005826 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	685b      	ldr	r3, [r3, #4]
 8005816:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	430a      	orrs	r2, r1
 8005824:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800582a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800582e:	2b00      	cmp	r3, #0
 8005830:	d00a      	beq.n	8005848 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	685b      	ldr	r3, [r3, #4]
 8005838:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	430a      	orrs	r2, r1
 8005846:	605a      	str	r2, [r3, #4]
  }
}
 8005848:	bf00      	nop
 800584a:	370c      	adds	r7, #12
 800584c:	46bd      	mov	sp, r7
 800584e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005852:	4770      	bx	lr

08005854 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005854:	b580      	push	{r7, lr}
 8005856:	b098      	sub	sp, #96	; 0x60
 8005858:	af02      	add	r7, sp, #8
 800585a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2200      	movs	r2, #0
 8005860:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005864:	f7fd f94e 	bl	8002b04 <HAL_GetTick>
 8005868:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f003 0308 	and.w	r3, r3, #8
 8005874:	2b08      	cmp	r3, #8
 8005876:	d12e      	bne.n	80058d6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005878:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800587c:	9300      	str	r3, [sp, #0]
 800587e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005880:	2200      	movs	r2, #0
 8005882:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005886:	6878      	ldr	r0, [r7, #4]
 8005888:	f000 f88c 	bl	80059a4 <UART_WaitOnFlagUntilTimeout>
 800588c:	4603      	mov	r3, r0
 800588e:	2b00      	cmp	r3, #0
 8005890:	d021      	beq.n	80058d6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005898:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800589a:	e853 3f00 	ldrex	r3, [r3]
 800589e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80058a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80058a6:	653b      	str	r3, [r7, #80]	; 0x50
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	461a      	mov	r2, r3
 80058ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80058b0:	647b      	str	r3, [r7, #68]	; 0x44
 80058b2:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058b4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80058b6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80058b8:	e841 2300 	strex	r3, r2, [r1]
 80058bc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80058be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d1e6      	bne.n	8005892 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2220      	movs	r2, #32
 80058c8:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	2200      	movs	r2, #0
 80058ce:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80058d2:	2303      	movs	r3, #3
 80058d4:	e062      	b.n	800599c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f003 0304 	and.w	r3, r3, #4
 80058e0:	2b04      	cmp	r3, #4
 80058e2:	d149      	bne.n	8005978 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80058e4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80058e8:	9300      	str	r3, [sp, #0]
 80058ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80058ec:	2200      	movs	r2, #0
 80058ee:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80058f2:	6878      	ldr	r0, [r7, #4]
 80058f4:	f000 f856 	bl	80059a4 <UART_WaitOnFlagUntilTimeout>
 80058f8:	4603      	mov	r3, r0
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d03c      	beq.n	8005978 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005906:	e853 3f00 	ldrex	r3, [r3]
 800590a:	623b      	str	r3, [r7, #32]
   return(result);
 800590c:	6a3b      	ldr	r3, [r7, #32]
 800590e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005912:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	461a      	mov	r2, r3
 800591a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800591c:	633b      	str	r3, [r7, #48]	; 0x30
 800591e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005920:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005922:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005924:	e841 2300 	strex	r3, r2, [r1]
 8005928:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800592a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800592c:	2b00      	cmp	r3, #0
 800592e:	d1e6      	bne.n	80058fe <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	3308      	adds	r3, #8
 8005936:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005938:	693b      	ldr	r3, [r7, #16]
 800593a:	e853 3f00 	ldrex	r3, [r3]
 800593e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	f023 0301 	bic.w	r3, r3, #1
 8005946:	64bb      	str	r3, [r7, #72]	; 0x48
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	3308      	adds	r3, #8
 800594e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005950:	61fa      	str	r2, [r7, #28]
 8005952:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005954:	69b9      	ldr	r1, [r7, #24]
 8005956:	69fa      	ldr	r2, [r7, #28]
 8005958:	e841 2300 	strex	r3, r2, [r1]
 800595c:	617b      	str	r3, [r7, #20]
   return(result);
 800595e:	697b      	ldr	r3, [r7, #20]
 8005960:	2b00      	cmp	r3, #0
 8005962:	d1e5      	bne.n	8005930 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2220      	movs	r2, #32
 8005968:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2200      	movs	r2, #0
 8005970:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005974:	2303      	movs	r3, #3
 8005976:	e011      	b.n	800599c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2220      	movs	r2, #32
 800597c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	2220      	movs	r2, #32
 8005982:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	2200      	movs	r2, #0
 800598a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2200      	movs	r2, #0
 8005990:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	2200      	movs	r2, #0
 8005996:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800599a:	2300      	movs	r3, #0
}
 800599c:	4618      	mov	r0, r3
 800599e:	3758      	adds	r7, #88	; 0x58
 80059a0:	46bd      	mov	sp, r7
 80059a2:	bd80      	pop	{r7, pc}

080059a4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80059a4:	b580      	push	{r7, lr}
 80059a6:	b084      	sub	sp, #16
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	60f8      	str	r0, [r7, #12]
 80059ac:	60b9      	str	r1, [r7, #8]
 80059ae:	603b      	str	r3, [r7, #0]
 80059b0:	4613      	mov	r3, r2
 80059b2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80059b4:	e049      	b.n	8005a4a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80059b6:	69bb      	ldr	r3, [r7, #24]
 80059b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80059bc:	d045      	beq.n	8005a4a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80059be:	f7fd f8a1 	bl	8002b04 <HAL_GetTick>
 80059c2:	4602      	mov	r2, r0
 80059c4:	683b      	ldr	r3, [r7, #0]
 80059c6:	1ad3      	subs	r3, r2, r3
 80059c8:	69ba      	ldr	r2, [r7, #24]
 80059ca:	429a      	cmp	r2, r3
 80059cc:	d302      	bcc.n	80059d4 <UART_WaitOnFlagUntilTimeout+0x30>
 80059ce:	69bb      	ldr	r3, [r7, #24]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d101      	bne.n	80059d8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80059d4:	2303      	movs	r3, #3
 80059d6:	e048      	b.n	8005a6a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f003 0304 	and.w	r3, r3, #4
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d031      	beq.n	8005a4a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	69db      	ldr	r3, [r3, #28]
 80059ec:	f003 0308 	and.w	r3, r3, #8
 80059f0:	2b08      	cmp	r3, #8
 80059f2:	d110      	bne.n	8005a16 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	2208      	movs	r2, #8
 80059fa:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80059fc:	68f8      	ldr	r0, [r7, #12]
 80059fe:	f000 f838 	bl	8005a72 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	2208      	movs	r2, #8
 8005a06:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8005a12:	2301      	movs	r3, #1
 8005a14:	e029      	b.n	8005a6a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	69db      	ldr	r3, [r3, #28]
 8005a1c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a20:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a24:	d111      	bne.n	8005a4a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005a2e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005a30:	68f8      	ldr	r0, [r7, #12]
 8005a32:	f000 f81e 	bl	8005a72 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	2220      	movs	r2, #32
 8005a3a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	2200      	movs	r2, #0
 8005a42:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8005a46:	2303      	movs	r3, #3
 8005a48:	e00f      	b.n	8005a6a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	69da      	ldr	r2, [r3, #28]
 8005a50:	68bb      	ldr	r3, [r7, #8]
 8005a52:	4013      	ands	r3, r2
 8005a54:	68ba      	ldr	r2, [r7, #8]
 8005a56:	429a      	cmp	r2, r3
 8005a58:	bf0c      	ite	eq
 8005a5a:	2301      	moveq	r3, #1
 8005a5c:	2300      	movne	r3, #0
 8005a5e:	b2db      	uxtb	r3, r3
 8005a60:	461a      	mov	r2, r3
 8005a62:	79fb      	ldrb	r3, [r7, #7]
 8005a64:	429a      	cmp	r2, r3
 8005a66:	d0a6      	beq.n	80059b6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005a68:	2300      	movs	r3, #0
}
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	3710      	adds	r7, #16
 8005a6e:	46bd      	mov	sp, r7
 8005a70:	bd80      	pop	{r7, pc}

08005a72 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005a72:	b480      	push	{r7}
 8005a74:	b095      	sub	sp, #84	; 0x54
 8005a76:	af00      	add	r7, sp, #0
 8005a78:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a82:	e853 3f00 	ldrex	r3, [r3]
 8005a86:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005a88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a8a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005a8e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	461a      	mov	r2, r3
 8005a96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a98:	643b      	str	r3, [r7, #64]	; 0x40
 8005a9a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a9c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005a9e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005aa0:	e841 2300 	strex	r3, r2, [r1]
 8005aa4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005aa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d1e6      	bne.n	8005a7a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	3308      	adds	r3, #8
 8005ab2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ab4:	6a3b      	ldr	r3, [r7, #32]
 8005ab6:	e853 3f00 	ldrex	r3, [r3]
 8005aba:	61fb      	str	r3, [r7, #28]
   return(result);
 8005abc:	69fb      	ldr	r3, [r7, #28]
 8005abe:	f023 0301 	bic.w	r3, r3, #1
 8005ac2:	64bb      	str	r3, [r7, #72]	; 0x48
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	3308      	adds	r3, #8
 8005aca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005acc:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005ace:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ad0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005ad2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005ad4:	e841 2300 	strex	r3, r2, [r1]
 8005ad8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d1e5      	bne.n	8005aac <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ae4:	2b01      	cmp	r3, #1
 8005ae6:	d118      	bne.n	8005b1a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	e853 3f00 	ldrex	r3, [r3]
 8005af4:	60bb      	str	r3, [r7, #8]
   return(result);
 8005af6:	68bb      	ldr	r3, [r7, #8]
 8005af8:	f023 0310 	bic.w	r3, r3, #16
 8005afc:	647b      	str	r3, [r7, #68]	; 0x44
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	461a      	mov	r2, r3
 8005b04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b06:	61bb      	str	r3, [r7, #24]
 8005b08:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b0a:	6979      	ldr	r1, [r7, #20]
 8005b0c:	69ba      	ldr	r2, [r7, #24]
 8005b0e:	e841 2300 	strex	r3, r2, [r1]
 8005b12:	613b      	str	r3, [r7, #16]
   return(result);
 8005b14:	693b      	ldr	r3, [r7, #16]
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d1e6      	bne.n	8005ae8 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	2220      	movs	r2, #32
 8005b1e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	2200      	movs	r2, #0
 8005b26:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005b2e:	bf00      	nop
 8005b30:	3754      	adds	r7, #84	; 0x54
 8005b32:	46bd      	mov	sp, r7
 8005b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b38:	4770      	bx	lr
	...

08005b3c <__errno>:
 8005b3c:	4b01      	ldr	r3, [pc, #4]	; (8005b44 <__errno+0x8>)
 8005b3e:	6818      	ldr	r0, [r3, #0]
 8005b40:	4770      	bx	lr
 8005b42:	bf00      	nop
 8005b44:	200000dc 	.word	0x200000dc

08005b48 <__libc_init_array>:
 8005b48:	b570      	push	{r4, r5, r6, lr}
 8005b4a:	4d0d      	ldr	r5, [pc, #52]	; (8005b80 <__libc_init_array+0x38>)
 8005b4c:	4c0d      	ldr	r4, [pc, #52]	; (8005b84 <__libc_init_array+0x3c>)
 8005b4e:	1b64      	subs	r4, r4, r5
 8005b50:	10a4      	asrs	r4, r4, #2
 8005b52:	2600      	movs	r6, #0
 8005b54:	42a6      	cmp	r6, r4
 8005b56:	d109      	bne.n	8005b6c <__libc_init_array+0x24>
 8005b58:	4d0b      	ldr	r5, [pc, #44]	; (8005b88 <__libc_init_array+0x40>)
 8005b5a:	4c0c      	ldr	r4, [pc, #48]	; (8005b8c <__libc_init_array+0x44>)
 8005b5c:	f001 f8fa 	bl	8006d54 <_init>
 8005b60:	1b64      	subs	r4, r4, r5
 8005b62:	10a4      	asrs	r4, r4, #2
 8005b64:	2600      	movs	r6, #0
 8005b66:	42a6      	cmp	r6, r4
 8005b68:	d105      	bne.n	8005b76 <__libc_init_array+0x2e>
 8005b6a:	bd70      	pop	{r4, r5, r6, pc}
 8005b6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b70:	4798      	blx	r3
 8005b72:	3601      	adds	r6, #1
 8005b74:	e7ee      	b.n	8005b54 <__libc_init_array+0xc>
 8005b76:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b7a:	4798      	blx	r3
 8005b7c:	3601      	adds	r6, #1
 8005b7e:	e7f2      	b.n	8005b66 <__libc_init_array+0x1e>
 8005b80:	08006f48 	.word	0x08006f48
 8005b84:	08006f48 	.word	0x08006f48
 8005b88:	08006f48 	.word	0x08006f48
 8005b8c:	08006f4c 	.word	0x08006f4c

08005b90 <memset>:
 8005b90:	4402      	add	r2, r0
 8005b92:	4603      	mov	r3, r0
 8005b94:	4293      	cmp	r3, r2
 8005b96:	d100      	bne.n	8005b9a <memset+0xa>
 8005b98:	4770      	bx	lr
 8005b9a:	f803 1b01 	strb.w	r1, [r3], #1
 8005b9e:	e7f9      	b.n	8005b94 <memset+0x4>

08005ba0 <iprintf>:
 8005ba0:	b40f      	push	{r0, r1, r2, r3}
 8005ba2:	4b0a      	ldr	r3, [pc, #40]	; (8005bcc <iprintf+0x2c>)
 8005ba4:	b513      	push	{r0, r1, r4, lr}
 8005ba6:	681c      	ldr	r4, [r3, #0]
 8005ba8:	b124      	cbz	r4, 8005bb4 <iprintf+0x14>
 8005baa:	69a3      	ldr	r3, [r4, #24]
 8005bac:	b913      	cbnz	r3, 8005bb4 <iprintf+0x14>
 8005bae:	4620      	mov	r0, r4
 8005bb0:	f000 fb2c 	bl	800620c <__sinit>
 8005bb4:	ab05      	add	r3, sp, #20
 8005bb6:	9a04      	ldr	r2, [sp, #16]
 8005bb8:	68a1      	ldr	r1, [r4, #8]
 8005bba:	9301      	str	r3, [sp, #4]
 8005bbc:	4620      	mov	r0, r4
 8005bbe:	f000 fd3d 	bl	800663c <_vfiprintf_r>
 8005bc2:	b002      	add	sp, #8
 8005bc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005bc8:	b004      	add	sp, #16
 8005bca:	4770      	bx	lr
 8005bcc:	200000dc 	.word	0x200000dc

08005bd0 <_puts_r>:
 8005bd0:	b570      	push	{r4, r5, r6, lr}
 8005bd2:	460e      	mov	r6, r1
 8005bd4:	4605      	mov	r5, r0
 8005bd6:	b118      	cbz	r0, 8005be0 <_puts_r+0x10>
 8005bd8:	6983      	ldr	r3, [r0, #24]
 8005bda:	b90b      	cbnz	r3, 8005be0 <_puts_r+0x10>
 8005bdc:	f000 fb16 	bl	800620c <__sinit>
 8005be0:	69ab      	ldr	r3, [r5, #24]
 8005be2:	68ac      	ldr	r4, [r5, #8]
 8005be4:	b913      	cbnz	r3, 8005bec <_puts_r+0x1c>
 8005be6:	4628      	mov	r0, r5
 8005be8:	f000 fb10 	bl	800620c <__sinit>
 8005bec:	4b2c      	ldr	r3, [pc, #176]	; (8005ca0 <_puts_r+0xd0>)
 8005bee:	429c      	cmp	r4, r3
 8005bf0:	d120      	bne.n	8005c34 <_puts_r+0x64>
 8005bf2:	686c      	ldr	r4, [r5, #4]
 8005bf4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005bf6:	07db      	lsls	r3, r3, #31
 8005bf8:	d405      	bmi.n	8005c06 <_puts_r+0x36>
 8005bfa:	89a3      	ldrh	r3, [r4, #12]
 8005bfc:	0598      	lsls	r0, r3, #22
 8005bfe:	d402      	bmi.n	8005c06 <_puts_r+0x36>
 8005c00:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005c02:	f000 fba1 	bl	8006348 <__retarget_lock_acquire_recursive>
 8005c06:	89a3      	ldrh	r3, [r4, #12]
 8005c08:	0719      	lsls	r1, r3, #28
 8005c0a:	d51d      	bpl.n	8005c48 <_puts_r+0x78>
 8005c0c:	6923      	ldr	r3, [r4, #16]
 8005c0e:	b1db      	cbz	r3, 8005c48 <_puts_r+0x78>
 8005c10:	3e01      	subs	r6, #1
 8005c12:	68a3      	ldr	r3, [r4, #8]
 8005c14:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005c18:	3b01      	subs	r3, #1
 8005c1a:	60a3      	str	r3, [r4, #8]
 8005c1c:	bb39      	cbnz	r1, 8005c6e <_puts_r+0x9e>
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	da38      	bge.n	8005c94 <_puts_r+0xc4>
 8005c22:	4622      	mov	r2, r4
 8005c24:	210a      	movs	r1, #10
 8005c26:	4628      	mov	r0, r5
 8005c28:	f000 f916 	bl	8005e58 <__swbuf_r>
 8005c2c:	3001      	adds	r0, #1
 8005c2e:	d011      	beq.n	8005c54 <_puts_r+0x84>
 8005c30:	250a      	movs	r5, #10
 8005c32:	e011      	b.n	8005c58 <_puts_r+0x88>
 8005c34:	4b1b      	ldr	r3, [pc, #108]	; (8005ca4 <_puts_r+0xd4>)
 8005c36:	429c      	cmp	r4, r3
 8005c38:	d101      	bne.n	8005c3e <_puts_r+0x6e>
 8005c3a:	68ac      	ldr	r4, [r5, #8]
 8005c3c:	e7da      	b.n	8005bf4 <_puts_r+0x24>
 8005c3e:	4b1a      	ldr	r3, [pc, #104]	; (8005ca8 <_puts_r+0xd8>)
 8005c40:	429c      	cmp	r4, r3
 8005c42:	bf08      	it	eq
 8005c44:	68ec      	ldreq	r4, [r5, #12]
 8005c46:	e7d5      	b.n	8005bf4 <_puts_r+0x24>
 8005c48:	4621      	mov	r1, r4
 8005c4a:	4628      	mov	r0, r5
 8005c4c:	f000 f956 	bl	8005efc <__swsetup_r>
 8005c50:	2800      	cmp	r0, #0
 8005c52:	d0dd      	beq.n	8005c10 <_puts_r+0x40>
 8005c54:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8005c58:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005c5a:	07da      	lsls	r2, r3, #31
 8005c5c:	d405      	bmi.n	8005c6a <_puts_r+0x9a>
 8005c5e:	89a3      	ldrh	r3, [r4, #12]
 8005c60:	059b      	lsls	r3, r3, #22
 8005c62:	d402      	bmi.n	8005c6a <_puts_r+0x9a>
 8005c64:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005c66:	f000 fb70 	bl	800634a <__retarget_lock_release_recursive>
 8005c6a:	4628      	mov	r0, r5
 8005c6c:	bd70      	pop	{r4, r5, r6, pc}
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	da04      	bge.n	8005c7c <_puts_r+0xac>
 8005c72:	69a2      	ldr	r2, [r4, #24]
 8005c74:	429a      	cmp	r2, r3
 8005c76:	dc06      	bgt.n	8005c86 <_puts_r+0xb6>
 8005c78:	290a      	cmp	r1, #10
 8005c7a:	d004      	beq.n	8005c86 <_puts_r+0xb6>
 8005c7c:	6823      	ldr	r3, [r4, #0]
 8005c7e:	1c5a      	adds	r2, r3, #1
 8005c80:	6022      	str	r2, [r4, #0]
 8005c82:	7019      	strb	r1, [r3, #0]
 8005c84:	e7c5      	b.n	8005c12 <_puts_r+0x42>
 8005c86:	4622      	mov	r2, r4
 8005c88:	4628      	mov	r0, r5
 8005c8a:	f000 f8e5 	bl	8005e58 <__swbuf_r>
 8005c8e:	3001      	adds	r0, #1
 8005c90:	d1bf      	bne.n	8005c12 <_puts_r+0x42>
 8005c92:	e7df      	b.n	8005c54 <_puts_r+0x84>
 8005c94:	6823      	ldr	r3, [r4, #0]
 8005c96:	250a      	movs	r5, #10
 8005c98:	1c5a      	adds	r2, r3, #1
 8005c9a:	6022      	str	r2, [r4, #0]
 8005c9c:	701d      	strb	r5, [r3, #0]
 8005c9e:	e7db      	b.n	8005c58 <_puts_r+0x88>
 8005ca0:	08006ed4 	.word	0x08006ed4
 8005ca4:	08006ef4 	.word	0x08006ef4
 8005ca8:	08006eb4 	.word	0x08006eb4

08005cac <puts>:
 8005cac:	4b02      	ldr	r3, [pc, #8]	; (8005cb8 <puts+0xc>)
 8005cae:	4601      	mov	r1, r0
 8005cb0:	6818      	ldr	r0, [r3, #0]
 8005cb2:	f7ff bf8d 	b.w	8005bd0 <_puts_r>
 8005cb6:	bf00      	nop
 8005cb8:	200000dc 	.word	0x200000dc

08005cbc <setbuf>:
 8005cbc:	2900      	cmp	r1, #0
 8005cbe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005cc2:	bf0c      	ite	eq
 8005cc4:	2202      	moveq	r2, #2
 8005cc6:	2200      	movne	r2, #0
 8005cc8:	f000 b800 	b.w	8005ccc <setvbuf>

08005ccc <setvbuf>:
 8005ccc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005cd0:	461d      	mov	r5, r3
 8005cd2:	4b5d      	ldr	r3, [pc, #372]	; (8005e48 <setvbuf+0x17c>)
 8005cd4:	681f      	ldr	r7, [r3, #0]
 8005cd6:	4604      	mov	r4, r0
 8005cd8:	460e      	mov	r6, r1
 8005cda:	4690      	mov	r8, r2
 8005cdc:	b127      	cbz	r7, 8005ce8 <setvbuf+0x1c>
 8005cde:	69bb      	ldr	r3, [r7, #24]
 8005ce0:	b913      	cbnz	r3, 8005ce8 <setvbuf+0x1c>
 8005ce2:	4638      	mov	r0, r7
 8005ce4:	f000 fa92 	bl	800620c <__sinit>
 8005ce8:	4b58      	ldr	r3, [pc, #352]	; (8005e4c <setvbuf+0x180>)
 8005cea:	429c      	cmp	r4, r3
 8005cec:	d167      	bne.n	8005dbe <setvbuf+0xf2>
 8005cee:	687c      	ldr	r4, [r7, #4]
 8005cf0:	f1b8 0f02 	cmp.w	r8, #2
 8005cf4:	d006      	beq.n	8005d04 <setvbuf+0x38>
 8005cf6:	f1b8 0f01 	cmp.w	r8, #1
 8005cfa:	f200 809f 	bhi.w	8005e3c <setvbuf+0x170>
 8005cfe:	2d00      	cmp	r5, #0
 8005d00:	f2c0 809c 	blt.w	8005e3c <setvbuf+0x170>
 8005d04:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005d06:	07db      	lsls	r3, r3, #31
 8005d08:	d405      	bmi.n	8005d16 <setvbuf+0x4a>
 8005d0a:	89a3      	ldrh	r3, [r4, #12]
 8005d0c:	0598      	lsls	r0, r3, #22
 8005d0e:	d402      	bmi.n	8005d16 <setvbuf+0x4a>
 8005d10:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005d12:	f000 fb19 	bl	8006348 <__retarget_lock_acquire_recursive>
 8005d16:	4621      	mov	r1, r4
 8005d18:	4638      	mov	r0, r7
 8005d1a:	f000 f9e3 	bl	80060e4 <_fflush_r>
 8005d1e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005d20:	b141      	cbz	r1, 8005d34 <setvbuf+0x68>
 8005d22:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005d26:	4299      	cmp	r1, r3
 8005d28:	d002      	beq.n	8005d30 <setvbuf+0x64>
 8005d2a:	4638      	mov	r0, r7
 8005d2c:	f000 fb7c 	bl	8006428 <_free_r>
 8005d30:	2300      	movs	r3, #0
 8005d32:	6363      	str	r3, [r4, #52]	; 0x34
 8005d34:	2300      	movs	r3, #0
 8005d36:	61a3      	str	r3, [r4, #24]
 8005d38:	6063      	str	r3, [r4, #4]
 8005d3a:	89a3      	ldrh	r3, [r4, #12]
 8005d3c:	0619      	lsls	r1, r3, #24
 8005d3e:	d503      	bpl.n	8005d48 <setvbuf+0x7c>
 8005d40:	6921      	ldr	r1, [r4, #16]
 8005d42:	4638      	mov	r0, r7
 8005d44:	f000 fb70 	bl	8006428 <_free_r>
 8005d48:	89a3      	ldrh	r3, [r4, #12]
 8005d4a:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8005d4e:	f023 0303 	bic.w	r3, r3, #3
 8005d52:	f1b8 0f02 	cmp.w	r8, #2
 8005d56:	81a3      	strh	r3, [r4, #12]
 8005d58:	d06c      	beq.n	8005e34 <setvbuf+0x168>
 8005d5a:	ab01      	add	r3, sp, #4
 8005d5c:	466a      	mov	r2, sp
 8005d5e:	4621      	mov	r1, r4
 8005d60:	4638      	mov	r0, r7
 8005d62:	f000 faf3 	bl	800634c <__swhatbuf_r>
 8005d66:	89a3      	ldrh	r3, [r4, #12]
 8005d68:	4318      	orrs	r0, r3
 8005d6a:	81a0      	strh	r0, [r4, #12]
 8005d6c:	2d00      	cmp	r5, #0
 8005d6e:	d130      	bne.n	8005dd2 <setvbuf+0x106>
 8005d70:	9d00      	ldr	r5, [sp, #0]
 8005d72:	4628      	mov	r0, r5
 8005d74:	f000 fb50 	bl	8006418 <malloc>
 8005d78:	4606      	mov	r6, r0
 8005d7a:	2800      	cmp	r0, #0
 8005d7c:	d155      	bne.n	8005e2a <setvbuf+0x15e>
 8005d7e:	f8dd 9000 	ldr.w	r9, [sp]
 8005d82:	45a9      	cmp	r9, r5
 8005d84:	d14a      	bne.n	8005e1c <setvbuf+0x150>
 8005d86:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8005d8a:	2200      	movs	r2, #0
 8005d8c:	60a2      	str	r2, [r4, #8]
 8005d8e:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8005d92:	6022      	str	r2, [r4, #0]
 8005d94:	6122      	str	r2, [r4, #16]
 8005d96:	2201      	movs	r2, #1
 8005d98:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005d9c:	6162      	str	r2, [r4, #20]
 8005d9e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005da0:	f043 0302 	orr.w	r3, r3, #2
 8005da4:	07d2      	lsls	r2, r2, #31
 8005da6:	81a3      	strh	r3, [r4, #12]
 8005da8:	d405      	bmi.n	8005db6 <setvbuf+0xea>
 8005daa:	f413 7f00 	tst.w	r3, #512	; 0x200
 8005dae:	d102      	bne.n	8005db6 <setvbuf+0xea>
 8005db0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005db2:	f000 faca 	bl	800634a <__retarget_lock_release_recursive>
 8005db6:	4628      	mov	r0, r5
 8005db8:	b003      	add	sp, #12
 8005dba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005dbe:	4b24      	ldr	r3, [pc, #144]	; (8005e50 <setvbuf+0x184>)
 8005dc0:	429c      	cmp	r4, r3
 8005dc2:	d101      	bne.n	8005dc8 <setvbuf+0xfc>
 8005dc4:	68bc      	ldr	r4, [r7, #8]
 8005dc6:	e793      	b.n	8005cf0 <setvbuf+0x24>
 8005dc8:	4b22      	ldr	r3, [pc, #136]	; (8005e54 <setvbuf+0x188>)
 8005dca:	429c      	cmp	r4, r3
 8005dcc:	bf08      	it	eq
 8005dce:	68fc      	ldreq	r4, [r7, #12]
 8005dd0:	e78e      	b.n	8005cf0 <setvbuf+0x24>
 8005dd2:	2e00      	cmp	r6, #0
 8005dd4:	d0cd      	beq.n	8005d72 <setvbuf+0xa6>
 8005dd6:	69bb      	ldr	r3, [r7, #24]
 8005dd8:	b913      	cbnz	r3, 8005de0 <setvbuf+0x114>
 8005dda:	4638      	mov	r0, r7
 8005ddc:	f000 fa16 	bl	800620c <__sinit>
 8005de0:	f1b8 0f01 	cmp.w	r8, #1
 8005de4:	bf08      	it	eq
 8005de6:	89a3      	ldrheq	r3, [r4, #12]
 8005de8:	6026      	str	r6, [r4, #0]
 8005dea:	bf04      	itt	eq
 8005dec:	f043 0301 	orreq.w	r3, r3, #1
 8005df0:	81a3      	strheq	r3, [r4, #12]
 8005df2:	89a2      	ldrh	r2, [r4, #12]
 8005df4:	f012 0308 	ands.w	r3, r2, #8
 8005df8:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8005dfc:	d01c      	beq.n	8005e38 <setvbuf+0x16c>
 8005dfe:	07d3      	lsls	r3, r2, #31
 8005e00:	bf41      	itttt	mi
 8005e02:	2300      	movmi	r3, #0
 8005e04:	426d      	negmi	r5, r5
 8005e06:	60a3      	strmi	r3, [r4, #8]
 8005e08:	61a5      	strmi	r5, [r4, #24]
 8005e0a:	bf58      	it	pl
 8005e0c:	60a5      	strpl	r5, [r4, #8]
 8005e0e:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8005e10:	f015 0501 	ands.w	r5, r5, #1
 8005e14:	d115      	bne.n	8005e42 <setvbuf+0x176>
 8005e16:	f412 7f00 	tst.w	r2, #512	; 0x200
 8005e1a:	e7c8      	b.n	8005dae <setvbuf+0xe2>
 8005e1c:	4648      	mov	r0, r9
 8005e1e:	f000 fafb 	bl	8006418 <malloc>
 8005e22:	4606      	mov	r6, r0
 8005e24:	2800      	cmp	r0, #0
 8005e26:	d0ae      	beq.n	8005d86 <setvbuf+0xba>
 8005e28:	464d      	mov	r5, r9
 8005e2a:	89a3      	ldrh	r3, [r4, #12]
 8005e2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e30:	81a3      	strh	r3, [r4, #12]
 8005e32:	e7d0      	b.n	8005dd6 <setvbuf+0x10a>
 8005e34:	2500      	movs	r5, #0
 8005e36:	e7a8      	b.n	8005d8a <setvbuf+0xbe>
 8005e38:	60a3      	str	r3, [r4, #8]
 8005e3a:	e7e8      	b.n	8005e0e <setvbuf+0x142>
 8005e3c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8005e40:	e7b9      	b.n	8005db6 <setvbuf+0xea>
 8005e42:	2500      	movs	r5, #0
 8005e44:	e7b7      	b.n	8005db6 <setvbuf+0xea>
 8005e46:	bf00      	nop
 8005e48:	200000dc 	.word	0x200000dc
 8005e4c:	08006ed4 	.word	0x08006ed4
 8005e50:	08006ef4 	.word	0x08006ef4
 8005e54:	08006eb4 	.word	0x08006eb4

08005e58 <__swbuf_r>:
 8005e58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e5a:	460e      	mov	r6, r1
 8005e5c:	4614      	mov	r4, r2
 8005e5e:	4605      	mov	r5, r0
 8005e60:	b118      	cbz	r0, 8005e6a <__swbuf_r+0x12>
 8005e62:	6983      	ldr	r3, [r0, #24]
 8005e64:	b90b      	cbnz	r3, 8005e6a <__swbuf_r+0x12>
 8005e66:	f000 f9d1 	bl	800620c <__sinit>
 8005e6a:	4b21      	ldr	r3, [pc, #132]	; (8005ef0 <__swbuf_r+0x98>)
 8005e6c:	429c      	cmp	r4, r3
 8005e6e:	d12b      	bne.n	8005ec8 <__swbuf_r+0x70>
 8005e70:	686c      	ldr	r4, [r5, #4]
 8005e72:	69a3      	ldr	r3, [r4, #24]
 8005e74:	60a3      	str	r3, [r4, #8]
 8005e76:	89a3      	ldrh	r3, [r4, #12]
 8005e78:	071a      	lsls	r2, r3, #28
 8005e7a:	d52f      	bpl.n	8005edc <__swbuf_r+0x84>
 8005e7c:	6923      	ldr	r3, [r4, #16]
 8005e7e:	b36b      	cbz	r3, 8005edc <__swbuf_r+0x84>
 8005e80:	6923      	ldr	r3, [r4, #16]
 8005e82:	6820      	ldr	r0, [r4, #0]
 8005e84:	1ac0      	subs	r0, r0, r3
 8005e86:	6963      	ldr	r3, [r4, #20]
 8005e88:	b2f6      	uxtb	r6, r6
 8005e8a:	4283      	cmp	r3, r0
 8005e8c:	4637      	mov	r7, r6
 8005e8e:	dc04      	bgt.n	8005e9a <__swbuf_r+0x42>
 8005e90:	4621      	mov	r1, r4
 8005e92:	4628      	mov	r0, r5
 8005e94:	f000 f926 	bl	80060e4 <_fflush_r>
 8005e98:	bb30      	cbnz	r0, 8005ee8 <__swbuf_r+0x90>
 8005e9a:	68a3      	ldr	r3, [r4, #8]
 8005e9c:	3b01      	subs	r3, #1
 8005e9e:	60a3      	str	r3, [r4, #8]
 8005ea0:	6823      	ldr	r3, [r4, #0]
 8005ea2:	1c5a      	adds	r2, r3, #1
 8005ea4:	6022      	str	r2, [r4, #0]
 8005ea6:	701e      	strb	r6, [r3, #0]
 8005ea8:	6963      	ldr	r3, [r4, #20]
 8005eaa:	3001      	adds	r0, #1
 8005eac:	4283      	cmp	r3, r0
 8005eae:	d004      	beq.n	8005eba <__swbuf_r+0x62>
 8005eb0:	89a3      	ldrh	r3, [r4, #12]
 8005eb2:	07db      	lsls	r3, r3, #31
 8005eb4:	d506      	bpl.n	8005ec4 <__swbuf_r+0x6c>
 8005eb6:	2e0a      	cmp	r6, #10
 8005eb8:	d104      	bne.n	8005ec4 <__swbuf_r+0x6c>
 8005eba:	4621      	mov	r1, r4
 8005ebc:	4628      	mov	r0, r5
 8005ebe:	f000 f911 	bl	80060e4 <_fflush_r>
 8005ec2:	b988      	cbnz	r0, 8005ee8 <__swbuf_r+0x90>
 8005ec4:	4638      	mov	r0, r7
 8005ec6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005ec8:	4b0a      	ldr	r3, [pc, #40]	; (8005ef4 <__swbuf_r+0x9c>)
 8005eca:	429c      	cmp	r4, r3
 8005ecc:	d101      	bne.n	8005ed2 <__swbuf_r+0x7a>
 8005ece:	68ac      	ldr	r4, [r5, #8]
 8005ed0:	e7cf      	b.n	8005e72 <__swbuf_r+0x1a>
 8005ed2:	4b09      	ldr	r3, [pc, #36]	; (8005ef8 <__swbuf_r+0xa0>)
 8005ed4:	429c      	cmp	r4, r3
 8005ed6:	bf08      	it	eq
 8005ed8:	68ec      	ldreq	r4, [r5, #12]
 8005eda:	e7ca      	b.n	8005e72 <__swbuf_r+0x1a>
 8005edc:	4621      	mov	r1, r4
 8005ede:	4628      	mov	r0, r5
 8005ee0:	f000 f80c 	bl	8005efc <__swsetup_r>
 8005ee4:	2800      	cmp	r0, #0
 8005ee6:	d0cb      	beq.n	8005e80 <__swbuf_r+0x28>
 8005ee8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8005eec:	e7ea      	b.n	8005ec4 <__swbuf_r+0x6c>
 8005eee:	bf00      	nop
 8005ef0:	08006ed4 	.word	0x08006ed4
 8005ef4:	08006ef4 	.word	0x08006ef4
 8005ef8:	08006eb4 	.word	0x08006eb4

08005efc <__swsetup_r>:
 8005efc:	4b32      	ldr	r3, [pc, #200]	; (8005fc8 <__swsetup_r+0xcc>)
 8005efe:	b570      	push	{r4, r5, r6, lr}
 8005f00:	681d      	ldr	r5, [r3, #0]
 8005f02:	4606      	mov	r6, r0
 8005f04:	460c      	mov	r4, r1
 8005f06:	b125      	cbz	r5, 8005f12 <__swsetup_r+0x16>
 8005f08:	69ab      	ldr	r3, [r5, #24]
 8005f0a:	b913      	cbnz	r3, 8005f12 <__swsetup_r+0x16>
 8005f0c:	4628      	mov	r0, r5
 8005f0e:	f000 f97d 	bl	800620c <__sinit>
 8005f12:	4b2e      	ldr	r3, [pc, #184]	; (8005fcc <__swsetup_r+0xd0>)
 8005f14:	429c      	cmp	r4, r3
 8005f16:	d10f      	bne.n	8005f38 <__swsetup_r+0x3c>
 8005f18:	686c      	ldr	r4, [r5, #4]
 8005f1a:	89a3      	ldrh	r3, [r4, #12]
 8005f1c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005f20:	0719      	lsls	r1, r3, #28
 8005f22:	d42c      	bmi.n	8005f7e <__swsetup_r+0x82>
 8005f24:	06dd      	lsls	r5, r3, #27
 8005f26:	d411      	bmi.n	8005f4c <__swsetup_r+0x50>
 8005f28:	2309      	movs	r3, #9
 8005f2a:	6033      	str	r3, [r6, #0]
 8005f2c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005f30:	81a3      	strh	r3, [r4, #12]
 8005f32:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005f36:	e03e      	b.n	8005fb6 <__swsetup_r+0xba>
 8005f38:	4b25      	ldr	r3, [pc, #148]	; (8005fd0 <__swsetup_r+0xd4>)
 8005f3a:	429c      	cmp	r4, r3
 8005f3c:	d101      	bne.n	8005f42 <__swsetup_r+0x46>
 8005f3e:	68ac      	ldr	r4, [r5, #8]
 8005f40:	e7eb      	b.n	8005f1a <__swsetup_r+0x1e>
 8005f42:	4b24      	ldr	r3, [pc, #144]	; (8005fd4 <__swsetup_r+0xd8>)
 8005f44:	429c      	cmp	r4, r3
 8005f46:	bf08      	it	eq
 8005f48:	68ec      	ldreq	r4, [r5, #12]
 8005f4a:	e7e6      	b.n	8005f1a <__swsetup_r+0x1e>
 8005f4c:	0758      	lsls	r0, r3, #29
 8005f4e:	d512      	bpl.n	8005f76 <__swsetup_r+0x7a>
 8005f50:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005f52:	b141      	cbz	r1, 8005f66 <__swsetup_r+0x6a>
 8005f54:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005f58:	4299      	cmp	r1, r3
 8005f5a:	d002      	beq.n	8005f62 <__swsetup_r+0x66>
 8005f5c:	4630      	mov	r0, r6
 8005f5e:	f000 fa63 	bl	8006428 <_free_r>
 8005f62:	2300      	movs	r3, #0
 8005f64:	6363      	str	r3, [r4, #52]	; 0x34
 8005f66:	89a3      	ldrh	r3, [r4, #12]
 8005f68:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005f6c:	81a3      	strh	r3, [r4, #12]
 8005f6e:	2300      	movs	r3, #0
 8005f70:	6063      	str	r3, [r4, #4]
 8005f72:	6923      	ldr	r3, [r4, #16]
 8005f74:	6023      	str	r3, [r4, #0]
 8005f76:	89a3      	ldrh	r3, [r4, #12]
 8005f78:	f043 0308 	orr.w	r3, r3, #8
 8005f7c:	81a3      	strh	r3, [r4, #12]
 8005f7e:	6923      	ldr	r3, [r4, #16]
 8005f80:	b94b      	cbnz	r3, 8005f96 <__swsetup_r+0x9a>
 8005f82:	89a3      	ldrh	r3, [r4, #12]
 8005f84:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005f88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f8c:	d003      	beq.n	8005f96 <__swsetup_r+0x9a>
 8005f8e:	4621      	mov	r1, r4
 8005f90:	4630      	mov	r0, r6
 8005f92:	f000 fa01 	bl	8006398 <__smakebuf_r>
 8005f96:	89a0      	ldrh	r0, [r4, #12]
 8005f98:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005f9c:	f010 0301 	ands.w	r3, r0, #1
 8005fa0:	d00a      	beq.n	8005fb8 <__swsetup_r+0xbc>
 8005fa2:	2300      	movs	r3, #0
 8005fa4:	60a3      	str	r3, [r4, #8]
 8005fa6:	6963      	ldr	r3, [r4, #20]
 8005fa8:	425b      	negs	r3, r3
 8005faa:	61a3      	str	r3, [r4, #24]
 8005fac:	6923      	ldr	r3, [r4, #16]
 8005fae:	b943      	cbnz	r3, 8005fc2 <__swsetup_r+0xc6>
 8005fb0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005fb4:	d1ba      	bne.n	8005f2c <__swsetup_r+0x30>
 8005fb6:	bd70      	pop	{r4, r5, r6, pc}
 8005fb8:	0781      	lsls	r1, r0, #30
 8005fba:	bf58      	it	pl
 8005fbc:	6963      	ldrpl	r3, [r4, #20]
 8005fbe:	60a3      	str	r3, [r4, #8]
 8005fc0:	e7f4      	b.n	8005fac <__swsetup_r+0xb0>
 8005fc2:	2000      	movs	r0, #0
 8005fc4:	e7f7      	b.n	8005fb6 <__swsetup_r+0xba>
 8005fc6:	bf00      	nop
 8005fc8:	200000dc 	.word	0x200000dc
 8005fcc:	08006ed4 	.word	0x08006ed4
 8005fd0:	08006ef4 	.word	0x08006ef4
 8005fd4:	08006eb4 	.word	0x08006eb4

08005fd8 <__sflush_r>:
 8005fd8:	898a      	ldrh	r2, [r1, #12]
 8005fda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005fde:	4605      	mov	r5, r0
 8005fe0:	0710      	lsls	r0, r2, #28
 8005fe2:	460c      	mov	r4, r1
 8005fe4:	d458      	bmi.n	8006098 <__sflush_r+0xc0>
 8005fe6:	684b      	ldr	r3, [r1, #4]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	dc05      	bgt.n	8005ff8 <__sflush_r+0x20>
 8005fec:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	dc02      	bgt.n	8005ff8 <__sflush_r+0x20>
 8005ff2:	2000      	movs	r0, #0
 8005ff4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005ff8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005ffa:	2e00      	cmp	r6, #0
 8005ffc:	d0f9      	beq.n	8005ff2 <__sflush_r+0x1a>
 8005ffe:	2300      	movs	r3, #0
 8006000:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006004:	682f      	ldr	r7, [r5, #0]
 8006006:	602b      	str	r3, [r5, #0]
 8006008:	d032      	beq.n	8006070 <__sflush_r+0x98>
 800600a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800600c:	89a3      	ldrh	r3, [r4, #12]
 800600e:	075a      	lsls	r2, r3, #29
 8006010:	d505      	bpl.n	800601e <__sflush_r+0x46>
 8006012:	6863      	ldr	r3, [r4, #4]
 8006014:	1ac0      	subs	r0, r0, r3
 8006016:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006018:	b10b      	cbz	r3, 800601e <__sflush_r+0x46>
 800601a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800601c:	1ac0      	subs	r0, r0, r3
 800601e:	2300      	movs	r3, #0
 8006020:	4602      	mov	r2, r0
 8006022:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006024:	6a21      	ldr	r1, [r4, #32]
 8006026:	4628      	mov	r0, r5
 8006028:	47b0      	blx	r6
 800602a:	1c43      	adds	r3, r0, #1
 800602c:	89a3      	ldrh	r3, [r4, #12]
 800602e:	d106      	bne.n	800603e <__sflush_r+0x66>
 8006030:	6829      	ldr	r1, [r5, #0]
 8006032:	291d      	cmp	r1, #29
 8006034:	d82c      	bhi.n	8006090 <__sflush_r+0xb8>
 8006036:	4a2a      	ldr	r2, [pc, #168]	; (80060e0 <__sflush_r+0x108>)
 8006038:	40ca      	lsrs	r2, r1
 800603a:	07d6      	lsls	r6, r2, #31
 800603c:	d528      	bpl.n	8006090 <__sflush_r+0xb8>
 800603e:	2200      	movs	r2, #0
 8006040:	6062      	str	r2, [r4, #4]
 8006042:	04d9      	lsls	r1, r3, #19
 8006044:	6922      	ldr	r2, [r4, #16]
 8006046:	6022      	str	r2, [r4, #0]
 8006048:	d504      	bpl.n	8006054 <__sflush_r+0x7c>
 800604a:	1c42      	adds	r2, r0, #1
 800604c:	d101      	bne.n	8006052 <__sflush_r+0x7a>
 800604e:	682b      	ldr	r3, [r5, #0]
 8006050:	b903      	cbnz	r3, 8006054 <__sflush_r+0x7c>
 8006052:	6560      	str	r0, [r4, #84]	; 0x54
 8006054:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006056:	602f      	str	r7, [r5, #0]
 8006058:	2900      	cmp	r1, #0
 800605a:	d0ca      	beq.n	8005ff2 <__sflush_r+0x1a>
 800605c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006060:	4299      	cmp	r1, r3
 8006062:	d002      	beq.n	800606a <__sflush_r+0x92>
 8006064:	4628      	mov	r0, r5
 8006066:	f000 f9df 	bl	8006428 <_free_r>
 800606a:	2000      	movs	r0, #0
 800606c:	6360      	str	r0, [r4, #52]	; 0x34
 800606e:	e7c1      	b.n	8005ff4 <__sflush_r+0x1c>
 8006070:	6a21      	ldr	r1, [r4, #32]
 8006072:	2301      	movs	r3, #1
 8006074:	4628      	mov	r0, r5
 8006076:	47b0      	blx	r6
 8006078:	1c41      	adds	r1, r0, #1
 800607a:	d1c7      	bne.n	800600c <__sflush_r+0x34>
 800607c:	682b      	ldr	r3, [r5, #0]
 800607e:	2b00      	cmp	r3, #0
 8006080:	d0c4      	beq.n	800600c <__sflush_r+0x34>
 8006082:	2b1d      	cmp	r3, #29
 8006084:	d001      	beq.n	800608a <__sflush_r+0xb2>
 8006086:	2b16      	cmp	r3, #22
 8006088:	d101      	bne.n	800608e <__sflush_r+0xb6>
 800608a:	602f      	str	r7, [r5, #0]
 800608c:	e7b1      	b.n	8005ff2 <__sflush_r+0x1a>
 800608e:	89a3      	ldrh	r3, [r4, #12]
 8006090:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006094:	81a3      	strh	r3, [r4, #12]
 8006096:	e7ad      	b.n	8005ff4 <__sflush_r+0x1c>
 8006098:	690f      	ldr	r7, [r1, #16]
 800609a:	2f00      	cmp	r7, #0
 800609c:	d0a9      	beq.n	8005ff2 <__sflush_r+0x1a>
 800609e:	0793      	lsls	r3, r2, #30
 80060a0:	680e      	ldr	r6, [r1, #0]
 80060a2:	bf08      	it	eq
 80060a4:	694b      	ldreq	r3, [r1, #20]
 80060a6:	600f      	str	r7, [r1, #0]
 80060a8:	bf18      	it	ne
 80060aa:	2300      	movne	r3, #0
 80060ac:	eba6 0807 	sub.w	r8, r6, r7
 80060b0:	608b      	str	r3, [r1, #8]
 80060b2:	f1b8 0f00 	cmp.w	r8, #0
 80060b6:	dd9c      	ble.n	8005ff2 <__sflush_r+0x1a>
 80060b8:	6a21      	ldr	r1, [r4, #32]
 80060ba:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80060bc:	4643      	mov	r3, r8
 80060be:	463a      	mov	r2, r7
 80060c0:	4628      	mov	r0, r5
 80060c2:	47b0      	blx	r6
 80060c4:	2800      	cmp	r0, #0
 80060c6:	dc06      	bgt.n	80060d6 <__sflush_r+0xfe>
 80060c8:	89a3      	ldrh	r3, [r4, #12]
 80060ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80060ce:	81a3      	strh	r3, [r4, #12]
 80060d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80060d4:	e78e      	b.n	8005ff4 <__sflush_r+0x1c>
 80060d6:	4407      	add	r7, r0
 80060d8:	eba8 0800 	sub.w	r8, r8, r0
 80060dc:	e7e9      	b.n	80060b2 <__sflush_r+0xda>
 80060de:	bf00      	nop
 80060e0:	20400001 	.word	0x20400001

080060e4 <_fflush_r>:
 80060e4:	b538      	push	{r3, r4, r5, lr}
 80060e6:	690b      	ldr	r3, [r1, #16]
 80060e8:	4605      	mov	r5, r0
 80060ea:	460c      	mov	r4, r1
 80060ec:	b913      	cbnz	r3, 80060f4 <_fflush_r+0x10>
 80060ee:	2500      	movs	r5, #0
 80060f0:	4628      	mov	r0, r5
 80060f2:	bd38      	pop	{r3, r4, r5, pc}
 80060f4:	b118      	cbz	r0, 80060fe <_fflush_r+0x1a>
 80060f6:	6983      	ldr	r3, [r0, #24]
 80060f8:	b90b      	cbnz	r3, 80060fe <_fflush_r+0x1a>
 80060fa:	f000 f887 	bl	800620c <__sinit>
 80060fe:	4b14      	ldr	r3, [pc, #80]	; (8006150 <_fflush_r+0x6c>)
 8006100:	429c      	cmp	r4, r3
 8006102:	d11b      	bne.n	800613c <_fflush_r+0x58>
 8006104:	686c      	ldr	r4, [r5, #4]
 8006106:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800610a:	2b00      	cmp	r3, #0
 800610c:	d0ef      	beq.n	80060ee <_fflush_r+0xa>
 800610e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006110:	07d0      	lsls	r0, r2, #31
 8006112:	d404      	bmi.n	800611e <_fflush_r+0x3a>
 8006114:	0599      	lsls	r1, r3, #22
 8006116:	d402      	bmi.n	800611e <_fflush_r+0x3a>
 8006118:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800611a:	f000 f915 	bl	8006348 <__retarget_lock_acquire_recursive>
 800611e:	4628      	mov	r0, r5
 8006120:	4621      	mov	r1, r4
 8006122:	f7ff ff59 	bl	8005fd8 <__sflush_r>
 8006126:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006128:	07da      	lsls	r2, r3, #31
 800612a:	4605      	mov	r5, r0
 800612c:	d4e0      	bmi.n	80060f0 <_fflush_r+0xc>
 800612e:	89a3      	ldrh	r3, [r4, #12]
 8006130:	059b      	lsls	r3, r3, #22
 8006132:	d4dd      	bmi.n	80060f0 <_fflush_r+0xc>
 8006134:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006136:	f000 f908 	bl	800634a <__retarget_lock_release_recursive>
 800613a:	e7d9      	b.n	80060f0 <_fflush_r+0xc>
 800613c:	4b05      	ldr	r3, [pc, #20]	; (8006154 <_fflush_r+0x70>)
 800613e:	429c      	cmp	r4, r3
 8006140:	d101      	bne.n	8006146 <_fflush_r+0x62>
 8006142:	68ac      	ldr	r4, [r5, #8]
 8006144:	e7df      	b.n	8006106 <_fflush_r+0x22>
 8006146:	4b04      	ldr	r3, [pc, #16]	; (8006158 <_fflush_r+0x74>)
 8006148:	429c      	cmp	r4, r3
 800614a:	bf08      	it	eq
 800614c:	68ec      	ldreq	r4, [r5, #12]
 800614e:	e7da      	b.n	8006106 <_fflush_r+0x22>
 8006150:	08006ed4 	.word	0x08006ed4
 8006154:	08006ef4 	.word	0x08006ef4
 8006158:	08006eb4 	.word	0x08006eb4

0800615c <std>:
 800615c:	2300      	movs	r3, #0
 800615e:	b510      	push	{r4, lr}
 8006160:	4604      	mov	r4, r0
 8006162:	e9c0 3300 	strd	r3, r3, [r0]
 8006166:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800616a:	6083      	str	r3, [r0, #8]
 800616c:	8181      	strh	r1, [r0, #12]
 800616e:	6643      	str	r3, [r0, #100]	; 0x64
 8006170:	81c2      	strh	r2, [r0, #14]
 8006172:	6183      	str	r3, [r0, #24]
 8006174:	4619      	mov	r1, r3
 8006176:	2208      	movs	r2, #8
 8006178:	305c      	adds	r0, #92	; 0x5c
 800617a:	f7ff fd09 	bl	8005b90 <memset>
 800617e:	4b05      	ldr	r3, [pc, #20]	; (8006194 <std+0x38>)
 8006180:	6263      	str	r3, [r4, #36]	; 0x24
 8006182:	4b05      	ldr	r3, [pc, #20]	; (8006198 <std+0x3c>)
 8006184:	62a3      	str	r3, [r4, #40]	; 0x28
 8006186:	4b05      	ldr	r3, [pc, #20]	; (800619c <std+0x40>)
 8006188:	62e3      	str	r3, [r4, #44]	; 0x2c
 800618a:	4b05      	ldr	r3, [pc, #20]	; (80061a0 <std+0x44>)
 800618c:	6224      	str	r4, [r4, #32]
 800618e:	6323      	str	r3, [r4, #48]	; 0x30
 8006190:	bd10      	pop	{r4, pc}
 8006192:	bf00      	nop
 8006194:	08006be5 	.word	0x08006be5
 8006198:	08006c07 	.word	0x08006c07
 800619c:	08006c3f 	.word	0x08006c3f
 80061a0:	08006c63 	.word	0x08006c63

080061a4 <_cleanup_r>:
 80061a4:	4901      	ldr	r1, [pc, #4]	; (80061ac <_cleanup_r+0x8>)
 80061a6:	f000 b8af 	b.w	8006308 <_fwalk_reent>
 80061aa:	bf00      	nop
 80061ac:	080060e5 	.word	0x080060e5

080061b0 <__sfmoreglue>:
 80061b0:	b570      	push	{r4, r5, r6, lr}
 80061b2:	2268      	movs	r2, #104	; 0x68
 80061b4:	1e4d      	subs	r5, r1, #1
 80061b6:	4355      	muls	r5, r2
 80061b8:	460e      	mov	r6, r1
 80061ba:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80061be:	f000 f99f 	bl	8006500 <_malloc_r>
 80061c2:	4604      	mov	r4, r0
 80061c4:	b140      	cbz	r0, 80061d8 <__sfmoreglue+0x28>
 80061c6:	2100      	movs	r1, #0
 80061c8:	e9c0 1600 	strd	r1, r6, [r0]
 80061cc:	300c      	adds	r0, #12
 80061ce:	60a0      	str	r0, [r4, #8]
 80061d0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80061d4:	f7ff fcdc 	bl	8005b90 <memset>
 80061d8:	4620      	mov	r0, r4
 80061da:	bd70      	pop	{r4, r5, r6, pc}

080061dc <__sfp_lock_acquire>:
 80061dc:	4801      	ldr	r0, [pc, #4]	; (80061e4 <__sfp_lock_acquire+0x8>)
 80061de:	f000 b8b3 	b.w	8006348 <__retarget_lock_acquire_recursive>
 80061e2:	bf00      	nop
 80061e4:	20000241 	.word	0x20000241

080061e8 <__sfp_lock_release>:
 80061e8:	4801      	ldr	r0, [pc, #4]	; (80061f0 <__sfp_lock_release+0x8>)
 80061ea:	f000 b8ae 	b.w	800634a <__retarget_lock_release_recursive>
 80061ee:	bf00      	nop
 80061f0:	20000241 	.word	0x20000241

080061f4 <__sinit_lock_acquire>:
 80061f4:	4801      	ldr	r0, [pc, #4]	; (80061fc <__sinit_lock_acquire+0x8>)
 80061f6:	f000 b8a7 	b.w	8006348 <__retarget_lock_acquire_recursive>
 80061fa:	bf00      	nop
 80061fc:	20000242 	.word	0x20000242

08006200 <__sinit_lock_release>:
 8006200:	4801      	ldr	r0, [pc, #4]	; (8006208 <__sinit_lock_release+0x8>)
 8006202:	f000 b8a2 	b.w	800634a <__retarget_lock_release_recursive>
 8006206:	bf00      	nop
 8006208:	20000242 	.word	0x20000242

0800620c <__sinit>:
 800620c:	b510      	push	{r4, lr}
 800620e:	4604      	mov	r4, r0
 8006210:	f7ff fff0 	bl	80061f4 <__sinit_lock_acquire>
 8006214:	69a3      	ldr	r3, [r4, #24]
 8006216:	b11b      	cbz	r3, 8006220 <__sinit+0x14>
 8006218:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800621c:	f7ff bff0 	b.w	8006200 <__sinit_lock_release>
 8006220:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006224:	6523      	str	r3, [r4, #80]	; 0x50
 8006226:	4b13      	ldr	r3, [pc, #76]	; (8006274 <__sinit+0x68>)
 8006228:	4a13      	ldr	r2, [pc, #76]	; (8006278 <__sinit+0x6c>)
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	62a2      	str	r2, [r4, #40]	; 0x28
 800622e:	42a3      	cmp	r3, r4
 8006230:	bf04      	itt	eq
 8006232:	2301      	moveq	r3, #1
 8006234:	61a3      	streq	r3, [r4, #24]
 8006236:	4620      	mov	r0, r4
 8006238:	f000 f820 	bl	800627c <__sfp>
 800623c:	6060      	str	r0, [r4, #4]
 800623e:	4620      	mov	r0, r4
 8006240:	f000 f81c 	bl	800627c <__sfp>
 8006244:	60a0      	str	r0, [r4, #8]
 8006246:	4620      	mov	r0, r4
 8006248:	f000 f818 	bl	800627c <__sfp>
 800624c:	2200      	movs	r2, #0
 800624e:	60e0      	str	r0, [r4, #12]
 8006250:	2104      	movs	r1, #4
 8006252:	6860      	ldr	r0, [r4, #4]
 8006254:	f7ff ff82 	bl	800615c <std>
 8006258:	68a0      	ldr	r0, [r4, #8]
 800625a:	2201      	movs	r2, #1
 800625c:	2109      	movs	r1, #9
 800625e:	f7ff ff7d 	bl	800615c <std>
 8006262:	68e0      	ldr	r0, [r4, #12]
 8006264:	2202      	movs	r2, #2
 8006266:	2112      	movs	r1, #18
 8006268:	f7ff ff78 	bl	800615c <std>
 800626c:	2301      	movs	r3, #1
 800626e:	61a3      	str	r3, [r4, #24]
 8006270:	e7d2      	b.n	8006218 <__sinit+0xc>
 8006272:	bf00      	nop
 8006274:	08006eb0 	.word	0x08006eb0
 8006278:	080061a5 	.word	0x080061a5

0800627c <__sfp>:
 800627c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800627e:	4607      	mov	r7, r0
 8006280:	f7ff ffac 	bl	80061dc <__sfp_lock_acquire>
 8006284:	4b1e      	ldr	r3, [pc, #120]	; (8006300 <__sfp+0x84>)
 8006286:	681e      	ldr	r6, [r3, #0]
 8006288:	69b3      	ldr	r3, [r6, #24]
 800628a:	b913      	cbnz	r3, 8006292 <__sfp+0x16>
 800628c:	4630      	mov	r0, r6
 800628e:	f7ff ffbd 	bl	800620c <__sinit>
 8006292:	3648      	adds	r6, #72	; 0x48
 8006294:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006298:	3b01      	subs	r3, #1
 800629a:	d503      	bpl.n	80062a4 <__sfp+0x28>
 800629c:	6833      	ldr	r3, [r6, #0]
 800629e:	b30b      	cbz	r3, 80062e4 <__sfp+0x68>
 80062a0:	6836      	ldr	r6, [r6, #0]
 80062a2:	e7f7      	b.n	8006294 <__sfp+0x18>
 80062a4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80062a8:	b9d5      	cbnz	r5, 80062e0 <__sfp+0x64>
 80062aa:	4b16      	ldr	r3, [pc, #88]	; (8006304 <__sfp+0x88>)
 80062ac:	60e3      	str	r3, [r4, #12]
 80062ae:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80062b2:	6665      	str	r5, [r4, #100]	; 0x64
 80062b4:	f000 f847 	bl	8006346 <__retarget_lock_init_recursive>
 80062b8:	f7ff ff96 	bl	80061e8 <__sfp_lock_release>
 80062bc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80062c0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80062c4:	6025      	str	r5, [r4, #0]
 80062c6:	61a5      	str	r5, [r4, #24]
 80062c8:	2208      	movs	r2, #8
 80062ca:	4629      	mov	r1, r5
 80062cc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80062d0:	f7ff fc5e 	bl	8005b90 <memset>
 80062d4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80062d8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80062dc:	4620      	mov	r0, r4
 80062de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80062e0:	3468      	adds	r4, #104	; 0x68
 80062e2:	e7d9      	b.n	8006298 <__sfp+0x1c>
 80062e4:	2104      	movs	r1, #4
 80062e6:	4638      	mov	r0, r7
 80062e8:	f7ff ff62 	bl	80061b0 <__sfmoreglue>
 80062ec:	4604      	mov	r4, r0
 80062ee:	6030      	str	r0, [r6, #0]
 80062f0:	2800      	cmp	r0, #0
 80062f2:	d1d5      	bne.n	80062a0 <__sfp+0x24>
 80062f4:	f7ff ff78 	bl	80061e8 <__sfp_lock_release>
 80062f8:	230c      	movs	r3, #12
 80062fa:	603b      	str	r3, [r7, #0]
 80062fc:	e7ee      	b.n	80062dc <__sfp+0x60>
 80062fe:	bf00      	nop
 8006300:	08006eb0 	.word	0x08006eb0
 8006304:	ffff0001 	.word	0xffff0001

08006308 <_fwalk_reent>:
 8006308:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800630c:	4606      	mov	r6, r0
 800630e:	4688      	mov	r8, r1
 8006310:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006314:	2700      	movs	r7, #0
 8006316:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800631a:	f1b9 0901 	subs.w	r9, r9, #1
 800631e:	d505      	bpl.n	800632c <_fwalk_reent+0x24>
 8006320:	6824      	ldr	r4, [r4, #0]
 8006322:	2c00      	cmp	r4, #0
 8006324:	d1f7      	bne.n	8006316 <_fwalk_reent+0xe>
 8006326:	4638      	mov	r0, r7
 8006328:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800632c:	89ab      	ldrh	r3, [r5, #12]
 800632e:	2b01      	cmp	r3, #1
 8006330:	d907      	bls.n	8006342 <_fwalk_reent+0x3a>
 8006332:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006336:	3301      	adds	r3, #1
 8006338:	d003      	beq.n	8006342 <_fwalk_reent+0x3a>
 800633a:	4629      	mov	r1, r5
 800633c:	4630      	mov	r0, r6
 800633e:	47c0      	blx	r8
 8006340:	4307      	orrs	r7, r0
 8006342:	3568      	adds	r5, #104	; 0x68
 8006344:	e7e9      	b.n	800631a <_fwalk_reent+0x12>

08006346 <__retarget_lock_init_recursive>:
 8006346:	4770      	bx	lr

08006348 <__retarget_lock_acquire_recursive>:
 8006348:	4770      	bx	lr

0800634a <__retarget_lock_release_recursive>:
 800634a:	4770      	bx	lr

0800634c <__swhatbuf_r>:
 800634c:	b570      	push	{r4, r5, r6, lr}
 800634e:	460e      	mov	r6, r1
 8006350:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006354:	2900      	cmp	r1, #0
 8006356:	b096      	sub	sp, #88	; 0x58
 8006358:	4614      	mov	r4, r2
 800635a:	461d      	mov	r5, r3
 800635c:	da08      	bge.n	8006370 <__swhatbuf_r+0x24>
 800635e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006362:	2200      	movs	r2, #0
 8006364:	602a      	str	r2, [r5, #0]
 8006366:	061a      	lsls	r2, r3, #24
 8006368:	d410      	bmi.n	800638c <__swhatbuf_r+0x40>
 800636a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800636e:	e00e      	b.n	800638e <__swhatbuf_r+0x42>
 8006370:	466a      	mov	r2, sp
 8006372:	f000 fc9d 	bl	8006cb0 <_fstat_r>
 8006376:	2800      	cmp	r0, #0
 8006378:	dbf1      	blt.n	800635e <__swhatbuf_r+0x12>
 800637a:	9a01      	ldr	r2, [sp, #4]
 800637c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006380:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006384:	425a      	negs	r2, r3
 8006386:	415a      	adcs	r2, r3
 8006388:	602a      	str	r2, [r5, #0]
 800638a:	e7ee      	b.n	800636a <__swhatbuf_r+0x1e>
 800638c:	2340      	movs	r3, #64	; 0x40
 800638e:	2000      	movs	r0, #0
 8006390:	6023      	str	r3, [r4, #0]
 8006392:	b016      	add	sp, #88	; 0x58
 8006394:	bd70      	pop	{r4, r5, r6, pc}
	...

08006398 <__smakebuf_r>:
 8006398:	898b      	ldrh	r3, [r1, #12]
 800639a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800639c:	079d      	lsls	r5, r3, #30
 800639e:	4606      	mov	r6, r0
 80063a0:	460c      	mov	r4, r1
 80063a2:	d507      	bpl.n	80063b4 <__smakebuf_r+0x1c>
 80063a4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80063a8:	6023      	str	r3, [r4, #0]
 80063aa:	6123      	str	r3, [r4, #16]
 80063ac:	2301      	movs	r3, #1
 80063ae:	6163      	str	r3, [r4, #20]
 80063b0:	b002      	add	sp, #8
 80063b2:	bd70      	pop	{r4, r5, r6, pc}
 80063b4:	ab01      	add	r3, sp, #4
 80063b6:	466a      	mov	r2, sp
 80063b8:	f7ff ffc8 	bl	800634c <__swhatbuf_r>
 80063bc:	9900      	ldr	r1, [sp, #0]
 80063be:	4605      	mov	r5, r0
 80063c0:	4630      	mov	r0, r6
 80063c2:	f000 f89d 	bl	8006500 <_malloc_r>
 80063c6:	b948      	cbnz	r0, 80063dc <__smakebuf_r+0x44>
 80063c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80063cc:	059a      	lsls	r2, r3, #22
 80063ce:	d4ef      	bmi.n	80063b0 <__smakebuf_r+0x18>
 80063d0:	f023 0303 	bic.w	r3, r3, #3
 80063d4:	f043 0302 	orr.w	r3, r3, #2
 80063d8:	81a3      	strh	r3, [r4, #12]
 80063da:	e7e3      	b.n	80063a4 <__smakebuf_r+0xc>
 80063dc:	4b0d      	ldr	r3, [pc, #52]	; (8006414 <__smakebuf_r+0x7c>)
 80063de:	62b3      	str	r3, [r6, #40]	; 0x28
 80063e0:	89a3      	ldrh	r3, [r4, #12]
 80063e2:	6020      	str	r0, [r4, #0]
 80063e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063e8:	81a3      	strh	r3, [r4, #12]
 80063ea:	9b00      	ldr	r3, [sp, #0]
 80063ec:	6163      	str	r3, [r4, #20]
 80063ee:	9b01      	ldr	r3, [sp, #4]
 80063f0:	6120      	str	r0, [r4, #16]
 80063f2:	b15b      	cbz	r3, 800640c <__smakebuf_r+0x74>
 80063f4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80063f8:	4630      	mov	r0, r6
 80063fa:	f000 fc6b 	bl	8006cd4 <_isatty_r>
 80063fe:	b128      	cbz	r0, 800640c <__smakebuf_r+0x74>
 8006400:	89a3      	ldrh	r3, [r4, #12]
 8006402:	f023 0303 	bic.w	r3, r3, #3
 8006406:	f043 0301 	orr.w	r3, r3, #1
 800640a:	81a3      	strh	r3, [r4, #12]
 800640c:	89a0      	ldrh	r0, [r4, #12]
 800640e:	4305      	orrs	r5, r0
 8006410:	81a5      	strh	r5, [r4, #12]
 8006412:	e7cd      	b.n	80063b0 <__smakebuf_r+0x18>
 8006414:	080061a5 	.word	0x080061a5

08006418 <malloc>:
 8006418:	4b02      	ldr	r3, [pc, #8]	; (8006424 <malloc+0xc>)
 800641a:	4601      	mov	r1, r0
 800641c:	6818      	ldr	r0, [r3, #0]
 800641e:	f000 b86f 	b.w	8006500 <_malloc_r>
 8006422:	bf00      	nop
 8006424:	200000dc 	.word	0x200000dc

08006428 <_free_r>:
 8006428:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800642a:	2900      	cmp	r1, #0
 800642c:	d044      	beq.n	80064b8 <_free_r+0x90>
 800642e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006432:	9001      	str	r0, [sp, #4]
 8006434:	2b00      	cmp	r3, #0
 8006436:	f1a1 0404 	sub.w	r4, r1, #4
 800643a:	bfb8      	it	lt
 800643c:	18e4      	addlt	r4, r4, r3
 800643e:	f000 fc6b 	bl	8006d18 <__malloc_lock>
 8006442:	4a1e      	ldr	r2, [pc, #120]	; (80064bc <_free_r+0x94>)
 8006444:	9801      	ldr	r0, [sp, #4]
 8006446:	6813      	ldr	r3, [r2, #0]
 8006448:	b933      	cbnz	r3, 8006458 <_free_r+0x30>
 800644a:	6063      	str	r3, [r4, #4]
 800644c:	6014      	str	r4, [r2, #0]
 800644e:	b003      	add	sp, #12
 8006450:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006454:	f000 bc66 	b.w	8006d24 <__malloc_unlock>
 8006458:	42a3      	cmp	r3, r4
 800645a:	d908      	bls.n	800646e <_free_r+0x46>
 800645c:	6825      	ldr	r5, [r4, #0]
 800645e:	1961      	adds	r1, r4, r5
 8006460:	428b      	cmp	r3, r1
 8006462:	bf01      	itttt	eq
 8006464:	6819      	ldreq	r1, [r3, #0]
 8006466:	685b      	ldreq	r3, [r3, #4]
 8006468:	1949      	addeq	r1, r1, r5
 800646a:	6021      	streq	r1, [r4, #0]
 800646c:	e7ed      	b.n	800644a <_free_r+0x22>
 800646e:	461a      	mov	r2, r3
 8006470:	685b      	ldr	r3, [r3, #4]
 8006472:	b10b      	cbz	r3, 8006478 <_free_r+0x50>
 8006474:	42a3      	cmp	r3, r4
 8006476:	d9fa      	bls.n	800646e <_free_r+0x46>
 8006478:	6811      	ldr	r1, [r2, #0]
 800647a:	1855      	adds	r5, r2, r1
 800647c:	42a5      	cmp	r5, r4
 800647e:	d10b      	bne.n	8006498 <_free_r+0x70>
 8006480:	6824      	ldr	r4, [r4, #0]
 8006482:	4421      	add	r1, r4
 8006484:	1854      	adds	r4, r2, r1
 8006486:	42a3      	cmp	r3, r4
 8006488:	6011      	str	r1, [r2, #0]
 800648a:	d1e0      	bne.n	800644e <_free_r+0x26>
 800648c:	681c      	ldr	r4, [r3, #0]
 800648e:	685b      	ldr	r3, [r3, #4]
 8006490:	6053      	str	r3, [r2, #4]
 8006492:	4421      	add	r1, r4
 8006494:	6011      	str	r1, [r2, #0]
 8006496:	e7da      	b.n	800644e <_free_r+0x26>
 8006498:	d902      	bls.n	80064a0 <_free_r+0x78>
 800649a:	230c      	movs	r3, #12
 800649c:	6003      	str	r3, [r0, #0]
 800649e:	e7d6      	b.n	800644e <_free_r+0x26>
 80064a0:	6825      	ldr	r5, [r4, #0]
 80064a2:	1961      	adds	r1, r4, r5
 80064a4:	428b      	cmp	r3, r1
 80064a6:	bf04      	itt	eq
 80064a8:	6819      	ldreq	r1, [r3, #0]
 80064aa:	685b      	ldreq	r3, [r3, #4]
 80064ac:	6063      	str	r3, [r4, #4]
 80064ae:	bf04      	itt	eq
 80064b0:	1949      	addeq	r1, r1, r5
 80064b2:	6021      	streq	r1, [r4, #0]
 80064b4:	6054      	str	r4, [r2, #4]
 80064b6:	e7ca      	b.n	800644e <_free_r+0x26>
 80064b8:	b003      	add	sp, #12
 80064ba:	bd30      	pop	{r4, r5, pc}
 80064bc:	20000244 	.word	0x20000244

080064c0 <sbrk_aligned>:
 80064c0:	b570      	push	{r4, r5, r6, lr}
 80064c2:	4e0e      	ldr	r6, [pc, #56]	; (80064fc <sbrk_aligned+0x3c>)
 80064c4:	460c      	mov	r4, r1
 80064c6:	6831      	ldr	r1, [r6, #0]
 80064c8:	4605      	mov	r5, r0
 80064ca:	b911      	cbnz	r1, 80064d2 <sbrk_aligned+0x12>
 80064cc:	f000 fb7a 	bl	8006bc4 <_sbrk_r>
 80064d0:	6030      	str	r0, [r6, #0]
 80064d2:	4621      	mov	r1, r4
 80064d4:	4628      	mov	r0, r5
 80064d6:	f000 fb75 	bl	8006bc4 <_sbrk_r>
 80064da:	1c43      	adds	r3, r0, #1
 80064dc:	d00a      	beq.n	80064f4 <sbrk_aligned+0x34>
 80064de:	1cc4      	adds	r4, r0, #3
 80064e0:	f024 0403 	bic.w	r4, r4, #3
 80064e4:	42a0      	cmp	r0, r4
 80064e6:	d007      	beq.n	80064f8 <sbrk_aligned+0x38>
 80064e8:	1a21      	subs	r1, r4, r0
 80064ea:	4628      	mov	r0, r5
 80064ec:	f000 fb6a 	bl	8006bc4 <_sbrk_r>
 80064f0:	3001      	adds	r0, #1
 80064f2:	d101      	bne.n	80064f8 <sbrk_aligned+0x38>
 80064f4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80064f8:	4620      	mov	r0, r4
 80064fa:	bd70      	pop	{r4, r5, r6, pc}
 80064fc:	20000248 	.word	0x20000248

08006500 <_malloc_r>:
 8006500:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006504:	1ccd      	adds	r5, r1, #3
 8006506:	f025 0503 	bic.w	r5, r5, #3
 800650a:	3508      	adds	r5, #8
 800650c:	2d0c      	cmp	r5, #12
 800650e:	bf38      	it	cc
 8006510:	250c      	movcc	r5, #12
 8006512:	2d00      	cmp	r5, #0
 8006514:	4607      	mov	r7, r0
 8006516:	db01      	blt.n	800651c <_malloc_r+0x1c>
 8006518:	42a9      	cmp	r1, r5
 800651a:	d905      	bls.n	8006528 <_malloc_r+0x28>
 800651c:	230c      	movs	r3, #12
 800651e:	603b      	str	r3, [r7, #0]
 8006520:	2600      	movs	r6, #0
 8006522:	4630      	mov	r0, r6
 8006524:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006528:	4e2e      	ldr	r6, [pc, #184]	; (80065e4 <_malloc_r+0xe4>)
 800652a:	f000 fbf5 	bl	8006d18 <__malloc_lock>
 800652e:	6833      	ldr	r3, [r6, #0]
 8006530:	461c      	mov	r4, r3
 8006532:	bb34      	cbnz	r4, 8006582 <_malloc_r+0x82>
 8006534:	4629      	mov	r1, r5
 8006536:	4638      	mov	r0, r7
 8006538:	f7ff ffc2 	bl	80064c0 <sbrk_aligned>
 800653c:	1c43      	adds	r3, r0, #1
 800653e:	4604      	mov	r4, r0
 8006540:	d14d      	bne.n	80065de <_malloc_r+0xde>
 8006542:	6834      	ldr	r4, [r6, #0]
 8006544:	4626      	mov	r6, r4
 8006546:	2e00      	cmp	r6, #0
 8006548:	d140      	bne.n	80065cc <_malloc_r+0xcc>
 800654a:	6823      	ldr	r3, [r4, #0]
 800654c:	4631      	mov	r1, r6
 800654e:	4638      	mov	r0, r7
 8006550:	eb04 0803 	add.w	r8, r4, r3
 8006554:	f000 fb36 	bl	8006bc4 <_sbrk_r>
 8006558:	4580      	cmp	r8, r0
 800655a:	d13a      	bne.n	80065d2 <_malloc_r+0xd2>
 800655c:	6821      	ldr	r1, [r4, #0]
 800655e:	3503      	adds	r5, #3
 8006560:	1a6d      	subs	r5, r5, r1
 8006562:	f025 0503 	bic.w	r5, r5, #3
 8006566:	3508      	adds	r5, #8
 8006568:	2d0c      	cmp	r5, #12
 800656a:	bf38      	it	cc
 800656c:	250c      	movcc	r5, #12
 800656e:	4629      	mov	r1, r5
 8006570:	4638      	mov	r0, r7
 8006572:	f7ff ffa5 	bl	80064c0 <sbrk_aligned>
 8006576:	3001      	adds	r0, #1
 8006578:	d02b      	beq.n	80065d2 <_malloc_r+0xd2>
 800657a:	6823      	ldr	r3, [r4, #0]
 800657c:	442b      	add	r3, r5
 800657e:	6023      	str	r3, [r4, #0]
 8006580:	e00e      	b.n	80065a0 <_malloc_r+0xa0>
 8006582:	6822      	ldr	r2, [r4, #0]
 8006584:	1b52      	subs	r2, r2, r5
 8006586:	d41e      	bmi.n	80065c6 <_malloc_r+0xc6>
 8006588:	2a0b      	cmp	r2, #11
 800658a:	d916      	bls.n	80065ba <_malloc_r+0xba>
 800658c:	1961      	adds	r1, r4, r5
 800658e:	42a3      	cmp	r3, r4
 8006590:	6025      	str	r5, [r4, #0]
 8006592:	bf18      	it	ne
 8006594:	6059      	strne	r1, [r3, #4]
 8006596:	6863      	ldr	r3, [r4, #4]
 8006598:	bf08      	it	eq
 800659a:	6031      	streq	r1, [r6, #0]
 800659c:	5162      	str	r2, [r4, r5]
 800659e:	604b      	str	r3, [r1, #4]
 80065a0:	4638      	mov	r0, r7
 80065a2:	f104 060b 	add.w	r6, r4, #11
 80065a6:	f000 fbbd 	bl	8006d24 <__malloc_unlock>
 80065aa:	f026 0607 	bic.w	r6, r6, #7
 80065ae:	1d23      	adds	r3, r4, #4
 80065b0:	1af2      	subs	r2, r6, r3
 80065b2:	d0b6      	beq.n	8006522 <_malloc_r+0x22>
 80065b4:	1b9b      	subs	r3, r3, r6
 80065b6:	50a3      	str	r3, [r4, r2]
 80065b8:	e7b3      	b.n	8006522 <_malloc_r+0x22>
 80065ba:	6862      	ldr	r2, [r4, #4]
 80065bc:	42a3      	cmp	r3, r4
 80065be:	bf0c      	ite	eq
 80065c0:	6032      	streq	r2, [r6, #0]
 80065c2:	605a      	strne	r2, [r3, #4]
 80065c4:	e7ec      	b.n	80065a0 <_malloc_r+0xa0>
 80065c6:	4623      	mov	r3, r4
 80065c8:	6864      	ldr	r4, [r4, #4]
 80065ca:	e7b2      	b.n	8006532 <_malloc_r+0x32>
 80065cc:	4634      	mov	r4, r6
 80065ce:	6876      	ldr	r6, [r6, #4]
 80065d0:	e7b9      	b.n	8006546 <_malloc_r+0x46>
 80065d2:	230c      	movs	r3, #12
 80065d4:	603b      	str	r3, [r7, #0]
 80065d6:	4638      	mov	r0, r7
 80065d8:	f000 fba4 	bl	8006d24 <__malloc_unlock>
 80065dc:	e7a1      	b.n	8006522 <_malloc_r+0x22>
 80065de:	6025      	str	r5, [r4, #0]
 80065e0:	e7de      	b.n	80065a0 <_malloc_r+0xa0>
 80065e2:	bf00      	nop
 80065e4:	20000244 	.word	0x20000244

080065e8 <__sfputc_r>:
 80065e8:	6893      	ldr	r3, [r2, #8]
 80065ea:	3b01      	subs	r3, #1
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	b410      	push	{r4}
 80065f0:	6093      	str	r3, [r2, #8]
 80065f2:	da08      	bge.n	8006606 <__sfputc_r+0x1e>
 80065f4:	6994      	ldr	r4, [r2, #24]
 80065f6:	42a3      	cmp	r3, r4
 80065f8:	db01      	blt.n	80065fe <__sfputc_r+0x16>
 80065fa:	290a      	cmp	r1, #10
 80065fc:	d103      	bne.n	8006606 <__sfputc_r+0x1e>
 80065fe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006602:	f7ff bc29 	b.w	8005e58 <__swbuf_r>
 8006606:	6813      	ldr	r3, [r2, #0]
 8006608:	1c58      	adds	r0, r3, #1
 800660a:	6010      	str	r0, [r2, #0]
 800660c:	7019      	strb	r1, [r3, #0]
 800660e:	4608      	mov	r0, r1
 8006610:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006614:	4770      	bx	lr

08006616 <__sfputs_r>:
 8006616:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006618:	4606      	mov	r6, r0
 800661a:	460f      	mov	r7, r1
 800661c:	4614      	mov	r4, r2
 800661e:	18d5      	adds	r5, r2, r3
 8006620:	42ac      	cmp	r4, r5
 8006622:	d101      	bne.n	8006628 <__sfputs_r+0x12>
 8006624:	2000      	movs	r0, #0
 8006626:	e007      	b.n	8006638 <__sfputs_r+0x22>
 8006628:	f814 1b01 	ldrb.w	r1, [r4], #1
 800662c:	463a      	mov	r2, r7
 800662e:	4630      	mov	r0, r6
 8006630:	f7ff ffda 	bl	80065e8 <__sfputc_r>
 8006634:	1c43      	adds	r3, r0, #1
 8006636:	d1f3      	bne.n	8006620 <__sfputs_r+0xa>
 8006638:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800663c <_vfiprintf_r>:
 800663c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006640:	460d      	mov	r5, r1
 8006642:	b09d      	sub	sp, #116	; 0x74
 8006644:	4614      	mov	r4, r2
 8006646:	4698      	mov	r8, r3
 8006648:	4606      	mov	r6, r0
 800664a:	b118      	cbz	r0, 8006654 <_vfiprintf_r+0x18>
 800664c:	6983      	ldr	r3, [r0, #24]
 800664e:	b90b      	cbnz	r3, 8006654 <_vfiprintf_r+0x18>
 8006650:	f7ff fddc 	bl	800620c <__sinit>
 8006654:	4b89      	ldr	r3, [pc, #548]	; (800687c <_vfiprintf_r+0x240>)
 8006656:	429d      	cmp	r5, r3
 8006658:	d11b      	bne.n	8006692 <_vfiprintf_r+0x56>
 800665a:	6875      	ldr	r5, [r6, #4]
 800665c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800665e:	07d9      	lsls	r1, r3, #31
 8006660:	d405      	bmi.n	800666e <_vfiprintf_r+0x32>
 8006662:	89ab      	ldrh	r3, [r5, #12]
 8006664:	059a      	lsls	r2, r3, #22
 8006666:	d402      	bmi.n	800666e <_vfiprintf_r+0x32>
 8006668:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800666a:	f7ff fe6d 	bl	8006348 <__retarget_lock_acquire_recursive>
 800666e:	89ab      	ldrh	r3, [r5, #12]
 8006670:	071b      	lsls	r3, r3, #28
 8006672:	d501      	bpl.n	8006678 <_vfiprintf_r+0x3c>
 8006674:	692b      	ldr	r3, [r5, #16]
 8006676:	b9eb      	cbnz	r3, 80066b4 <_vfiprintf_r+0x78>
 8006678:	4629      	mov	r1, r5
 800667a:	4630      	mov	r0, r6
 800667c:	f7ff fc3e 	bl	8005efc <__swsetup_r>
 8006680:	b1c0      	cbz	r0, 80066b4 <_vfiprintf_r+0x78>
 8006682:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006684:	07dc      	lsls	r4, r3, #31
 8006686:	d50e      	bpl.n	80066a6 <_vfiprintf_r+0x6a>
 8006688:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800668c:	b01d      	add	sp, #116	; 0x74
 800668e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006692:	4b7b      	ldr	r3, [pc, #492]	; (8006880 <_vfiprintf_r+0x244>)
 8006694:	429d      	cmp	r5, r3
 8006696:	d101      	bne.n	800669c <_vfiprintf_r+0x60>
 8006698:	68b5      	ldr	r5, [r6, #8]
 800669a:	e7df      	b.n	800665c <_vfiprintf_r+0x20>
 800669c:	4b79      	ldr	r3, [pc, #484]	; (8006884 <_vfiprintf_r+0x248>)
 800669e:	429d      	cmp	r5, r3
 80066a0:	bf08      	it	eq
 80066a2:	68f5      	ldreq	r5, [r6, #12]
 80066a4:	e7da      	b.n	800665c <_vfiprintf_r+0x20>
 80066a6:	89ab      	ldrh	r3, [r5, #12]
 80066a8:	0598      	lsls	r0, r3, #22
 80066aa:	d4ed      	bmi.n	8006688 <_vfiprintf_r+0x4c>
 80066ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80066ae:	f7ff fe4c 	bl	800634a <__retarget_lock_release_recursive>
 80066b2:	e7e9      	b.n	8006688 <_vfiprintf_r+0x4c>
 80066b4:	2300      	movs	r3, #0
 80066b6:	9309      	str	r3, [sp, #36]	; 0x24
 80066b8:	2320      	movs	r3, #32
 80066ba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80066be:	f8cd 800c 	str.w	r8, [sp, #12]
 80066c2:	2330      	movs	r3, #48	; 0x30
 80066c4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006888 <_vfiprintf_r+0x24c>
 80066c8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80066cc:	f04f 0901 	mov.w	r9, #1
 80066d0:	4623      	mov	r3, r4
 80066d2:	469a      	mov	sl, r3
 80066d4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80066d8:	b10a      	cbz	r2, 80066de <_vfiprintf_r+0xa2>
 80066da:	2a25      	cmp	r2, #37	; 0x25
 80066dc:	d1f9      	bne.n	80066d2 <_vfiprintf_r+0x96>
 80066de:	ebba 0b04 	subs.w	fp, sl, r4
 80066e2:	d00b      	beq.n	80066fc <_vfiprintf_r+0xc0>
 80066e4:	465b      	mov	r3, fp
 80066e6:	4622      	mov	r2, r4
 80066e8:	4629      	mov	r1, r5
 80066ea:	4630      	mov	r0, r6
 80066ec:	f7ff ff93 	bl	8006616 <__sfputs_r>
 80066f0:	3001      	adds	r0, #1
 80066f2:	f000 80aa 	beq.w	800684a <_vfiprintf_r+0x20e>
 80066f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80066f8:	445a      	add	r2, fp
 80066fa:	9209      	str	r2, [sp, #36]	; 0x24
 80066fc:	f89a 3000 	ldrb.w	r3, [sl]
 8006700:	2b00      	cmp	r3, #0
 8006702:	f000 80a2 	beq.w	800684a <_vfiprintf_r+0x20e>
 8006706:	2300      	movs	r3, #0
 8006708:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800670c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006710:	f10a 0a01 	add.w	sl, sl, #1
 8006714:	9304      	str	r3, [sp, #16]
 8006716:	9307      	str	r3, [sp, #28]
 8006718:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800671c:	931a      	str	r3, [sp, #104]	; 0x68
 800671e:	4654      	mov	r4, sl
 8006720:	2205      	movs	r2, #5
 8006722:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006726:	4858      	ldr	r0, [pc, #352]	; (8006888 <_vfiprintf_r+0x24c>)
 8006728:	f7f9 fd52 	bl	80001d0 <memchr>
 800672c:	9a04      	ldr	r2, [sp, #16]
 800672e:	b9d8      	cbnz	r0, 8006768 <_vfiprintf_r+0x12c>
 8006730:	06d1      	lsls	r1, r2, #27
 8006732:	bf44      	itt	mi
 8006734:	2320      	movmi	r3, #32
 8006736:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800673a:	0713      	lsls	r3, r2, #28
 800673c:	bf44      	itt	mi
 800673e:	232b      	movmi	r3, #43	; 0x2b
 8006740:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006744:	f89a 3000 	ldrb.w	r3, [sl]
 8006748:	2b2a      	cmp	r3, #42	; 0x2a
 800674a:	d015      	beq.n	8006778 <_vfiprintf_r+0x13c>
 800674c:	9a07      	ldr	r2, [sp, #28]
 800674e:	4654      	mov	r4, sl
 8006750:	2000      	movs	r0, #0
 8006752:	f04f 0c0a 	mov.w	ip, #10
 8006756:	4621      	mov	r1, r4
 8006758:	f811 3b01 	ldrb.w	r3, [r1], #1
 800675c:	3b30      	subs	r3, #48	; 0x30
 800675e:	2b09      	cmp	r3, #9
 8006760:	d94e      	bls.n	8006800 <_vfiprintf_r+0x1c4>
 8006762:	b1b0      	cbz	r0, 8006792 <_vfiprintf_r+0x156>
 8006764:	9207      	str	r2, [sp, #28]
 8006766:	e014      	b.n	8006792 <_vfiprintf_r+0x156>
 8006768:	eba0 0308 	sub.w	r3, r0, r8
 800676c:	fa09 f303 	lsl.w	r3, r9, r3
 8006770:	4313      	orrs	r3, r2
 8006772:	9304      	str	r3, [sp, #16]
 8006774:	46a2      	mov	sl, r4
 8006776:	e7d2      	b.n	800671e <_vfiprintf_r+0xe2>
 8006778:	9b03      	ldr	r3, [sp, #12]
 800677a:	1d19      	adds	r1, r3, #4
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	9103      	str	r1, [sp, #12]
 8006780:	2b00      	cmp	r3, #0
 8006782:	bfbb      	ittet	lt
 8006784:	425b      	neglt	r3, r3
 8006786:	f042 0202 	orrlt.w	r2, r2, #2
 800678a:	9307      	strge	r3, [sp, #28]
 800678c:	9307      	strlt	r3, [sp, #28]
 800678e:	bfb8      	it	lt
 8006790:	9204      	strlt	r2, [sp, #16]
 8006792:	7823      	ldrb	r3, [r4, #0]
 8006794:	2b2e      	cmp	r3, #46	; 0x2e
 8006796:	d10c      	bne.n	80067b2 <_vfiprintf_r+0x176>
 8006798:	7863      	ldrb	r3, [r4, #1]
 800679a:	2b2a      	cmp	r3, #42	; 0x2a
 800679c:	d135      	bne.n	800680a <_vfiprintf_r+0x1ce>
 800679e:	9b03      	ldr	r3, [sp, #12]
 80067a0:	1d1a      	adds	r2, r3, #4
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	9203      	str	r2, [sp, #12]
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	bfb8      	it	lt
 80067aa:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80067ae:	3402      	adds	r4, #2
 80067b0:	9305      	str	r3, [sp, #20]
 80067b2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006898 <_vfiprintf_r+0x25c>
 80067b6:	7821      	ldrb	r1, [r4, #0]
 80067b8:	2203      	movs	r2, #3
 80067ba:	4650      	mov	r0, sl
 80067bc:	f7f9 fd08 	bl	80001d0 <memchr>
 80067c0:	b140      	cbz	r0, 80067d4 <_vfiprintf_r+0x198>
 80067c2:	2340      	movs	r3, #64	; 0x40
 80067c4:	eba0 000a 	sub.w	r0, r0, sl
 80067c8:	fa03 f000 	lsl.w	r0, r3, r0
 80067cc:	9b04      	ldr	r3, [sp, #16]
 80067ce:	4303      	orrs	r3, r0
 80067d0:	3401      	adds	r4, #1
 80067d2:	9304      	str	r3, [sp, #16]
 80067d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80067d8:	482c      	ldr	r0, [pc, #176]	; (800688c <_vfiprintf_r+0x250>)
 80067da:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80067de:	2206      	movs	r2, #6
 80067e0:	f7f9 fcf6 	bl	80001d0 <memchr>
 80067e4:	2800      	cmp	r0, #0
 80067e6:	d03f      	beq.n	8006868 <_vfiprintf_r+0x22c>
 80067e8:	4b29      	ldr	r3, [pc, #164]	; (8006890 <_vfiprintf_r+0x254>)
 80067ea:	bb1b      	cbnz	r3, 8006834 <_vfiprintf_r+0x1f8>
 80067ec:	9b03      	ldr	r3, [sp, #12]
 80067ee:	3307      	adds	r3, #7
 80067f0:	f023 0307 	bic.w	r3, r3, #7
 80067f4:	3308      	adds	r3, #8
 80067f6:	9303      	str	r3, [sp, #12]
 80067f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80067fa:	443b      	add	r3, r7
 80067fc:	9309      	str	r3, [sp, #36]	; 0x24
 80067fe:	e767      	b.n	80066d0 <_vfiprintf_r+0x94>
 8006800:	fb0c 3202 	mla	r2, ip, r2, r3
 8006804:	460c      	mov	r4, r1
 8006806:	2001      	movs	r0, #1
 8006808:	e7a5      	b.n	8006756 <_vfiprintf_r+0x11a>
 800680a:	2300      	movs	r3, #0
 800680c:	3401      	adds	r4, #1
 800680e:	9305      	str	r3, [sp, #20]
 8006810:	4619      	mov	r1, r3
 8006812:	f04f 0c0a 	mov.w	ip, #10
 8006816:	4620      	mov	r0, r4
 8006818:	f810 2b01 	ldrb.w	r2, [r0], #1
 800681c:	3a30      	subs	r2, #48	; 0x30
 800681e:	2a09      	cmp	r2, #9
 8006820:	d903      	bls.n	800682a <_vfiprintf_r+0x1ee>
 8006822:	2b00      	cmp	r3, #0
 8006824:	d0c5      	beq.n	80067b2 <_vfiprintf_r+0x176>
 8006826:	9105      	str	r1, [sp, #20]
 8006828:	e7c3      	b.n	80067b2 <_vfiprintf_r+0x176>
 800682a:	fb0c 2101 	mla	r1, ip, r1, r2
 800682e:	4604      	mov	r4, r0
 8006830:	2301      	movs	r3, #1
 8006832:	e7f0      	b.n	8006816 <_vfiprintf_r+0x1da>
 8006834:	ab03      	add	r3, sp, #12
 8006836:	9300      	str	r3, [sp, #0]
 8006838:	462a      	mov	r2, r5
 800683a:	4b16      	ldr	r3, [pc, #88]	; (8006894 <_vfiprintf_r+0x258>)
 800683c:	a904      	add	r1, sp, #16
 800683e:	4630      	mov	r0, r6
 8006840:	f3af 8000 	nop.w
 8006844:	4607      	mov	r7, r0
 8006846:	1c78      	adds	r0, r7, #1
 8006848:	d1d6      	bne.n	80067f8 <_vfiprintf_r+0x1bc>
 800684a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800684c:	07d9      	lsls	r1, r3, #31
 800684e:	d405      	bmi.n	800685c <_vfiprintf_r+0x220>
 8006850:	89ab      	ldrh	r3, [r5, #12]
 8006852:	059a      	lsls	r2, r3, #22
 8006854:	d402      	bmi.n	800685c <_vfiprintf_r+0x220>
 8006856:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006858:	f7ff fd77 	bl	800634a <__retarget_lock_release_recursive>
 800685c:	89ab      	ldrh	r3, [r5, #12]
 800685e:	065b      	lsls	r3, r3, #25
 8006860:	f53f af12 	bmi.w	8006688 <_vfiprintf_r+0x4c>
 8006864:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006866:	e711      	b.n	800668c <_vfiprintf_r+0x50>
 8006868:	ab03      	add	r3, sp, #12
 800686a:	9300      	str	r3, [sp, #0]
 800686c:	462a      	mov	r2, r5
 800686e:	4b09      	ldr	r3, [pc, #36]	; (8006894 <_vfiprintf_r+0x258>)
 8006870:	a904      	add	r1, sp, #16
 8006872:	4630      	mov	r0, r6
 8006874:	f000 f880 	bl	8006978 <_printf_i>
 8006878:	e7e4      	b.n	8006844 <_vfiprintf_r+0x208>
 800687a:	bf00      	nop
 800687c:	08006ed4 	.word	0x08006ed4
 8006880:	08006ef4 	.word	0x08006ef4
 8006884:	08006eb4 	.word	0x08006eb4
 8006888:	08006f14 	.word	0x08006f14
 800688c:	08006f1e 	.word	0x08006f1e
 8006890:	00000000 	.word	0x00000000
 8006894:	08006617 	.word	0x08006617
 8006898:	08006f1a 	.word	0x08006f1a

0800689c <_printf_common>:
 800689c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80068a0:	4616      	mov	r6, r2
 80068a2:	4699      	mov	r9, r3
 80068a4:	688a      	ldr	r2, [r1, #8]
 80068a6:	690b      	ldr	r3, [r1, #16]
 80068a8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80068ac:	4293      	cmp	r3, r2
 80068ae:	bfb8      	it	lt
 80068b0:	4613      	movlt	r3, r2
 80068b2:	6033      	str	r3, [r6, #0]
 80068b4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80068b8:	4607      	mov	r7, r0
 80068ba:	460c      	mov	r4, r1
 80068bc:	b10a      	cbz	r2, 80068c2 <_printf_common+0x26>
 80068be:	3301      	adds	r3, #1
 80068c0:	6033      	str	r3, [r6, #0]
 80068c2:	6823      	ldr	r3, [r4, #0]
 80068c4:	0699      	lsls	r1, r3, #26
 80068c6:	bf42      	ittt	mi
 80068c8:	6833      	ldrmi	r3, [r6, #0]
 80068ca:	3302      	addmi	r3, #2
 80068cc:	6033      	strmi	r3, [r6, #0]
 80068ce:	6825      	ldr	r5, [r4, #0]
 80068d0:	f015 0506 	ands.w	r5, r5, #6
 80068d4:	d106      	bne.n	80068e4 <_printf_common+0x48>
 80068d6:	f104 0a19 	add.w	sl, r4, #25
 80068da:	68e3      	ldr	r3, [r4, #12]
 80068dc:	6832      	ldr	r2, [r6, #0]
 80068de:	1a9b      	subs	r3, r3, r2
 80068e0:	42ab      	cmp	r3, r5
 80068e2:	dc26      	bgt.n	8006932 <_printf_common+0x96>
 80068e4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80068e8:	1e13      	subs	r3, r2, #0
 80068ea:	6822      	ldr	r2, [r4, #0]
 80068ec:	bf18      	it	ne
 80068ee:	2301      	movne	r3, #1
 80068f0:	0692      	lsls	r2, r2, #26
 80068f2:	d42b      	bmi.n	800694c <_printf_common+0xb0>
 80068f4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80068f8:	4649      	mov	r1, r9
 80068fa:	4638      	mov	r0, r7
 80068fc:	47c0      	blx	r8
 80068fe:	3001      	adds	r0, #1
 8006900:	d01e      	beq.n	8006940 <_printf_common+0xa4>
 8006902:	6823      	ldr	r3, [r4, #0]
 8006904:	68e5      	ldr	r5, [r4, #12]
 8006906:	6832      	ldr	r2, [r6, #0]
 8006908:	f003 0306 	and.w	r3, r3, #6
 800690c:	2b04      	cmp	r3, #4
 800690e:	bf08      	it	eq
 8006910:	1aad      	subeq	r5, r5, r2
 8006912:	68a3      	ldr	r3, [r4, #8]
 8006914:	6922      	ldr	r2, [r4, #16]
 8006916:	bf0c      	ite	eq
 8006918:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800691c:	2500      	movne	r5, #0
 800691e:	4293      	cmp	r3, r2
 8006920:	bfc4      	itt	gt
 8006922:	1a9b      	subgt	r3, r3, r2
 8006924:	18ed      	addgt	r5, r5, r3
 8006926:	2600      	movs	r6, #0
 8006928:	341a      	adds	r4, #26
 800692a:	42b5      	cmp	r5, r6
 800692c:	d11a      	bne.n	8006964 <_printf_common+0xc8>
 800692e:	2000      	movs	r0, #0
 8006930:	e008      	b.n	8006944 <_printf_common+0xa8>
 8006932:	2301      	movs	r3, #1
 8006934:	4652      	mov	r2, sl
 8006936:	4649      	mov	r1, r9
 8006938:	4638      	mov	r0, r7
 800693a:	47c0      	blx	r8
 800693c:	3001      	adds	r0, #1
 800693e:	d103      	bne.n	8006948 <_printf_common+0xac>
 8006940:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006944:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006948:	3501      	adds	r5, #1
 800694a:	e7c6      	b.n	80068da <_printf_common+0x3e>
 800694c:	18e1      	adds	r1, r4, r3
 800694e:	1c5a      	adds	r2, r3, #1
 8006950:	2030      	movs	r0, #48	; 0x30
 8006952:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006956:	4422      	add	r2, r4
 8006958:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800695c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006960:	3302      	adds	r3, #2
 8006962:	e7c7      	b.n	80068f4 <_printf_common+0x58>
 8006964:	2301      	movs	r3, #1
 8006966:	4622      	mov	r2, r4
 8006968:	4649      	mov	r1, r9
 800696a:	4638      	mov	r0, r7
 800696c:	47c0      	blx	r8
 800696e:	3001      	adds	r0, #1
 8006970:	d0e6      	beq.n	8006940 <_printf_common+0xa4>
 8006972:	3601      	adds	r6, #1
 8006974:	e7d9      	b.n	800692a <_printf_common+0x8e>
	...

08006978 <_printf_i>:
 8006978:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800697c:	7e0f      	ldrb	r7, [r1, #24]
 800697e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006980:	2f78      	cmp	r7, #120	; 0x78
 8006982:	4691      	mov	r9, r2
 8006984:	4680      	mov	r8, r0
 8006986:	460c      	mov	r4, r1
 8006988:	469a      	mov	sl, r3
 800698a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800698e:	d807      	bhi.n	80069a0 <_printf_i+0x28>
 8006990:	2f62      	cmp	r7, #98	; 0x62
 8006992:	d80a      	bhi.n	80069aa <_printf_i+0x32>
 8006994:	2f00      	cmp	r7, #0
 8006996:	f000 80d8 	beq.w	8006b4a <_printf_i+0x1d2>
 800699a:	2f58      	cmp	r7, #88	; 0x58
 800699c:	f000 80a3 	beq.w	8006ae6 <_printf_i+0x16e>
 80069a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80069a4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80069a8:	e03a      	b.n	8006a20 <_printf_i+0xa8>
 80069aa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80069ae:	2b15      	cmp	r3, #21
 80069b0:	d8f6      	bhi.n	80069a0 <_printf_i+0x28>
 80069b2:	a101      	add	r1, pc, #4	; (adr r1, 80069b8 <_printf_i+0x40>)
 80069b4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80069b8:	08006a11 	.word	0x08006a11
 80069bc:	08006a25 	.word	0x08006a25
 80069c0:	080069a1 	.word	0x080069a1
 80069c4:	080069a1 	.word	0x080069a1
 80069c8:	080069a1 	.word	0x080069a1
 80069cc:	080069a1 	.word	0x080069a1
 80069d0:	08006a25 	.word	0x08006a25
 80069d4:	080069a1 	.word	0x080069a1
 80069d8:	080069a1 	.word	0x080069a1
 80069dc:	080069a1 	.word	0x080069a1
 80069e0:	080069a1 	.word	0x080069a1
 80069e4:	08006b31 	.word	0x08006b31
 80069e8:	08006a55 	.word	0x08006a55
 80069ec:	08006b13 	.word	0x08006b13
 80069f0:	080069a1 	.word	0x080069a1
 80069f4:	080069a1 	.word	0x080069a1
 80069f8:	08006b53 	.word	0x08006b53
 80069fc:	080069a1 	.word	0x080069a1
 8006a00:	08006a55 	.word	0x08006a55
 8006a04:	080069a1 	.word	0x080069a1
 8006a08:	080069a1 	.word	0x080069a1
 8006a0c:	08006b1b 	.word	0x08006b1b
 8006a10:	682b      	ldr	r3, [r5, #0]
 8006a12:	1d1a      	adds	r2, r3, #4
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	602a      	str	r2, [r5, #0]
 8006a18:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006a1c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006a20:	2301      	movs	r3, #1
 8006a22:	e0a3      	b.n	8006b6c <_printf_i+0x1f4>
 8006a24:	6820      	ldr	r0, [r4, #0]
 8006a26:	6829      	ldr	r1, [r5, #0]
 8006a28:	0606      	lsls	r6, r0, #24
 8006a2a:	f101 0304 	add.w	r3, r1, #4
 8006a2e:	d50a      	bpl.n	8006a46 <_printf_i+0xce>
 8006a30:	680e      	ldr	r6, [r1, #0]
 8006a32:	602b      	str	r3, [r5, #0]
 8006a34:	2e00      	cmp	r6, #0
 8006a36:	da03      	bge.n	8006a40 <_printf_i+0xc8>
 8006a38:	232d      	movs	r3, #45	; 0x2d
 8006a3a:	4276      	negs	r6, r6
 8006a3c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006a40:	485e      	ldr	r0, [pc, #376]	; (8006bbc <_printf_i+0x244>)
 8006a42:	230a      	movs	r3, #10
 8006a44:	e019      	b.n	8006a7a <_printf_i+0x102>
 8006a46:	680e      	ldr	r6, [r1, #0]
 8006a48:	602b      	str	r3, [r5, #0]
 8006a4a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006a4e:	bf18      	it	ne
 8006a50:	b236      	sxthne	r6, r6
 8006a52:	e7ef      	b.n	8006a34 <_printf_i+0xbc>
 8006a54:	682b      	ldr	r3, [r5, #0]
 8006a56:	6820      	ldr	r0, [r4, #0]
 8006a58:	1d19      	adds	r1, r3, #4
 8006a5a:	6029      	str	r1, [r5, #0]
 8006a5c:	0601      	lsls	r1, r0, #24
 8006a5e:	d501      	bpl.n	8006a64 <_printf_i+0xec>
 8006a60:	681e      	ldr	r6, [r3, #0]
 8006a62:	e002      	b.n	8006a6a <_printf_i+0xf2>
 8006a64:	0646      	lsls	r6, r0, #25
 8006a66:	d5fb      	bpl.n	8006a60 <_printf_i+0xe8>
 8006a68:	881e      	ldrh	r6, [r3, #0]
 8006a6a:	4854      	ldr	r0, [pc, #336]	; (8006bbc <_printf_i+0x244>)
 8006a6c:	2f6f      	cmp	r7, #111	; 0x6f
 8006a6e:	bf0c      	ite	eq
 8006a70:	2308      	moveq	r3, #8
 8006a72:	230a      	movne	r3, #10
 8006a74:	2100      	movs	r1, #0
 8006a76:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006a7a:	6865      	ldr	r5, [r4, #4]
 8006a7c:	60a5      	str	r5, [r4, #8]
 8006a7e:	2d00      	cmp	r5, #0
 8006a80:	bfa2      	ittt	ge
 8006a82:	6821      	ldrge	r1, [r4, #0]
 8006a84:	f021 0104 	bicge.w	r1, r1, #4
 8006a88:	6021      	strge	r1, [r4, #0]
 8006a8a:	b90e      	cbnz	r6, 8006a90 <_printf_i+0x118>
 8006a8c:	2d00      	cmp	r5, #0
 8006a8e:	d04d      	beq.n	8006b2c <_printf_i+0x1b4>
 8006a90:	4615      	mov	r5, r2
 8006a92:	fbb6 f1f3 	udiv	r1, r6, r3
 8006a96:	fb03 6711 	mls	r7, r3, r1, r6
 8006a9a:	5dc7      	ldrb	r7, [r0, r7]
 8006a9c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006aa0:	4637      	mov	r7, r6
 8006aa2:	42bb      	cmp	r3, r7
 8006aa4:	460e      	mov	r6, r1
 8006aa6:	d9f4      	bls.n	8006a92 <_printf_i+0x11a>
 8006aa8:	2b08      	cmp	r3, #8
 8006aaa:	d10b      	bne.n	8006ac4 <_printf_i+0x14c>
 8006aac:	6823      	ldr	r3, [r4, #0]
 8006aae:	07de      	lsls	r6, r3, #31
 8006ab0:	d508      	bpl.n	8006ac4 <_printf_i+0x14c>
 8006ab2:	6923      	ldr	r3, [r4, #16]
 8006ab4:	6861      	ldr	r1, [r4, #4]
 8006ab6:	4299      	cmp	r1, r3
 8006ab8:	bfde      	ittt	le
 8006aba:	2330      	movle	r3, #48	; 0x30
 8006abc:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006ac0:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8006ac4:	1b52      	subs	r2, r2, r5
 8006ac6:	6122      	str	r2, [r4, #16]
 8006ac8:	f8cd a000 	str.w	sl, [sp]
 8006acc:	464b      	mov	r3, r9
 8006ace:	aa03      	add	r2, sp, #12
 8006ad0:	4621      	mov	r1, r4
 8006ad2:	4640      	mov	r0, r8
 8006ad4:	f7ff fee2 	bl	800689c <_printf_common>
 8006ad8:	3001      	adds	r0, #1
 8006ada:	d14c      	bne.n	8006b76 <_printf_i+0x1fe>
 8006adc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006ae0:	b004      	add	sp, #16
 8006ae2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ae6:	4835      	ldr	r0, [pc, #212]	; (8006bbc <_printf_i+0x244>)
 8006ae8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006aec:	6829      	ldr	r1, [r5, #0]
 8006aee:	6823      	ldr	r3, [r4, #0]
 8006af0:	f851 6b04 	ldr.w	r6, [r1], #4
 8006af4:	6029      	str	r1, [r5, #0]
 8006af6:	061d      	lsls	r5, r3, #24
 8006af8:	d514      	bpl.n	8006b24 <_printf_i+0x1ac>
 8006afa:	07df      	lsls	r7, r3, #31
 8006afc:	bf44      	itt	mi
 8006afe:	f043 0320 	orrmi.w	r3, r3, #32
 8006b02:	6023      	strmi	r3, [r4, #0]
 8006b04:	b91e      	cbnz	r6, 8006b0e <_printf_i+0x196>
 8006b06:	6823      	ldr	r3, [r4, #0]
 8006b08:	f023 0320 	bic.w	r3, r3, #32
 8006b0c:	6023      	str	r3, [r4, #0]
 8006b0e:	2310      	movs	r3, #16
 8006b10:	e7b0      	b.n	8006a74 <_printf_i+0xfc>
 8006b12:	6823      	ldr	r3, [r4, #0]
 8006b14:	f043 0320 	orr.w	r3, r3, #32
 8006b18:	6023      	str	r3, [r4, #0]
 8006b1a:	2378      	movs	r3, #120	; 0x78
 8006b1c:	4828      	ldr	r0, [pc, #160]	; (8006bc0 <_printf_i+0x248>)
 8006b1e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006b22:	e7e3      	b.n	8006aec <_printf_i+0x174>
 8006b24:	0659      	lsls	r1, r3, #25
 8006b26:	bf48      	it	mi
 8006b28:	b2b6      	uxthmi	r6, r6
 8006b2a:	e7e6      	b.n	8006afa <_printf_i+0x182>
 8006b2c:	4615      	mov	r5, r2
 8006b2e:	e7bb      	b.n	8006aa8 <_printf_i+0x130>
 8006b30:	682b      	ldr	r3, [r5, #0]
 8006b32:	6826      	ldr	r6, [r4, #0]
 8006b34:	6961      	ldr	r1, [r4, #20]
 8006b36:	1d18      	adds	r0, r3, #4
 8006b38:	6028      	str	r0, [r5, #0]
 8006b3a:	0635      	lsls	r5, r6, #24
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	d501      	bpl.n	8006b44 <_printf_i+0x1cc>
 8006b40:	6019      	str	r1, [r3, #0]
 8006b42:	e002      	b.n	8006b4a <_printf_i+0x1d2>
 8006b44:	0670      	lsls	r0, r6, #25
 8006b46:	d5fb      	bpl.n	8006b40 <_printf_i+0x1c8>
 8006b48:	8019      	strh	r1, [r3, #0]
 8006b4a:	2300      	movs	r3, #0
 8006b4c:	6123      	str	r3, [r4, #16]
 8006b4e:	4615      	mov	r5, r2
 8006b50:	e7ba      	b.n	8006ac8 <_printf_i+0x150>
 8006b52:	682b      	ldr	r3, [r5, #0]
 8006b54:	1d1a      	adds	r2, r3, #4
 8006b56:	602a      	str	r2, [r5, #0]
 8006b58:	681d      	ldr	r5, [r3, #0]
 8006b5a:	6862      	ldr	r2, [r4, #4]
 8006b5c:	2100      	movs	r1, #0
 8006b5e:	4628      	mov	r0, r5
 8006b60:	f7f9 fb36 	bl	80001d0 <memchr>
 8006b64:	b108      	cbz	r0, 8006b6a <_printf_i+0x1f2>
 8006b66:	1b40      	subs	r0, r0, r5
 8006b68:	6060      	str	r0, [r4, #4]
 8006b6a:	6863      	ldr	r3, [r4, #4]
 8006b6c:	6123      	str	r3, [r4, #16]
 8006b6e:	2300      	movs	r3, #0
 8006b70:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006b74:	e7a8      	b.n	8006ac8 <_printf_i+0x150>
 8006b76:	6923      	ldr	r3, [r4, #16]
 8006b78:	462a      	mov	r2, r5
 8006b7a:	4649      	mov	r1, r9
 8006b7c:	4640      	mov	r0, r8
 8006b7e:	47d0      	blx	sl
 8006b80:	3001      	adds	r0, #1
 8006b82:	d0ab      	beq.n	8006adc <_printf_i+0x164>
 8006b84:	6823      	ldr	r3, [r4, #0]
 8006b86:	079b      	lsls	r3, r3, #30
 8006b88:	d413      	bmi.n	8006bb2 <_printf_i+0x23a>
 8006b8a:	68e0      	ldr	r0, [r4, #12]
 8006b8c:	9b03      	ldr	r3, [sp, #12]
 8006b8e:	4298      	cmp	r0, r3
 8006b90:	bfb8      	it	lt
 8006b92:	4618      	movlt	r0, r3
 8006b94:	e7a4      	b.n	8006ae0 <_printf_i+0x168>
 8006b96:	2301      	movs	r3, #1
 8006b98:	4632      	mov	r2, r6
 8006b9a:	4649      	mov	r1, r9
 8006b9c:	4640      	mov	r0, r8
 8006b9e:	47d0      	blx	sl
 8006ba0:	3001      	adds	r0, #1
 8006ba2:	d09b      	beq.n	8006adc <_printf_i+0x164>
 8006ba4:	3501      	adds	r5, #1
 8006ba6:	68e3      	ldr	r3, [r4, #12]
 8006ba8:	9903      	ldr	r1, [sp, #12]
 8006baa:	1a5b      	subs	r3, r3, r1
 8006bac:	42ab      	cmp	r3, r5
 8006bae:	dcf2      	bgt.n	8006b96 <_printf_i+0x21e>
 8006bb0:	e7eb      	b.n	8006b8a <_printf_i+0x212>
 8006bb2:	2500      	movs	r5, #0
 8006bb4:	f104 0619 	add.w	r6, r4, #25
 8006bb8:	e7f5      	b.n	8006ba6 <_printf_i+0x22e>
 8006bba:	bf00      	nop
 8006bbc:	08006f25 	.word	0x08006f25
 8006bc0:	08006f36 	.word	0x08006f36

08006bc4 <_sbrk_r>:
 8006bc4:	b538      	push	{r3, r4, r5, lr}
 8006bc6:	4d06      	ldr	r5, [pc, #24]	; (8006be0 <_sbrk_r+0x1c>)
 8006bc8:	2300      	movs	r3, #0
 8006bca:	4604      	mov	r4, r0
 8006bcc:	4608      	mov	r0, r1
 8006bce:	602b      	str	r3, [r5, #0]
 8006bd0:	f7f9 fe60 	bl	8000894 <_sbrk>
 8006bd4:	1c43      	adds	r3, r0, #1
 8006bd6:	d102      	bne.n	8006bde <_sbrk_r+0x1a>
 8006bd8:	682b      	ldr	r3, [r5, #0]
 8006bda:	b103      	cbz	r3, 8006bde <_sbrk_r+0x1a>
 8006bdc:	6023      	str	r3, [r4, #0]
 8006bde:	bd38      	pop	{r3, r4, r5, pc}
 8006be0:	2000024c 	.word	0x2000024c

08006be4 <__sread>:
 8006be4:	b510      	push	{r4, lr}
 8006be6:	460c      	mov	r4, r1
 8006be8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006bec:	f000 f8a0 	bl	8006d30 <_read_r>
 8006bf0:	2800      	cmp	r0, #0
 8006bf2:	bfab      	itete	ge
 8006bf4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006bf6:	89a3      	ldrhlt	r3, [r4, #12]
 8006bf8:	181b      	addge	r3, r3, r0
 8006bfa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006bfe:	bfac      	ite	ge
 8006c00:	6563      	strge	r3, [r4, #84]	; 0x54
 8006c02:	81a3      	strhlt	r3, [r4, #12]
 8006c04:	bd10      	pop	{r4, pc}

08006c06 <__swrite>:
 8006c06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c0a:	461f      	mov	r7, r3
 8006c0c:	898b      	ldrh	r3, [r1, #12]
 8006c0e:	05db      	lsls	r3, r3, #23
 8006c10:	4605      	mov	r5, r0
 8006c12:	460c      	mov	r4, r1
 8006c14:	4616      	mov	r6, r2
 8006c16:	d505      	bpl.n	8006c24 <__swrite+0x1e>
 8006c18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c1c:	2302      	movs	r3, #2
 8006c1e:	2200      	movs	r2, #0
 8006c20:	f000 f868 	bl	8006cf4 <_lseek_r>
 8006c24:	89a3      	ldrh	r3, [r4, #12]
 8006c26:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006c2a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006c2e:	81a3      	strh	r3, [r4, #12]
 8006c30:	4632      	mov	r2, r6
 8006c32:	463b      	mov	r3, r7
 8006c34:	4628      	mov	r0, r5
 8006c36:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006c3a:	f000 b817 	b.w	8006c6c <_write_r>

08006c3e <__sseek>:
 8006c3e:	b510      	push	{r4, lr}
 8006c40:	460c      	mov	r4, r1
 8006c42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c46:	f000 f855 	bl	8006cf4 <_lseek_r>
 8006c4a:	1c43      	adds	r3, r0, #1
 8006c4c:	89a3      	ldrh	r3, [r4, #12]
 8006c4e:	bf15      	itete	ne
 8006c50:	6560      	strne	r0, [r4, #84]	; 0x54
 8006c52:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006c56:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006c5a:	81a3      	strheq	r3, [r4, #12]
 8006c5c:	bf18      	it	ne
 8006c5e:	81a3      	strhne	r3, [r4, #12]
 8006c60:	bd10      	pop	{r4, pc}

08006c62 <__sclose>:
 8006c62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c66:	f000 b813 	b.w	8006c90 <_close_r>
	...

08006c6c <_write_r>:
 8006c6c:	b538      	push	{r3, r4, r5, lr}
 8006c6e:	4d07      	ldr	r5, [pc, #28]	; (8006c8c <_write_r+0x20>)
 8006c70:	4604      	mov	r4, r0
 8006c72:	4608      	mov	r0, r1
 8006c74:	4611      	mov	r1, r2
 8006c76:	2200      	movs	r2, #0
 8006c78:	602a      	str	r2, [r5, #0]
 8006c7a:	461a      	mov	r2, r3
 8006c7c:	f7f9 fcc8 	bl	8000610 <_write>
 8006c80:	1c43      	adds	r3, r0, #1
 8006c82:	d102      	bne.n	8006c8a <_write_r+0x1e>
 8006c84:	682b      	ldr	r3, [r5, #0]
 8006c86:	b103      	cbz	r3, 8006c8a <_write_r+0x1e>
 8006c88:	6023      	str	r3, [r4, #0]
 8006c8a:	bd38      	pop	{r3, r4, r5, pc}
 8006c8c:	2000024c 	.word	0x2000024c

08006c90 <_close_r>:
 8006c90:	b538      	push	{r3, r4, r5, lr}
 8006c92:	4d06      	ldr	r5, [pc, #24]	; (8006cac <_close_r+0x1c>)
 8006c94:	2300      	movs	r3, #0
 8006c96:	4604      	mov	r4, r0
 8006c98:	4608      	mov	r0, r1
 8006c9a:	602b      	str	r3, [r5, #0]
 8006c9c:	f7f9 fdc5 	bl	800082a <_close>
 8006ca0:	1c43      	adds	r3, r0, #1
 8006ca2:	d102      	bne.n	8006caa <_close_r+0x1a>
 8006ca4:	682b      	ldr	r3, [r5, #0]
 8006ca6:	b103      	cbz	r3, 8006caa <_close_r+0x1a>
 8006ca8:	6023      	str	r3, [r4, #0]
 8006caa:	bd38      	pop	{r3, r4, r5, pc}
 8006cac:	2000024c 	.word	0x2000024c

08006cb0 <_fstat_r>:
 8006cb0:	b538      	push	{r3, r4, r5, lr}
 8006cb2:	4d07      	ldr	r5, [pc, #28]	; (8006cd0 <_fstat_r+0x20>)
 8006cb4:	2300      	movs	r3, #0
 8006cb6:	4604      	mov	r4, r0
 8006cb8:	4608      	mov	r0, r1
 8006cba:	4611      	mov	r1, r2
 8006cbc:	602b      	str	r3, [r5, #0]
 8006cbe:	f7f9 fdc0 	bl	8000842 <_fstat>
 8006cc2:	1c43      	adds	r3, r0, #1
 8006cc4:	d102      	bne.n	8006ccc <_fstat_r+0x1c>
 8006cc6:	682b      	ldr	r3, [r5, #0]
 8006cc8:	b103      	cbz	r3, 8006ccc <_fstat_r+0x1c>
 8006cca:	6023      	str	r3, [r4, #0]
 8006ccc:	bd38      	pop	{r3, r4, r5, pc}
 8006cce:	bf00      	nop
 8006cd0:	2000024c 	.word	0x2000024c

08006cd4 <_isatty_r>:
 8006cd4:	b538      	push	{r3, r4, r5, lr}
 8006cd6:	4d06      	ldr	r5, [pc, #24]	; (8006cf0 <_isatty_r+0x1c>)
 8006cd8:	2300      	movs	r3, #0
 8006cda:	4604      	mov	r4, r0
 8006cdc:	4608      	mov	r0, r1
 8006cde:	602b      	str	r3, [r5, #0]
 8006ce0:	f7f9 fdbf 	bl	8000862 <_isatty>
 8006ce4:	1c43      	adds	r3, r0, #1
 8006ce6:	d102      	bne.n	8006cee <_isatty_r+0x1a>
 8006ce8:	682b      	ldr	r3, [r5, #0]
 8006cea:	b103      	cbz	r3, 8006cee <_isatty_r+0x1a>
 8006cec:	6023      	str	r3, [r4, #0]
 8006cee:	bd38      	pop	{r3, r4, r5, pc}
 8006cf0:	2000024c 	.word	0x2000024c

08006cf4 <_lseek_r>:
 8006cf4:	b538      	push	{r3, r4, r5, lr}
 8006cf6:	4d07      	ldr	r5, [pc, #28]	; (8006d14 <_lseek_r+0x20>)
 8006cf8:	4604      	mov	r4, r0
 8006cfa:	4608      	mov	r0, r1
 8006cfc:	4611      	mov	r1, r2
 8006cfe:	2200      	movs	r2, #0
 8006d00:	602a      	str	r2, [r5, #0]
 8006d02:	461a      	mov	r2, r3
 8006d04:	f7f9 fdb8 	bl	8000878 <_lseek>
 8006d08:	1c43      	adds	r3, r0, #1
 8006d0a:	d102      	bne.n	8006d12 <_lseek_r+0x1e>
 8006d0c:	682b      	ldr	r3, [r5, #0]
 8006d0e:	b103      	cbz	r3, 8006d12 <_lseek_r+0x1e>
 8006d10:	6023      	str	r3, [r4, #0]
 8006d12:	bd38      	pop	{r3, r4, r5, pc}
 8006d14:	2000024c 	.word	0x2000024c

08006d18 <__malloc_lock>:
 8006d18:	4801      	ldr	r0, [pc, #4]	; (8006d20 <__malloc_lock+0x8>)
 8006d1a:	f7ff bb15 	b.w	8006348 <__retarget_lock_acquire_recursive>
 8006d1e:	bf00      	nop
 8006d20:	20000240 	.word	0x20000240

08006d24 <__malloc_unlock>:
 8006d24:	4801      	ldr	r0, [pc, #4]	; (8006d2c <__malloc_unlock+0x8>)
 8006d26:	f7ff bb10 	b.w	800634a <__retarget_lock_release_recursive>
 8006d2a:	bf00      	nop
 8006d2c:	20000240 	.word	0x20000240

08006d30 <_read_r>:
 8006d30:	b538      	push	{r3, r4, r5, lr}
 8006d32:	4d07      	ldr	r5, [pc, #28]	; (8006d50 <_read_r+0x20>)
 8006d34:	4604      	mov	r4, r0
 8006d36:	4608      	mov	r0, r1
 8006d38:	4611      	mov	r1, r2
 8006d3a:	2200      	movs	r2, #0
 8006d3c:	602a      	str	r2, [r5, #0]
 8006d3e:	461a      	mov	r2, r3
 8006d40:	f7f9 fd56 	bl	80007f0 <_read>
 8006d44:	1c43      	adds	r3, r0, #1
 8006d46:	d102      	bne.n	8006d4e <_read_r+0x1e>
 8006d48:	682b      	ldr	r3, [r5, #0]
 8006d4a:	b103      	cbz	r3, 8006d4e <_read_r+0x1e>
 8006d4c:	6023      	str	r3, [r4, #0]
 8006d4e:	bd38      	pop	{r3, r4, r5, pc}
 8006d50:	2000024c 	.word	0x2000024c

08006d54 <_init>:
 8006d54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d56:	bf00      	nop
 8006d58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d5a:	bc08      	pop	{r3}
 8006d5c:	469e      	mov	lr, r3
 8006d5e:	4770      	bx	lr

08006d60 <_fini>:
 8006d60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d62:	bf00      	nop
 8006d64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d66:	bc08      	pop	{r3}
 8006d68:	469e      	mov	lr, r3
 8006d6a:	4770      	bx	lr
